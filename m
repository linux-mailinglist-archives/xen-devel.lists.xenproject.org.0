Return-Path: <xen-devel-bounces@lists.xenproject.org>
X-Original-To: lists+xen-devel@lfdr.de
Delivered-To: lists+xen-devel@lfdr.de
Received: from lists.xenproject.org (lists.xenproject.org [192.237.175.120])
	by mail.lfdr.de (Postfix) with ESMTPS id 300151805C2
	for <lists+xen-devel@lfdr.de>; Tue, 10 Mar 2020 19:05:29 +0100 (CET)
Received: from localhost ([127.0.0.1] helo=lists.xenproject.org)
	by lists.xenproject.org with esmtp (Exim 4.89)
	(envelope-from <xen-devel-bounces@lists.xenproject.org>)
	id 1jBjCx-0002F3-Jo; Tue, 10 Mar 2020 18:02:23 +0000
Received: from all-amaz-eas1.inumbo.com ([34.197.232.57]
 helo=us1-amaz-eas2.inumbo.com)
 by lists.xenproject.org with esmtp (Exim 4.89) (envelope-from
 <SRS0=Pk/+=43=xenproject.org=osstest-admin@srs-us1.protection.inumbo.net>)
 id 1jBjCv-0002Ey-Oy
 for xen-devel@lists.xenproject.org; Tue, 10 Mar 2020 18:02:21 +0000
X-Inumbo-ID: 45c5a7bf-62f9-11ea-ae16-12813bfff9fa
Received: from mail.xenproject.org (unknown [104.130.215.37])
 by us1-amaz-eas2.inumbo.com (Halon) with ESMTPS
 id 45c5a7bf-62f9-11ea-ae16-12813bfff9fa;
 Tue, 10 Mar 2020 18:02:15 +0000 (UTC)
Received: from host146.205.237.98.conversent.net ([205.237.98.146]
 helo=infra.test-lab.xenproject.org)
 by mail.xenproject.org with esmtp (Exim 4.89)
 (envelope-from <osstest-admin@xenproject.org>)
 id 1jBjCo-0005iH-O8; Tue, 10 Mar 2020 18:02:14 +0000
Received: from [172.16.144.3] (helo=osstest.test-lab.xenproject.org)
 by infra.test-lab.xenproject.org with esmtp (Exim 4.89)
 (envelope-from <osstest-admin@xenproject.org>)
 id 1jBjCo-0003bA-Gm; Tue, 10 Mar 2020 18:02:14 +0000
Received: from osstest by osstest.test-lab.xenproject.org with local (Exim
 4.89) (envelope-from <osstest-admin@xenproject.org>)
 id 1jBjCo-0006zr-GC; Tue, 10 Mar 2020 18:02:14 +0000
To: xen-devel@lists.xenproject.org,
    osstest-admin@xenproject.org
Message-ID: <osstest-148381-mainreport@xen.org>
MIME-Version: 1.0
X-Osstest-Failures: xen-unstable-smoke:test-armhf-armhf-xl:guest-start/debian.repeat:fail:regression
 xen-unstable-smoke:test-amd64-amd64-libvirt:migrate-support-check:fail:nonblocking
 xen-unstable-smoke:test-arm64-arm64-xl-xsm:migrate-support-check:fail:nonblocking
 xen-unstable-smoke:test-arm64-arm64-xl-xsm:saverestore-support-check:fail:nonblocking
 xen-unstable-smoke:test-armhf-armhf-xl:migrate-support-check:fail:nonblocking
 xen-unstable-smoke:test-armhf-armhf-xl:saverestore-support-check:fail:nonblocking
X-Osstest-Versions-This: xen=0198960edbf0e681cef59fd81c994643e7b148e0
X-Osstest-Versions-That: xen=99f1c935190986068a36fb5e78a00e6b71b08f25
From: osstest service owner <osstest-admin@xenproject.org>
Date: Tue, 10 Mar 2020 18:02:14 +0000
Subject: [Xen-devel] [xen-unstable-smoke test] 148381: regressions - FAIL
X-BeenThere: xen-devel@lists.xenproject.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Xen developer discussion <xen-devel.lists.xenproject.org>
List-Unsubscribe: <https://lists.xenproject.org/mailman/options/xen-devel>,
 <mailto:xen-devel-request@lists.xenproject.org?subject=unsubscribe>
List-Post: <mailto:xen-devel@lists.xenproject.org>
List-Help: <mailto:xen-devel-request@lists.xenproject.org?subject=help>
List-Subscribe: <https://lists.xenproject.org/mailman/listinfo/xen-devel>,
 <mailto:xen-devel-request@lists.xenproject.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: xen-devel-bounces@lists.xenproject.org
Sender: "Xen-devel" <xen-devel-bounces@lists.xenproject.org>

ZmxpZ2h0IDE0ODM4MSB4ZW4tdW5zdGFibGUtc21va2UgcmVhbCBbcmVhbF0KaHR0cDovL2xvZ3Mu
dGVzdC1sYWIueGVucHJvamVjdC5vcmcvb3NzdGVzdC9sb2dzLzE0ODM4MS8KClJlZ3Jlc3Npb25z
IDotKAoKVGVzdHMgd2hpY2ggZGlkIG5vdCBzdWNjZWVkIGFuZCBhcmUgYmxvY2tpbmcsCmluY2x1
ZGluZyB0ZXN0cyB3aGljaCBjb3VsZCBub3QgYmUgcnVuOgogdGVzdC1hcm1oZi1hcm1oZi14bCAg
ICAgICAgIDE2IGd1ZXN0LXN0YXJ0L2RlYmlhbi5yZXBlYXQgZmFpbCBSRUdSLiB2cy4gMTQ4MzIz
CgpUZXN0cyB3aGljaCBkaWQgbm90IHN1Y2NlZWQsIGJ1dCBhcmUgbm90IGJsb2NraW5nOgogdGVz
dC1hbWQ2NC1hbWQ2NC1saWJ2aXJ0ICAgICAxMyBtaWdyYXRlLXN1cHBvcnQtY2hlY2sgICAgICAg
IGZhaWwgICBuZXZlciBwYXNzCiB0ZXN0LWFybTY0LWFybTY0LXhsLXhzbSAgICAgIDEzIG1pZ3Jh
dGUtc3VwcG9ydC1jaGVjayAgICAgICAgZmFpbCAgIG5ldmVyIHBhc3MKIHRlc3QtYXJtNjQtYXJt
NjQteGwteHNtICAgICAgMTQgc2F2ZXJlc3RvcmUtc3VwcG9ydC1jaGVjayAgICBmYWlsICAgbmV2
ZXIgcGFzcwogdGVzdC1hcm1oZi1hcm1oZi14bCAgICAgICAgICAxMyBtaWdyYXRlLXN1cHBvcnQt
Y2hlY2sgICAgICAgIGZhaWwgICBuZXZlciBwYXNzCiB0ZXN0LWFybWhmLWFybWhmLXhsICAgICAg
ICAgIDE0IHNhdmVyZXN0b3JlLXN1cHBvcnQtY2hlY2sgICAgZmFpbCAgIG5ldmVyIHBhc3MKCnZl
cnNpb24gdGFyZ2V0ZWQgZm9yIHRlc3Rpbmc6CiB4ZW4gICAgICAgICAgICAgICAgICAwMTk4OTYw
ZWRiZjBlNjgxY2VmNTlmZDgxYzk5NDY0M2U3YjE0OGUwCmJhc2VsaW5lIHZlcnNpb246CiB4ZW4g
ICAgICAgICAgICAgICAgICA5OWYxYzkzNTE5MDk4NjA2OGEzNmZiNWU3OGEwMGU2YjcxYjA4ZjI1
CgpMYXN0IHRlc3Qgb2YgYmFzaXMgICAxNDgzMjMgIDIwMjAtMDMtMDkgMTU6MDE6MjkgWiAgICAx
IGRheXMKVGVzdGluZyBzYW1lIHNpbmNlICAgMTQ4MzgxICAyMDIwLTAzLTEwIDE1OjA1OjUzIFog
ICAgMCBkYXlzICAgIDEgYXR0ZW1wdHMKCi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpQZW9wbGUgd2hvIHRvdWNoZWQgcmV2aXNpb25z
IHVuZGVyIHRlc3Q6CiAgSmFuIEJldWxpY2ggPGpiZXVsaWNoQHN1c2UuY29tPgogIFJvZ2VyIFBh
dSBNb25uw6kgPHJvZ2VyLnBhdUBjaXRyaXguY29tPgogIFJvc3MgTGFnZXJ3YWxsIDxyb3NzLmxh
Z2Vyd2FsbEBjaXRyaXguY29tPgogIFRhbWFzIEsgTGVuZ3llbCA8dGFtYXNAdGtsZW5neWVsLmNv
bT4KICBUaW0gRGVlZ2FuIDx0aW1AeGVuLm9yZz4KCmpvYnM6CiBidWlsZC1hcm02NC14c20gICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzcyAgICAKIGJ1aWxk
LWFtZDY0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBw
YXNzICAgIAogYnVpbGQtYXJtaGYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIHBhc3MgICAgCiBidWlsZC1hbWQ2NC1saWJ2aXJ0ICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzcyAgICAKIHRlc3QtYXJtaGYtYXJtaGYteGwg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsICAgIAogdGVzdC1h
cm02NC1hcm02NC14bC14c20gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBh
c3MgICAgCiB0ZXN0LWFtZDY0LWFtZDY0LXhsLXFlbXV1LWRlYmlhbmh2bS1hbWQ2NCAgICAgICAg
ICAgICAgICAgICAgcGFzcyAgICAKIHRlc3QtYW1kNjQtYW1kNjQtbGlidmlydCAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzICAgIAoKCi0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQpzZy1yZXBvcnQtZmxpZ2h0
IG9uIG9zc3Rlc3QudGVzdC1sYWIueGVucHJvamVjdC5vcmcKbG9nczogL2hvbWUvbG9ncy9sb2dz
CmltYWdlczogL2hvbWUvbG9ncy9pbWFnZXMKCkxvZ3MsIGNvbmZpZyBmaWxlcywgZXRjLiBhcmUg
YXZhaWxhYmxlIGF0CiAgICBodHRwOi8vbG9ncy50ZXN0LWxhYi54ZW5wcm9qZWN0Lm9yZy9vc3N0
ZXN0L2xvZ3MKCkV4cGxhbmF0aW9uIG9mIHRoZXNlIHJlcG9ydHMsIGFuZCBvZiBvc3N0ZXN0IGlu
IGdlbmVyYWwsIGlzIGF0CiAgICBodHRwOi8veGVuYml0cy54ZW4ub3JnL2dpdHdlYi8/cD1vc3N0
ZXN0LmdpdDthPWJsb2I7Zj1SRUFETUUuZW1haWw7aGI9bWFzdGVyCiAgICBodHRwOi8veGVuYml0
cy54ZW4ub3JnL2dpdHdlYi8/cD1vc3N0ZXN0LmdpdDthPWJsb2I7Zj1SRUFETUU7aGI9bWFzdGVy
CgpUZXN0IGhhcm5lc3MgY29kZSBjYW4gYmUgZm91bmQgYXQKICAgIGh0dHA6Ly94ZW5iaXRzLnhl
bi5vcmcvZ2l0d2ViP3A9b3NzdGVzdC5naXQ7YT1zdW1tYXJ5CgoKTm90IHB1c2hpbmcuCgotLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0K
Y29tbWl0IDAxOTg5NjBlZGJmMGU2ODFjZWY1OWZkODFjOTk0NjQzZTdiMTQ4ZTAKQXV0aG9yOiBK
YW4gQmV1bGljaCA8amJldWxpY2hAc3VzZS5jb20+CkRhdGU6ICAgVHVlIE1hciAxMCAxNTozODoy
NSAyMDIwICswMTAwCgogICAgdm1ldmVudDogcmVkdWNlIGluY2x1ZGUgZGVwZW5kZW5jaWVzCiAg
ICAKICAgIFRoZXJlJ3Mgbm8gbmVlZCBmb3IgdmlydHVhbGx5IGV2ZXJ5dGhpbmcgdG8gaW5jbHVk
ZSBwdWJsaWMvdm1fZXZlbnQuaC4KICAgIE1vdmUgaXRzIGluY2x1c2lvbiBvdXQgb2Ygc2NoZWQu
aC4gVGhpcyByZXF1aXJlcyB1c2luZyB0aGUgbm9uLXR5cGVkZWYKICAgIG5hbWUgaW4gcDJtX21l
bV9wYWdpbmdfcmVzdW1lKCkncyBwcm90b3R5cGU7IGJ5IG5vdCBjaGFuZ2luZyB0aGUKICAgIGZ1
bmN0aW9uIGRlZmluaXRpb24gYXQgdGhlIHNhbWUgdGltZSBpdCdsbCByZW1haW4gY2VydGFpbiB0
aGF0IHRoZSBidWlsZAogICAgd291bGQgZmFpbCBpZiB0aGUgdHlwZWRlZiBpdHNlbGYgd2FzIGNo
YW5nZWQuCiAgICAKICAgIFNpZ25lZC1vZmYtYnk6IEphbiBCZXVsaWNoIDxqYmV1bGljaEBzdXNl
LmNvbT4KICAgIEFja2VkLWJ5OiBSb3NzIExhZ2Vyd2FsbCA8cm9zcy5sYWdlcndhbGxAY2l0cml4
LmNvbT4KICAgIFJldmlld2VkLWJ5OiBBbGV4YW5kcnUgSXNhaWxhIDxhaXNhaWxhQGJpdGRlZmVu
ZGVyLmNvbT4KICAgIEFja2VkLWJ5OiBUYW1hcyBLIExlbmd5ZWwgPHRhbWFzQHRrbGVuZ3llbC5j
b20+Cgpjb21taXQgMDYwNGUxNTQ5YWM1MjI0NDNmMDFkNDk3NzRmNzNjZmE2NzU2MTM1OApBdXRo
b3I6IEphbiBCZXVsaWNoIDxqYmV1bGljaEBzdXNlLmNvbT4KRGF0ZTogICBUdWUgTWFyIDEwIDE1
OjM3OjMwIDIwMjAgKzAxMDAKCiAgICBJT01NVTogaW9tbXVfc25vb3AgaXMgeDg2LW9ubHkKICAg
IAogICAgSW4gZmFjdCBpdCdzIFZULWQgc3BlY2lmaWMsIGJ1dCB3ZSBkb24ndCBoYXZlIGEgd2F5
IHlldCB0byBidWlsZCBjb2RlCiAgICBmb3IganVzdCBvbmUgdmVuZG9yLiBQcm92aWRlIGEgI2Rl
ZmluZSBmb3IgdGhlIG9wcG9zaXRlIGNhc2UuCiAgICAKICAgIFNpZ25lZC1vZmYtYnk6IEphbiBC
ZXVsaWNoIDxqYmV1bGljaEBzdXNlLmNvbT4KICAgIFJldmlld2VkLWJ5OiBLZXZpbiBUaWFuIDxr
ZXZpbi50aWFuQGludGVsLmNvbT4KICAgIFJldmlld2VkLWJ5OiBQYXVsIER1cnJhbnQgPHBhdWxA
eGVuLm9yZz4KCmNvbW1pdCAwZGU5NTAwZDFjMmMzZjM3YjNjZDg2YjE4MGRjMWQyYWFmYTJhZDFi
CkF1dGhvcjogSmFuIEJldWxpY2ggPGpiZXVsaWNoQHN1c2UuY29tPgpEYXRlOiAgIFR1ZSBNYXIg
MTAgMTU6MzY6NDUgMjAyMCArMDEwMAoKICAgIElPTU1VOiBpb21tdV9xaW52YWwgaXMgeDg2LW9u
bHkKICAgIAogICAgSW4gZmFjdCBpdCdzIFZULWQgc3BlY2lmaWMsIGJ1dCB3ZSBkb24ndCBoYXZl
IGEgd2F5IHlldCB0byBidWlsZCBjb2RlCiAgICBmb3IganVzdCBvbmUgdmVuZG9yLgogICAgCiAg
ICBTaWduZWQtb2ZmLWJ5OiBKYW4gQmV1bGljaCA8amJldWxpY2hAc3VzZS5jb20+CiAgICBSZXZp
ZXdlZC1ieTogS2V2aW4gVGlhbiA8a2V2aW4udGlhbkBpbnRlbC5jb20+CiAgICBSZXZpZXdlZC1i
eTogUGF1bCBEdXJyYW50IDxwYXVsQHhlbi5vcmc+Cgpjb21taXQgY2Q1NTBjMzk2M2VhNTIxMjA1
ZTgwZGY5MzVjMTdkNGNkZWUwMjg0NApBdXRob3I6IEphbiBCZXVsaWNoIDxqYmV1bGljaEBzdXNl
LmNvbT4KRGF0ZTogICBUdWUgTWFyIDEwIDE1OjM1OjU3IDIwMjAgKzAxMDAKCiAgICBJT01NVTog
aW9tbXVfaWdmeCBpcyB4ODYtb25seQogICAgCiAgICBJbiBmYWN0IGl0J3MgVlQtZCBzcGVjaWZp
YywgYnV0IHdlIGRvbid0IGhhdmUgYSB3YXkgeWV0IHRvIGJ1aWxkIGNvZGUKICAgIGZvciBqdXN0
IG9uZSB2ZW5kb3IuCiAgICAKICAgIFNpZ25lZC1vZmYtYnk6IEphbiBCZXVsaWNoIDxqYmV1bGlj
aEBzdXNlLmNvbT4KICAgIFJldmlld2VkLWJ5OiBLZXZpbiBUaWFuIDxrZXZpbi50aWFuQGludGVs
LmNvbT4KICAgIFJldmlld2VkLWJ5OiBQYXVsIER1cnJhbnQgPHBhdWxAeGVuLm9yZz4KCmNvbW1p
dCA0Y2NiYjljMzM3ZGUzMGY0YjVmZDljYWY4N2M2NzMyMDBjYjE5ZGU5CkF1dGhvcjogSmFuIEJl
dWxpY2ggPGpiZXVsaWNoQHN1c2UuY29tPgpEYXRlOiAgIFR1ZSBNYXIgMTAgMTU6MzM6NTYgMjAy
MCArMDEwMAoKICAgIElPTU1VOiBpb21tdV9pbnRwb3N0IGlzIHg4Ni9IVk0tb25seQogICAgCiAg
ICBQcm92aWRlIGEgI2RlZmluZSBmb3IgYWxsIG90aGVyIGNhc2VzLgogICAgCiAgICBTaWduZWQt
b2ZmLWJ5OiBKYW4gQmV1bGljaCA8amJldWxpY2hAc3VzZS5jb20+CiAgICBSZXZpZXdlZC1ieTog
S2V2aW4gVGlhbiA8a2V2aW4udGlhbkBpbnRlbC5jb20+CiAgICBSZXZpZXdlZC1ieTogUGF1bCBE
dXJyYW50IDxwYXVsQHhlbi5vcmc+Cgpjb21taXQgNWY2MmZkY2I0YzdjNjMyMDVhYmZlNWE1Y2Jm
NzcwMjVjYjlmZDQzMQpBdXRob3I6IEphbiBCZXVsaWNoIDxqYmV1bGljaEBzdXNlLmNvbT4KRGF0
ZTogICBUdWUgTWFyIDEwIDE1OjMyOjE2IDIwMjAgKzAxMDAKCiAgICBJT01NVTogaW9tbXVfaW50
cmVtYXAgaXMgeDg2LW9ubHkKICAgIAogICAgUHJvdmlkZSBhICNkZWZpbmUgZm9yIG90aGVyIGNh
c2VzOyBpdCBkaWRuJ3Qgc2VlbSB3b3J0aHdoaWxlIHRvIG1lIHRvCiAgICBpbnRyb2R1Y2UgYW4g
SU9NTVVfSU5UUkVNQVAgS2NvbmZpZyBvcHRpb24gYXQgdGhpcyBwb2ludC4KICAgIAogICAgU2ln
bmVkLW9mZi1ieTogSmFuIEJldWxpY2ggPGpiZXVsaWNoQHN1c2UuY29tPgogICAgUmV2aWV3ZWQt
Ynk6IEtldmluIFRpYW4gPGtldmluLnRpYW5AaW50ZWwuY29tPgogICAgUmV2aWV3ZWQtYnk6IFBh
dWwgRHVycmFudCA8cGF1bEB4ZW4ub3JnPgoKY29tbWl0IGM5NDk1YmQ3ZGZmNTg3Y2U3NzBiMjMx
ODAzN2Q2YTFkMDUxMWJkNzIKQXV0aG9yOiBSb2dlciBQYXUgTW9ubsOpIDxyb2dlci5wYXVAY2l0
cml4LmNvbT4KRGF0ZTogICBUdWUgTWFyIDEwIDE1OjMwOjI3IDIwMjAgKzAxMDAKCiAgICB4ODYv
aGFwOiBpbXByb3ZlIGh5cGVydmlzb3IgYXNzaXN0ZWQgZ3Vlc3QgVExCIGZsdXNoCiAgICAKICAg
IFRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uIG9mIHRoZSBoeXBlcnZpc29yIGFzc2lzdGVkIGZs
dXNoIGZvciBIQVAgaXMKICAgIGV4dHJlbWVseSBpbmVmZmljaWVudC4KICAgIAogICAgRmlyc3Qg
b2YgYWxsIHRoZXJlJ3Mgbm8gbmVlZCB0byBjYWxsIHBhZ2luZ191cGRhdGVfY3IzLCBhcyB0aGUg
b25seQogICAgcmVsZXZhbnQgcGFydCBvZiB0aGF0IGZ1bmN0aW9uIHdoZW4gZG9pbmcgYSBmbHVz
aCBpcyB0aGUgQVNJRCB2Q1BVCiAgICBmbHVzaCwgc28ganVzdCBjYWxsIHRoYXQgZnVuY3Rpb24g
ZGlyZWN0bHkuCiAgICAKICAgIFNpbmNlIGh2bV9hc2lkX2ZsdXNoX3ZjcHUgaXMgcHJvdGVjdGVk
IGFnYWluc3QgY29uY3VycmVudCBjYWxsZXJzIGJ5CiAgICB1c2luZyBhdG9taWMgb3BlcmF0aW9u
cyB0aGVyZSdzIG5vIG5lZWQgYW55bW9yZSB0byBwYXVzZSB0aGUgYWZmZWN0ZWQKICAgIHZDUFVz
LgogICAgCiAgICBGaW5hbGx5IHRoZSBnbG9iYWwgVExCIGZsdXNoIHBlcmZvcm1lZCBieSBmbHVz
aF90bGJfbWFzayBpcyBhbHNvIG5vdAogICAgbmVjZXNzYXJ5LCBzaW5jZSB3ZSBvbmx5IHdhbnQg
dG8gZmx1c2ggdGhlIGd1ZXN0IFRMQiBzdGF0ZSBpdCdzIGVub3VnaAogICAgdG8gdHJpZ2dlciBh
IHZtZXhpdCBvbiB0aGUgcENQVXMgY3VycmVudGx5IGhvbGRpbmcgYW55IHZDUFUgc3RhdGUsIGFz
CiAgICBzdWNoIHZtZXhpdCB3aWxsIGFscmVhZHkgcGVyZm9ybSBhbiBBU0lEL1ZQSUQgdXBkYXRl
LCBhbmQgdGh1cyBjbGVhcgogICAgdGhlIGd1ZXN0IFRMQi4KICAgIAogICAgU2lnbmVkLW9mZi1i
eTogUm9nZXIgUGF1IE1vbm7DqSA8cm9nZXIucGF1QGNpdHJpeC5jb20+CiAgICBSZXZpZXdlZC1i
eTogV2VpIExpdSA8d2xAeGVuLm9yZz4KICAgIFJldmlld2VkLWJ5OiBKYW4gQmV1bGljaCA8amJl
dWxpY2hAc3VzZS5jb20+Cgpjb21taXQgOTIwZDVmMzE4ODNjOWM0YzRlODA5MmE2OTM1NzJmZTAx
YjZmNzI3MApBdXRob3I6IFJvZ2VyIFBhdSBNb25uw6kgPHJvZ2VyLnBhdUBjaXRyaXguY29tPgpE
YXRlOiAgIFR1ZSBNYXIgMTAgMTU6Mjk6MjQgMjAyMCArMDEwMAoKICAgIHg4Ni9wYWdpbmc6IGFk
ZCBUTEIgZmx1c2ggaG9vawogICAgCiAgICBBZGQgc2hhZG93IGFuZCBoYXAgaW1wbGVtZW50YXRp
b24gc3BlY2lmaWMgaGVscGVycyB0byBwZXJmb3JtIGd1ZXN0CiAgICBUTEIgZmx1c2hlcy4gTm90
ZSB0aGF0IHRoZSBjb2RlIGZvciBib3RoIGlzIGV4YWN0bHkgdGhlIHNhbWUgYXQgdGhlCiAgICBt
b21lbnQsIGFuZCBpcyBjb3BpZWQgZnJvbSBodm1fZmx1c2hfdmNwdV90bGIuIFRoaXMgd2lsbCBi
ZSBjaGFuZ2VkIGJ5CiAgICBmdXJ0aGVyIHBhdGNoZXMgdGhhdCB3aWxsIGFkZCBpbXBsZW1lbnRh
dGlvbiBzcGVjaWZpYyBvcHRpbWl6YXRpb25zIHRvCiAgICB0aGVtLgogICAgCiAgICBObyBmdW5j
dGlvbmFsIGNoYW5nZSBpbnRlbmRlZC4KICAgIAogICAgU2lnbmVkLW9mZi1ieTogUm9nZXIgUGF1
IE1vbm7DqSA8cm9nZXIucGF1QGNpdHJpeC5jb20+CiAgICBSZXZpZXdlZC1ieTogV2VpIExpdSA8
d2xAeGVuLm9yZz4KICAgIEFja2VkLWJ5OiBUaW0gRGVlZ2FuIDx0aW1AeGVuLm9yZz4KICAgIFJl
dmlld2VkLWJ5OiBQYXVsIER1cnJhbnQgPHBkdXJyYW50QGFtem4uY29tPiBbdmlyaWRpYW5dCiAg
ICBSZXZpZXdlZC1ieTogSmFuIEJldWxpY2ggPGpiZXVsaWNoQHN1c2UuY29tPgoKY29tbWl0IDI2
MWVmOGNjYmQyODUyNmQ2OWMzYTZjNTk0NDcwOWY4MTYyNDc0MWEKQXV0aG9yOiBKYW4gQmV1bGlj
aCA8amJldWxpY2hAc3VzZS5jb20+CkRhdGU6ICAgVHVlIE1hciAxMCAxNToyNzo1NiAyMDIwICsw
MTAwCgogICAgeDg2OiByZWZpbmUgQVBJQyBJRCByZXN0cmljdGlvbgogICAgCiAgICBOb3cgdGhh
dCB3ZSBkaXN0aW5ndWlzaCAicmVzdHJpY3RlZCIgYW5kICJmdWxsIiBpbnRlcnJ1cHQgcmVtYXBw
aW5nCiAgICBtb2RlLCB0aGUgOC1iaXQtQVBJQy1JRCByZXN0cmljdGlvbiBhbHNvIG5lZWRzIHRv
IGJlIGVuZm9yY2VkIGZvcgogICAgInJlc3RyaWN0ZWQiLgogICAgCiAgICBTaWduZWQtb2ZmLWJ5
OiBKYW4gQmV1bGljaCA8amJldWxpY2hAc3VzZS5jb20+CiAgICBSZXZpZXdlZC1ieTogUm9nZXIg
UGF1IE1vbm7DqSA8cm9nZXIucGF1QGNpdHJpeC5jb20+Cgpjb21taXQgMWJhNjZhODcwZWJhNDNk
NTJkM2U1ZTdhZjFhMDU1YmY1YjE2YjMwZApBdXRob3I6IEphbiBCZXVsaWNoIDxqYmV1bGljaEBz
dXNlLmNvbT4KRGF0ZTogICBUdWUgTWFyIDEwIDE1OjI1OjU4IDIwMjAgKzAxMDAKCiAgICBBTUQv
SU9NTVU6IHdpdGhvdXQgWFQsIHgyQVBJQyBuZWVkcyB0byBiZSBmb3JjZWQgaW50byBwaHlzaWNh
bCBtb2RlCiAgICAKICAgIFRoZSB3aWRlciBjbHVzdGVyIG1vZGUgQVBJQyBJRHMgYXJlbid0IGdl
bmVyYWxseSByZXByZXNlbnRhYmxlLiBDb252ZXJ0CiAgICB0aGUgaW9tbXVfaW50cmVtYXAgdmFy
aWFibGUgaW50byBhIHRyaXN0YXRlLCBhbGxvd2luZyB0aGUgQU1EIElPTU1VCiAgICBkcml2ZXIg
dG8gc2lnbmFsIHRoaXMgc3BlY2lhbCByZXN0cmljdGlvbiB0byB0aGUgYXBpY194MmFwaWNfcHJv
YmUoKS4KICAgIChOb3RlOiBhc3NpZ25tZW50cyB0byB0aGUgdmFyaWFibGUgZ2V0IGFkanVzdGVk
LCB3aGlsZSBleGlzdGluZwogICAgY29uc3VtZXJzIC0gYWxsIGFzc3VtaW5nIGEgYm9vbGVhbiBw
cm9wZXJ0eSAtIGFyZSBsZWZ0IGFsb25lLikKICAgIAogICAgV2hpbGUgd2UgYXJlIG5vdCBhd2Fy
ZSBvZiBhbnkgaGFyZHdhcmUvZmlybXdhcmUgd2l0aCB0aGlzIGFzIGEKICAgIHJlc3RyaWN0aW9u
LCBpdCBpcyBhIHNpdHVhdGlvbiB3aGljaCBjb3VsZCBiZSBjcmVhdGVkIG9uIGZ1bGx5IHgyYXBp
Yy0KICAgIGNhcGFibGUgc3lzdGVtcyB2aWEgZmlybXdhcmUgc2V0dGluZ3MuCiAgICAKICAgIFNp
Z25lZC1vZmYtYnk6IEphbiBCZXVsaWNoIDxqYmV1bGljaEBzdXNlLmNvbT4KICAgIFJldmlld2Vk
LWJ5OiBBbmRyZXcgQ29vcGVyIDxhbmRyZXcuY29vcGVyM0BjaXRyaXguY29tPgogICAgUmV2aWV3
ZWQtYnk6IFJvZ2VyIFBhdSBNb25uw6kgPHJvZ2VyLnBhdUBjaXRyaXguY29tPgogICAgUmV2aWV3
ZWQtYnk6IEtldmluIFRpYW4gPGtldmluLnRpYW5AaW50ZWwuY29tPgoocWVtdSBjaGFuZ2VzIG5v
dCBpbmNsdWRlZCkKCl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fClhlbi1kZXZlbCBtYWlsaW5nIGxpc3QKWGVuLWRldmVsQGxpc3RzLnhlbnByb2plY3Qub3Jn
Cmh0dHBzOi8vbGlzdHMueGVucHJvamVjdC5vcmcvbWFpbG1hbi9saXN0aW5mby94ZW4tZGV2ZWw=

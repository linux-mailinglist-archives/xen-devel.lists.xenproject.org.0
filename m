Return-Path: <xen-devel-bounces@lists.xenproject.org>
X-Original-To: lists+xen-devel@lfdr.de
Delivered-To: lists+xen-devel@lfdr.de
Received: from lists.xenproject.org (lists.xenproject.org [192.237.175.120])
	by mail.lfdr.de (Postfix) with ESMTPS id 9BF732B248
	for <lists+xen-devel@lfdr.de>; Mon, 27 May 2019 12:36:10 +0200 (CEST)
Received: from localhost ([127.0.0.1] helo=lists.xenproject.org)
	by lists.xenproject.org with esmtp (Exim 4.89)
	(envelope-from <xen-devel-bounces@lists.xenproject.org>)
	id 1hVCvS-0008PA-C4; Mon, 27 May 2019 10:32:18 +0000
Received: from us1-rack-dfw2.inumbo.com ([104.130.134.6])
 by lists.xenproject.org with esmtp (Exim 4.89)
 (envelope-from <SRS0=/w4J=T3=suse.com=jgross@srs-us1.protection.inumbo.net>)
 id 1hVCvQ-0008Op-Kq
 for xen-devel@lists.xenproject.org; Mon, 27 May 2019 10:32:16 +0000
X-Inumbo-ID: b021fa40-806a-11e9-8980-bc764e045a96
Received: from mx1.suse.de (unknown [195.135.220.15])
 by us1-rack-dfw2.inumbo.com (Halon) with ESMTPS
 id b021fa40-806a-11e9-8980-bc764e045a96;
 Mon, 27 May 2019 10:32:12 +0000 (UTC)
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
 by mx1.suse.de (Postfix) with ESMTP id 8C750AC20;
 Mon, 27 May 2019 10:32:11 +0000 (UTC)
From: Juergen Gross <jgross@suse.com>
To: linux-kernel@vger.kernel.org,
	linux-doc@vger.kernel.org
Date: Mon, 27 May 2019 12:32:05 +0200
Message-Id: <20190527103207.13287-2-jgross@suse.com>
X-Mailer: git-send-email 2.16.4
In-Reply-To: <20190527103207.13287-1-jgross@suse.com>
References: <20190527103207.13287-1-jgross@suse.com>
Subject: [Xen-devel] [PATCH 1/3] xen: remove tmem driver
X-BeenThere: xen-devel@lists.xenproject.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Xen developer discussion <xen-devel.lists.xenproject.org>
List-Unsubscribe: <https://lists.xenproject.org/mailman/options/xen-devel>,
 <mailto:xen-devel-request@lists.xenproject.org?subject=unsubscribe>
List-Post: <mailto:xen-devel@lists.xenproject.org>
List-Help: <mailto:xen-devel-request@lists.xenproject.org?subject=help>
List-Subscribe: <https://lists.xenproject.org/mailman/listinfo/xen-devel>,
 <mailto:xen-devel-request@lists.xenproject.org?subject=subscribe>
Cc: Juergen Gross <jgross@suse.com>, xen-devel@lists.xenproject.org,
 Boris Ostrovsky <boris.ostrovsky@oracle.com>,
 Stefano Stabellini <sstabellini@kernel.org>, Jonathan Corbet <corbet@lwn.net>
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: xen-devel-bounces@lists.xenproject.org
Sender: "Xen-devel" <xen-devel-bounces@lists.xenproject.org>

VGhlIFhlbiB0bWVtICh0cmFuc2NlbmRlbnQgbWVtb3J5KSBkcml2ZXIgY2FuIGJlIHJlbW92ZWQs
IGFzIHRoZQpyZWxhdGVkIFhlbiBoeXBlcnZpc29yIGZlYXR1cmUgbmV2ZXIgbWFkZSBpdCBwYXN0
IHRoZSAiZXhwZXJpbWVudGFsIgpzdGF0ZSBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGZ1dHVyZSBY
ZW4gdmVyc2lvbnMgKD49IDQuMTMpLgoKVGhlIHhlbi1zZWxmYmFsbG9vbiBkcml2ZXIgZGVwZW5k
cyBvbiB0bWVtLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZCwgdG9vLgoKU2lnbmVkLW9mZi1ieTogSnVl
cmdlbiBHcm9zcyA8amdyb3NzQHN1c2UuY29tPgotLS0KIERvY3VtZW50YXRpb24vYWRtaW4tZ3Vp
ZGUva2VybmVsLXBhcmFtZXRlcnMudHh0IHwgIDIxIC0KIGRyaXZlcnMveGVuL0tjb25maWcgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDIzIC0KIGRyaXZlcnMveGVuL01ha2VmaWxlICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAyIC0KIGRyaXZlcnMveGVuL3RtZW0uYyAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIHwgNDE5IC0tLS0tLS0tLS0tLS0tLS0tCiBkcml2ZXJz
L3hlbi94ZW4tYmFsbG9vbi5jICAgICAgICAgICAgICAgICAgICAgICB8ICAgMiAtCiBkcml2ZXJz
L3hlbi94ZW4tc2VsZmJhbGxvb24uYyAgICAgICAgICAgICAgICAgICB8IDU3OSAtLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0KIGluY2x1ZGUveGVuL2JhbGxvb24uaCAgICAgICAgICAgICAgICAgICAg
ICAgICAgIHwgICA4IC0KIGluY2x1ZGUveGVuL3RtZW0uaCAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIHwgIDE4IC0KIDggZmlsZXMgY2hhbmdlZCwgMTA3MiBkZWxldGlvbnMoLSkKIGRlbGV0
ZSBtb2RlIDEwMDY0NCBkcml2ZXJzL3hlbi90bWVtLmMKIGRlbGV0ZSBtb2RlIDEwMDY0NCBkcml2
ZXJzL3hlbi94ZW4tc2VsZmJhbGxvb24uYwogZGVsZXRlIG1vZGUgMTAwNjQ0IGluY2x1ZGUveGVu
L3RtZW0uaAoKZGlmZiAtLWdpdCBhL0RvY3VtZW50YXRpb24vYWRtaW4tZ3VpZGUva2VybmVsLXBh
cmFtZXRlcnMudHh0IGIvRG9jdW1lbnRhdGlvbi9hZG1pbi1ndWlkZS9rZXJuZWwtcGFyYW1ldGVy
cy50eHQKaW5kZXggMTM4ZjY2NjRiMmUyLi4yNjYwZjFhOTgzYTMgMTAwNjQ0Ci0tLSBhL0RvY3Vt
ZW50YXRpb24vYWRtaW4tZ3VpZGUva2VybmVsLXBhcmFtZXRlcnMudHh0CisrKyBiL0RvY3VtZW50
YXRpb24vYWRtaW4tZ3VpZGUva2VybmVsLXBhcmFtZXRlcnMudHh0CkBAIC00NjYzLDI3ICs0NjYz
LDYgQEAKIAkJCUZvcmNlIHRocmVhZGluZyBvZiBhbGwgaW50ZXJydXB0IGhhbmRsZXJzIGV4Y2Vw
dCB0aG9zZQogCQkJbWFya2VkIGV4cGxpY2l0bHkgSVJRRl9OT19USFJFQUQuCiAKLQl0bWVtCQlb
S05MLFhFTl0KLQkJCUVuYWJsZSB0aGUgVHJhbnNjZW5kZW50IG1lbW9yeSBkcml2ZXIgaWYgYnVp
bHQtaW4uCi0KLQl0bWVtLmNsZWFuY2FjaGU9MHwxIFtLTkwsIFhFTl0KLQkJCURlZmF1bHQgaXMg
b24gKDEpLiBEaXNhYmxlIHRoZSB1c2FnZSBvZiB0aGUgY2xlYW5jYWNoZQotCQkJQVBJIHRvIHNl
bmQgYW5vbnltb3VzIHBhZ2VzIHRvIHRoZSBoeXBlcnZpc29yLgotCi0JdG1lbS5mcm9udHN3YXA9
MHwxIFtLTkwsIFhFTl0KLQkJCURlZmF1bHQgaXMgb24gKDEpLiBEaXNhYmxlIHRoZSB1c2FnZSBv
ZiB0aGUgZnJvbnRzd2FwCi0JCQlBUEkgdG8gc2VuZCBzd2FwIHBhZ2VzIHRvIHRoZSBoeXBlcnZp
c29yLiBJZiBkaXNhYmxlZAotCQkJdGhlIHNlbGZiYWxsb29uaW5nIGFuZCBzZWxmc2hyaW5raW5n
IGFyZSBmb3JjZSBkaXNhYmxlZC4KLQotCXRtZW0uc2VsZmJhbGxvb25pbmc9MHwxIFtLTkwsIFhF
Tl0KLQkJCURlZmF1bHQgaXMgb24gKDEpLiBEaXNhYmxlIHRoZSBkcml2aW5nIG9mIHN3YXAgcGFn
ZXMKLQkJCXRvIHRoZSBoeXBlcnZpc29yLgotCi0JdG1lbS5zZWxmc2hyaW5raW5nPTB8MSBbS05M
LCBYRU5dCi0JCQlEZWZhdWx0IGlzIG9uICgxKS4gUGFydGlhbCBzd2Fwb2ZmIHRoYXQgaW1tZWRp
YXRlbHkKLQkJCXRyYW5zZmVycyBwYWdlcyBmcm9tIFhlbiBoeXBlcnZpc29yIGJhY2sgdG8gdGhl
Ci0JCQlrZXJuZWwgYmFzZWQgb24gZGlmZmVyZW50IGNyaXRlcmlhLgotCiAJdG9wb2xvZ3k9CVtT
MzkwXQogCQkJRm9ybWF0OiB7b2ZmIHwgb259CiAJCQlTcGVjaWZ5IGlmIHRoZSBrZXJuZWwgc2hv
dWxkIG1ha2UgdXNlIG9mIHRoZSBjcHUKZGlmZiAtLWdpdCBhL2RyaXZlcnMveGVuL0tjb25maWcg
Yi9kcml2ZXJzL3hlbi9LY29uZmlnCmluZGV4IGVjNjU1OGI3OWU5ZC4uNzljYzc1MDk2ZjQyIDEw
MDY0NAotLS0gYS9kcml2ZXJzL3hlbi9LY29uZmlnCisrKyBiL2RyaXZlcnMveGVuL0tjb25maWcK
QEAgLTEwLDIxICsxMCw2IEBAIGNvbmZpZyBYRU5fQkFMTE9PTgogCSAgdGhlIHN5c3RlbSB0byBl
eHBhbmQgdGhlIGRvbWFpbidzIG1lbW9yeSBhbGxvY2F0aW9uLCBvciBhbHRlcm5hdGl2ZWx5CiAJ
ICByZXR1cm4gdW5uZWVkZWQgbWVtb3J5IHRvIHRoZSBzeXN0ZW0uCiAKLWNvbmZpZyBYRU5fU0VM
RkJBTExPT05JTkcKLQlib29sICJEeW5hbWljYWxseSBzZWxmLWJhbGxvb24ga2VybmVsIG1lbW9y
eSB0byB0YXJnZXQiCi0JZGVwZW5kcyBvbiBYRU4gJiYgWEVOX0JBTExPT04gJiYgQ0xFQU5DQUNI
RSAmJiBTV0FQICYmIFhFTl9UTUVNCi0JaGVscAotCSAgU2VsZi1iYWxsb29uaW5nIGR5bmFtaWNh
bGx5IGJhbGxvb25zIGF2YWlsYWJsZSBrZXJuZWwgbWVtb3J5IGRyaXZlbgotCSAgYnkgdGhlIGN1
cnJlbnQgdXNhZ2Ugb2YgYW5vbnltb3VzIG1lbW9yeSAoImNvbW1pdHRlZCBBUyIpIGFuZAotCSAg
Y29udHJvbGxlZCBieSB2YXJpb3VzIHN5c2ZzLXNldHRhYmxlIHBhcmFtZXRlcnMuICBDb25maWd1
cmluZwotCSAgRlJPTlRTV0FQIGlzIGhpZ2hseSByZWNvbW1lbmRlZDsgaWYgaXQgaXMgbm90IGNv
bmZpZ3VyZWQsIHNlbGYtCi0JICBiYWxsb29uaW5nIGlzIGRpc2FibGVkIGJ5IGRlZmF1bHQuIElm
IEZST05UU1dBUCBpcyBjb25maWd1cmVkLAotCSAgZnJvbnRzd2FwLXNlbGZzaHJpbmtpbmcgaXMg
ZW5hYmxlZCBieSBkZWZhdWx0IGJ1dCBjYW4gYmUgZGlzYWJsZWQKLQkgIHdpdGggdGhlICd0bWVt
LnNlbGZzaHJpbms9MCcga2VybmVsIGJvb3QgcGFyYW1ldGVyOyBhbmQgc2VsZi1iYWxsb29uaW5n
Ci0JICBpcyBlbmFibGVkIGJ5IGRlZmF1bHQgYnV0IGNhbiBiZSBkaXNhYmxlZCB3aXRoIHRoZSAn
dG1lbS5zZWxmYmFsbG9vbmluZz0wJwotCSAga2VybmVsIGJvb3QgcGFyYW1ldGVyLiAgTm90ZSB0
aGF0IHN5c3RlbXMgd2l0aG91dCBhIHN1ZmZpY2llbnRseQotCSAgbGFyZ2Ugc3dhcCBkZXZpY2Ug
c2hvdWxkIG5vdCBlbmFibGUgc2VsZi1iYWxsb29uaW5nLgotCiBjb25maWcgWEVOX0JBTExPT05f
TUVNT1JZX0hPVFBMVUcKIAlib29sICJNZW1vcnkgaG90cGx1ZyBzdXBwb3J0IGZvciBYZW4gYmFs
bG9vbiBkcml2ZXIiCiAJZGVwZW5kcyBvbiBYRU5fQkFMTE9PTiAmJiBNRU1PUllfSE9UUExVRwpA
QCAtMTkxLDE0ICsxNzYsNiBAQCBjb25maWcgU1dJT1RMQl9YRU4KIAlkZWZfYm9vbCB5CiAJc2Vs
ZWN0IFNXSU9UTEIKIAotY29uZmlnIFhFTl9UTUVNCi0JdHJpc3RhdGUKLQlkZXBlbmRzIG9uICFB
Uk0gJiYgIUFSTTY0Ci0JZGVmYXVsdCBtIGlmIChDTEVBTkNBQ0hFIHx8IEZST05UU1dBUCkKLQlo
ZWxwCi0JICBTaGltIHRvIGludGVyZmFjZSBpbi1rZXJuZWwgVHJhbnNjZW5kZW50IE1lbW9yeSBo
b29rcwotCSAgKGUuZy4gY2xlYW5jYWNoZSBhbmQgZnJvbnRzd2FwKSB0byBYZW4gdG1lbSBoeXBl
cmNhbGxzLgotCiBjb25maWcgWEVOX1BDSURFVl9CQUNLRU5ECiAJdHJpc3RhdGUgIlhlbiBQQ0kt
ZGV2aWNlIGJhY2tlbmQgZHJpdmVyIgogCWRlcGVuZHMgb24gUENJICYmIFg4NiAmJiBYRU4KZGlm
ZiAtLWdpdCBhL2RyaXZlcnMveGVuL01ha2VmaWxlIGIvZHJpdmVycy94ZW4vTWFrZWZpbGUKaW5k
ZXggYWQzODQ0ZDlmODc2Li4wYzRlZmE2ZmU0NTAgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMveGVuL01h
a2VmaWxlCisrKyBiL2RyaXZlcnMveGVuL01ha2VmaWxlCkBAIC0xNywxNCArMTcsMTIgQEAgZG9t
MC0kKENPTkZJR19YODYpICs9IHBjcHUubwogb2JqLSQoQ09ORklHX1hFTl9ET00wKQkJCSs9ICQo
ZG9tMC15KQogb2JqLSQoQ09ORklHX0JMT0NLKQkJCSs9IGJpb21lcmdlLm8KIG9iai0kKENPTkZJ
R19YRU5fQkFMTE9PTikJCSs9IHhlbi1iYWxsb29uLm8KLW9iai0kKENPTkZJR19YRU5fU0VMRkJB
TExPT05JTkcpCSs9IHhlbi1zZWxmYmFsbG9vbi5vCiBvYmotJChDT05GSUdfWEVOX0RFVl9FVlRD
SE4pCQkrPSB4ZW4tZXZ0Y2huLm8KIG9iai0kKENPTkZJR19YRU5fR05UREVWKQkJKz0geGVuLWdu
dGRldi5vCiBvYmotJChDT05GSUdfWEVOX0dSQU5UX0RFVl9BTExPQykJKz0geGVuLWdudGFsbG9j
Lm8KIG9iai0kKENPTkZJR19YRU5GUykJCQkrPSB4ZW5mcy8KIG9iai0kKENPTkZJR19YRU5fU1lT
X0hZUEVSVklTT1IpCSs9IHN5cy1oeXBlcnZpc29yLm8KIG9iai0kKENPTkZJR19YRU5fUFZIVk0p
CQkJKz0gcGxhdGZvcm0tcGNpLm8KLW9iai0kKENPTkZJR19YRU5fVE1FTSkJCQkrPSB0bWVtLm8K
IG9iai0kKENPTkZJR19TV0lPVExCX1hFTikJCSs9IHN3aW90bGIteGVuLm8KIG9iai0kKENPTkZJ
R19YRU5fTUNFX0xPRykJCSs9IG1jZWxvZy5vCiBvYmotJChDT05GSUdfWEVOX1BDSURFVl9CQUNL
RU5EKQkrPSB4ZW4tcGNpYmFjay8KZGlmZiAtLWdpdCBhL2RyaXZlcnMveGVuL3RtZW0uYyBiL2Ry
aXZlcnMveGVuL3RtZW0uYwpkZWxldGVkIGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggNjRkNzQ3OWFk
NWFkLi4wMDAwMDAwMDAwMDAKLS0tIGEvZHJpdmVycy94ZW4vdG1lbS5jCisrKyAvZGV2L251bGwK
QEAgLTEsNDE5ICswLDAgQEAKLS8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBHUEwtMi4wLW9u
bHkKLS8qCi0gKiBYZW4gaW1wbGVtZW50YXRpb24gZm9yIHRyYW5zY2VuZGVudCBtZW1vcnkgKHRt
ZW0pCi0gKgotICogQ29weXJpZ2h0IChDKSAyMDA5LTIwMTEgT3JhY2xlIENvcnAuICBBbGwgcmln
aHRzIHJlc2VydmVkLgotICogQXV0aG9yOiBEYW4gTWFnZW5oZWltZXIKLSAqLwotCi0jZGVmaW5l
IHByX2ZtdChmbXQpICJ4ZW46IiBLQlVJTERfTU9ETkFNRSAiOiAiIGZtdAotCi0jaW5jbHVkZSA8
bGludXgvbW9kdWxlLmg+Ci0jaW5jbHVkZSA8bGludXgva2VybmVsLmg+Ci0jaW5jbHVkZSA8bGlu
dXgvdHlwZXMuaD4KLSNpbmNsdWRlIDxsaW51eC9pbml0Lmg+Ci0jaW5jbHVkZSA8bGludXgvcGFn
ZW1hcC5oPgotI2luY2x1ZGUgPGxpbnV4L2NsZWFuY2FjaGUuaD4KLSNpbmNsdWRlIDxsaW51eC9m
cm9udHN3YXAuaD4KLQotI2luY2x1ZGUgPHhlbi94ZW4uaD4KLSNpbmNsdWRlIDx4ZW4vaW50ZXJm
YWNlL3hlbi5oPgotI2luY2x1ZGUgPHhlbi9wYWdlLmg+Ci0jaW5jbHVkZSA8YXNtL3hlbi9oeXBl
cmNhbGwuaD4KLSNpbmNsdWRlIDxhc20veGVuL2h5cGVydmlzb3IuaD4KLSNpbmNsdWRlIDx4ZW4v
dG1lbS5oPgotCi0jaWZuZGVmIENPTkZJR19YRU5fVE1FTV9NT0RVTEUKLWJvb2wgX19yZWFkX21v
c3RseSB0bWVtX2VuYWJsZWQgPSBmYWxzZTsKLQotc3RhdGljIGludCBfX2luaXQgZW5hYmxlX3Rt
ZW0oY2hhciAqcykKLXsKLQl0bWVtX2VuYWJsZWQgPSB0cnVlOwotCXJldHVybiAxOwotfQotX19z
ZXR1cCgidG1lbSIsIGVuYWJsZV90bWVtKTsKLSNlbmRpZgotCi0jaWZkZWYgQ09ORklHX0NMRUFO
Q0FDSEUKLXN0YXRpYyBib29sIGNsZWFuY2FjaGUgX19yZWFkX21vc3RseSA9IHRydWU7Ci1tb2R1
bGVfcGFyYW0oY2xlYW5jYWNoZSwgYm9vbCwgU19JUlVHTyk7Ci1zdGF0aWMgYm9vbCBzZWxmYmFs
bG9vbmluZyBfX3JlYWRfbW9zdGx5ID0gdHJ1ZTsKLW1vZHVsZV9wYXJhbShzZWxmYmFsbG9vbmlu
ZywgYm9vbCwgU19JUlVHTyk7Ci0jZW5kaWYgLyogQ09ORklHX0NMRUFOQ0FDSEUgKi8KLQotI2lm
ZGVmIENPTkZJR19GUk9OVFNXQVAKLXN0YXRpYyBib29sIGZyb250c3dhcCBfX3JlYWRfbW9zdGx5
ID0gdHJ1ZTsKLW1vZHVsZV9wYXJhbShmcm9udHN3YXAsIGJvb2wsIFNfSVJVR08pOwotI2Vsc2Ug
LyogQ09ORklHX0ZST05UU1dBUCAqLwotI2RlZmluZSBmcm9udHN3YXAgKDApCi0jZW5kaWYgLyog
Q09ORklHX0ZST05UU1dBUCAqLwotCi0jaWZkZWYgQ09ORklHX1hFTl9TRUxGQkFMTE9PTklORwot
c3RhdGljIGJvb2wgc2VsZnNocmlua2luZyBfX3JlYWRfbW9zdGx5ID0gdHJ1ZTsKLW1vZHVsZV9w
YXJhbShzZWxmc2hyaW5raW5nLCBib29sLCBTX0lSVUdPKTsKLSNlbmRpZiAvKiBDT05GSUdfWEVO
X1NFTEZCQUxMT09OSU5HICovCi0KLSNkZWZpbmUgVE1FTV9DT05UUk9MICAgICAgICAgICAgICAg
MAotI2RlZmluZSBUTUVNX05FV19QT09MICAgICAgICAgICAgICAxCi0jZGVmaW5lIFRNRU1fREVT
VFJPWV9QT09MICAgICAgICAgIDIKLSNkZWZpbmUgVE1FTV9ORVdfUEFHRSAgICAgICAgICAgICAg
MwotI2RlZmluZSBUTUVNX1BVVF9QQUdFICAgICAgICAgICAgICA0Ci0jZGVmaW5lIFRNRU1fR0VU
X1BBR0UgICAgICAgICAgICAgIDUKLSNkZWZpbmUgVE1FTV9GTFVTSF9QQUdFICAgICAgICAgICAg
NgotI2RlZmluZSBUTUVNX0ZMVVNIX09CSkVDVCAgICAgICAgICA3Ci0jZGVmaW5lIFRNRU1fUkVB
RCAgICAgICAgICAgICAgICAgIDgKLSNkZWZpbmUgVE1FTV9XUklURSAgICAgICAgICAgICAgICAg
OQotI2RlZmluZSBUTUVNX1hDSEcgICAgICAgICAgICAgICAgIDEwCi0KLS8qIEJpdHMgZm9yIEhZ
UEVSVklTT1JfdG1lbV9vcChUTUVNX05FV19QT09MKSAqLwotI2RlZmluZSBUTUVNX1BPT0xfUEVS
U0lTVCAgICAgICAgICAxCi0jZGVmaW5lIFRNRU1fUE9PTF9TSEFSRUQgICAgICAgICAgIDIKLSNk
ZWZpbmUgVE1FTV9QT09MX1BBR0VTSVpFX1NISUZUICAgNAotI2RlZmluZSBUTUVNX1ZFUlNJT05f
U0hJRlQgICAgICAgIDI0Ci0KLQotc3RydWN0IHRtZW1fcG9vbF91dWlkIHsKLQl1NjQgdXVpZF9s
bzsKLQl1NjQgdXVpZF9oaTsKLX07Ci0KLXN0cnVjdCB0bWVtX29pZCB7Ci0JdTY0IG9pZFszXTsK
LX07Ci0KLSNkZWZpbmUgVE1FTV9QT09MX1BSSVZBVEVfVVVJRAl7IDAsIDAgfQotCi0vKiBmbGFn
cyBmb3IgdG1lbV9vcHMubmV3X3Bvb2wgKi8KLSNkZWZpbmUgVE1FTV9QT09MX1BFUlNJU1QgICAg
ICAgICAgMQotI2RlZmluZSBUTUVNX1BPT0xfU0hBUkVEICAgICAgICAgICAyCi0KLS8qIHhlbiB0
bWVtIGZvdW5kYXRpb24gb3BzL2h5cGVyY2FsbHMgKi8KLQotc3RhdGljIGlubGluZSBpbnQgeGVu
X3RtZW1fb3AodTMyIHRtZW1fY21kLCB1MzIgdG1lbV9wb29sLCBzdHJ1Y3QgdG1lbV9vaWQgb2lk
LAotCXUzMiBpbmRleCwgdW5zaWduZWQgbG9uZyBnbWZuLCB1MzIgdG1lbV9vZmZzZXQsIHUzMiBw
Zm5fb2Zmc2V0LCB1MzIgbGVuKQotewotCXN0cnVjdCB0bWVtX29wIG9wOwotCWludCByYyA9IDA7
Ci0KLQlvcC5jbWQgPSB0bWVtX2NtZDsKLQlvcC5wb29sX2lkID0gdG1lbV9wb29sOwotCW9wLnUu
Z2VuLm9pZFswXSA9IG9pZC5vaWRbMF07Ci0Jb3AudS5nZW4ub2lkWzFdID0gb2lkLm9pZFsxXTsK
LQlvcC51Lmdlbi5vaWRbMl0gPSBvaWQub2lkWzJdOwotCW9wLnUuZ2VuLmluZGV4ID0gaW5kZXg7
Ci0Jb3AudS5nZW4udG1lbV9vZmZzZXQgPSB0bWVtX29mZnNldDsKLQlvcC51Lmdlbi5wZm5fb2Zm
c2V0ID0gcGZuX29mZnNldDsKLQlvcC51Lmdlbi5sZW4gPSBsZW47Ci0Jc2V0X3hlbl9ndWVzdF9o
YW5kbGUob3AudS5nZW4uZ21mbiwgKHZvaWQgKilnbWZuKTsKLQlyYyA9IEhZUEVSVklTT1JfdG1l
bV9vcCgmb3ApOwotCXJldHVybiByYzsKLX0KLQotc3RhdGljIGludCB4ZW5fdG1lbV9uZXdfcG9v
bChzdHJ1Y3QgdG1lbV9wb29sX3V1aWQgdXVpZCwKLQkJCQl1MzIgZmxhZ3MsIHVuc2lnbmVkIGxv
bmcgcGFnZXNpemUpCi17Ci0Jc3RydWN0IHRtZW1fb3Agb3A7Ci0JaW50IHJjID0gMCwgcGFnZXNo
aWZ0OwotCi0JZm9yIChwYWdlc2hpZnQgPSAwOyBwYWdlc2l6ZSAhPSAxOyBwYWdlc2hpZnQrKykK
LQkJcGFnZXNpemUgPj49IDE7Ci0JZmxhZ3MgfD0gKHBhZ2VzaGlmdCAtIDEyKSA8PCBUTUVNX1BP
T0xfUEFHRVNJWkVfU0hJRlQ7Ci0JZmxhZ3MgfD0gVE1FTV9TUEVDX1ZFUlNJT04gPDwgVE1FTV9W
RVJTSU9OX1NISUZUOwotCW9wLmNtZCA9IFRNRU1fTkVXX1BPT0w7Ci0Jb3AudS5uZXcudXVpZFsw
XSA9IHV1aWQudXVpZF9sbzsKLQlvcC51Lm5ldy51dWlkWzFdID0gdXVpZC51dWlkX2hpOwotCW9w
LnUubmV3LmZsYWdzID0gZmxhZ3M7Ci0JcmMgPSBIWVBFUlZJU09SX3RtZW1fb3AoJm9wKTsKLQly
ZXR1cm4gcmM7Ci19Ci0KLS8qIHhlbiBnZW5lcmljIHRtZW0gb3BzICovCi0KLXN0YXRpYyBpbnQg
eGVuX3RtZW1fcHV0X3BhZ2UodTMyIHBvb2xfaWQsIHN0cnVjdCB0bWVtX29pZCBvaWQsCi0JCQkg
ICAgIHUzMiBpbmRleCwgc3RydWN0IHBhZ2UgKnBhZ2UpCi17Ci0JcmV0dXJuIHhlbl90bWVtX29w
KFRNRU1fUFVUX1BBR0UsIHBvb2xfaWQsIG9pZCwgaW5kZXgsCi0JCQkgICB4ZW5fcGFnZV90b19n
Zm4ocGFnZSksIDAsIDAsIDApOwotfQotCi1zdGF0aWMgaW50IHhlbl90bWVtX2dldF9wYWdlKHUz
MiBwb29sX2lkLCBzdHJ1Y3QgdG1lbV9vaWQgb2lkLAotCQkJICAgICB1MzIgaW5kZXgsIHN0cnVj
dCBwYWdlICpwYWdlKQotewotCXJldHVybiB4ZW5fdG1lbV9vcChUTUVNX0dFVF9QQUdFLCBwb29s
X2lkLCBvaWQsIGluZGV4LAotCQkJICAgeGVuX3BhZ2VfdG9fZ2ZuKHBhZ2UpLCAwLCAwLCAwKTsK
LX0KLQotc3RhdGljIGludCB4ZW5fdG1lbV9mbHVzaF9wYWdlKHUzMiBwb29sX2lkLCBzdHJ1Y3Qg
dG1lbV9vaWQgb2lkLCB1MzIgaW5kZXgpCi17Ci0JcmV0dXJuIHhlbl90bWVtX29wKFRNRU1fRkxV
U0hfUEFHRSwgcG9vbF9pZCwgb2lkLCBpbmRleCwKLQkJMCwgMCwgMCwgMCk7Ci19Ci0KLXN0YXRp
YyBpbnQgeGVuX3RtZW1fZmx1c2hfb2JqZWN0KHUzMiBwb29sX2lkLCBzdHJ1Y3QgdG1lbV9vaWQg
b2lkKQotewotCXJldHVybiB4ZW5fdG1lbV9vcChUTUVNX0ZMVVNIX09CSkVDVCwgcG9vbF9pZCwg
b2lkLCAwLCAwLCAwLCAwLCAwKTsKLX0KLQotCi0jaWZkZWYgQ09ORklHX0NMRUFOQ0FDSEUKLXN0
YXRpYyBpbnQgeGVuX3RtZW1fZGVzdHJveV9wb29sKHUzMiBwb29sX2lkKQotewotCXN0cnVjdCB0
bWVtX29pZCBvaWQgPSB7IHsgMCB9IH07Ci0KLQlyZXR1cm4geGVuX3RtZW1fb3AoVE1FTV9ERVNU
Uk9ZX1BPT0wsIHBvb2xfaWQsIG9pZCwgMCwgMCwgMCwgMCwgMCk7Ci19Ci0KLS8qIGNsZWFuY2Fj
aGUgb3BzICovCi0KLXN0YXRpYyB2b2lkIHRtZW1fY2xlYW5jYWNoZV9wdXRfcGFnZShpbnQgcG9v
bCwgc3RydWN0IGNsZWFuY2FjaGVfZmlsZWtleSBrZXksCi0JCQkJICAgICBwZ29mZl90IGluZGV4
LCBzdHJ1Y3QgcGFnZSAqcGFnZSkKLXsKLQl1MzIgaW5kID0gKHUzMikgaW5kZXg7Ci0Jc3RydWN0
IHRtZW1fb2lkIG9pZCA9ICooc3RydWN0IHRtZW1fb2lkICopJmtleTsKLQotCWlmIChwb29sIDwg
MCkKLQkJcmV0dXJuOwotCWlmIChpbmQgIT0gaW5kZXgpCi0JCXJldHVybjsKLQltYigpOyAvKiBl
bnN1cmUgcGFnZSBpcyBxdWllc2NlbnQ7IHRtZW0gbWF5IGFkZHJlc3MgaXQgd2l0aCBhbiBhbGlh
cyAqLwotCSh2b2lkKXhlbl90bWVtX3B1dF9wYWdlKCh1MzIpcG9vbCwgb2lkLCBpbmQsIHBhZ2Up
OwotfQotCi1zdGF0aWMgaW50IHRtZW1fY2xlYW5jYWNoZV9nZXRfcGFnZShpbnQgcG9vbCwgc3Ry
dWN0IGNsZWFuY2FjaGVfZmlsZWtleSBrZXksCi0JCQkJICAgIHBnb2ZmX3QgaW5kZXgsIHN0cnVj
dCBwYWdlICpwYWdlKQotewotCXUzMiBpbmQgPSAodTMyKSBpbmRleDsKLQlzdHJ1Y3QgdG1lbV9v
aWQgb2lkID0gKihzdHJ1Y3QgdG1lbV9vaWQgKikma2V5OwotCWludCByZXQ7Ci0KLQkvKiB0cmFu
c2xhdGUgcmV0dXJuIHZhbHVlcyB0byBsaW51eCBzZW1hbnRpY3MgKi8KLQlpZiAocG9vbCA8IDAp
Ci0JCXJldHVybiAtMTsKLQlpZiAoaW5kICE9IGluZGV4KQotCQlyZXR1cm4gLTE7Ci0JcmV0ID0g
eGVuX3RtZW1fZ2V0X3BhZ2UoKHUzMilwb29sLCBvaWQsIGluZCwgcGFnZSk7Ci0JaWYgKHJldCA9
PSAxKQotCQlyZXR1cm4gMDsKLQllbHNlCi0JCXJldHVybiAtMTsKLX0KLQotc3RhdGljIHZvaWQg
dG1lbV9jbGVhbmNhY2hlX2ZsdXNoX3BhZ2UoaW50IHBvb2wsIHN0cnVjdCBjbGVhbmNhY2hlX2Zp
bGVrZXkga2V5LAotCQkJCSAgICAgICBwZ29mZl90IGluZGV4KQotewotCXUzMiBpbmQgPSAodTMy
KSBpbmRleDsKLQlzdHJ1Y3QgdG1lbV9vaWQgb2lkID0gKihzdHJ1Y3QgdG1lbV9vaWQgKikma2V5
OwotCi0JaWYgKHBvb2wgPCAwKQotCQlyZXR1cm47Ci0JaWYgKGluZCAhPSBpbmRleCkKLQkJcmV0
dXJuOwotCSh2b2lkKXhlbl90bWVtX2ZsdXNoX3BhZ2UoKHUzMilwb29sLCBvaWQsIGluZCk7Ci19
Ci0KLXN0YXRpYyB2b2lkIHRtZW1fY2xlYW5jYWNoZV9mbHVzaF9pbm9kZShpbnQgcG9vbCwgc3Ry
dWN0IGNsZWFuY2FjaGVfZmlsZWtleSBrZXkpCi17Ci0Jc3RydWN0IHRtZW1fb2lkIG9pZCA9ICoo
c3RydWN0IHRtZW1fb2lkICopJmtleTsKLQotCWlmIChwb29sIDwgMCkKLQkJcmV0dXJuOwotCSh2
b2lkKXhlbl90bWVtX2ZsdXNoX29iamVjdCgodTMyKXBvb2wsIG9pZCk7Ci19Ci0KLXN0YXRpYyB2
b2lkIHRtZW1fY2xlYW5jYWNoZV9mbHVzaF9mcyhpbnQgcG9vbCkKLXsKLQlpZiAocG9vbCA8IDAp
Ci0JCXJldHVybjsKLQkodm9pZCl4ZW5fdG1lbV9kZXN0cm95X3Bvb2woKHUzMilwb29sKTsKLX0K
LQotc3RhdGljIGludCB0bWVtX2NsZWFuY2FjaGVfaW5pdF9mcyhzaXplX3QgcGFnZXNpemUpCi17
Ci0Jc3RydWN0IHRtZW1fcG9vbF91dWlkIHV1aWRfcHJpdmF0ZSA9IFRNRU1fUE9PTF9QUklWQVRF
X1VVSUQ7Ci0KLQlyZXR1cm4geGVuX3RtZW1fbmV3X3Bvb2wodXVpZF9wcml2YXRlLCAwLCBwYWdl
c2l6ZSk7Ci19Ci0KLXN0YXRpYyBpbnQgdG1lbV9jbGVhbmNhY2hlX2luaXRfc2hhcmVkX2ZzKHV1
aWRfdCAqdXVpZCwgc2l6ZV90IHBhZ2VzaXplKQotewotCXN0cnVjdCB0bWVtX3Bvb2xfdXVpZCBz
aGFyZWRfdXVpZDsKLQotCXNoYXJlZF91dWlkLnV1aWRfbG8gPSAqKHU2NCAqKSZ1dWlkLT5iWzBd
OwotCXNoYXJlZF91dWlkLnV1aWRfaGkgPSAqKHU2NCAqKSZ1dWlkLT5iWzhdOwotCXJldHVybiB4
ZW5fdG1lbV9uZXdfcG9vbChzaGFyZWRfdXVpZCwgVE1FTV9QT09MX1NIQVJFRCwgcGFnZXNpemUp
OwotfQotCi1zdGF0aWMgY29uc3Qgc3RydWN0IGNsZWFuY2FjaGVfb3BzIHRtZW1fY2xlYW5jYWNo
ZV9vcHMgPSB7Ci0JLnB1dF9wYWdlID0gdG1lbV9jbGVhbmNhY2hlX3B1dF9wYWdlLAotCS5nZXRf
cGFnZSA9IHRtZW1fY2xlYW5jYWNoZV9nZXRfcGFnZSwKLQkuaW52YWxpZGF0ZV9wYWdlID0gdG1l
bV9jbGVhbmNhY2hlX2ZsdXNoX3BhZ2UsCi0JLmludmFsaWRhdGVfaW5vZGUgPSB0bWVtX2NsZWFu
Y2FjaGVfZmx1c2hfaW5vZGUsCi0JLmludmFsaWRhdGVfZnMgPSB0bWVtX2NsZWFuY2FjaGVfZmx1
c2hfZnMsCi0JLmluaXRfc2hhcmVkX2ZzID0gdG1lbV9jbGVhbmNhY2hlX2luaXRfc2hhcmVkX2Zz
LAotCS5pbml0X2ZzID0gdG1lbV9jbGVhbmNhY2hlX2luaXRfZnMKLX07Ci0jZW5kaWYKLQotI2lm
ZGVmIENPTkZJR19GUk9OVFNXQVAKLS8qIGZyb250c3dhcCB0bWVtIG9wZXJhdGlvbnMgKi8KLQot
LyogYSBzaW5nbGUgdG1lbSBwb29saWQgaXMgdXNlZCBmb3IgYWxsIGZyb250c3dhcCAidHlwZXMi
IChzd2FwZmlsZXMpICovCi1zdGF0aWMgaW50IHRtZW1fZnJvbnRzd2FwX3Bvb2xpZDsKLQotLyoK
LSAqIFN3aXp6bGluZyBpbmNyZWFzZXMgb2JqZWN0cyBwZXIgc3dhcHR5cGUsIGluY3JlYXNpbmcg
dG1lbSBjb25jdXJyZW5jeQotICogZm9yIGhlYXZ5IHN3YXBsb2Fkcy4gIExhdGVyLCBsYXJnZXIg
bnJfY3B1cyAtPiBsYXJnZXIgU1dJWl9CSVRTCi0gKi8KLSNkZWZpbmUgU1dJWl9CSVRTCQk0Ci0j
ZGVmaW5lIFNXSVpfTUFTSwkJKCgxIDw8IFNXSVpfQklUUykgLSAxKQotI2RlZmluZSBfb3N3aXoo
X3R5cGUsIF9pbmQpCSgoX3R5cGUgPDwgU1dJWl9CSVRTKSB8IChfaW5kICYgU1dJWl9NQVNLKSkK
LSNkZWZpbmUgaXN3aXooX2luZCkJCShfaW5kID4+IFNXSVpfQklUUykKLQotc3RhdGljIGlubGlu
ZSBzdHJ1Y3QgdG1lbV9vaWQgb3N3aXoodW5zaWduZWQgdHlwZSwgdTMyIGluZCkKLXsKLQlzdHJ1
Y3QgdG1lbV9vaWQgb2lkID0geyAub2lkID0geyAwIH0gfTsKLQlvaWQub2lkWzBdID0gX29zd2l6
KHR5cGUsIGluZCk7Ci0JcmV0dXJuIG9pZDsKLX0KLQotLyogcmV0dXJucyAwIGlmIHRoZSBwYWdl
IHdhcyBzdWNjZXNzZnVsbHkgcHV0IGludG8gZnJvbnRzd2FwLCAtMSBpZiBub3QgKi8KLXN0YXRp
YyBpbnQgdG1lbV9mcm9udHN3YXBfc3RvcmUodW5zaWduZWQgdHlwZSwgcGdvZmZfdCBvZmZzZXQs
Ci0JCQkJICAgc3RydWN0IHBhZ2UgKnBhZ2UpCi17Ci0JdTY0IGluZDY0ID0gKHU2NClvZmZzZXQ7
Ci0JdTMyIGluZCA9ICh1MzIpb2Zmc2V0OwotCWludCBwb29sID0gdG1lbV9mcm9udHN3YXBfcG9v
bGlkOwotCWludCByZXQ7Ci0KLQkvKiBUSFAgaXNuJ3Qgc3VwcG9ydGVkICovCi0JaWYgKFBhZ2VU
cmFuc0h1Z2UocGFnZSkpCi0JCXJldHVybiAtMTsKLQotCWlmIChwb29sIDwgMCkKLQkJcmV0dXJu
IC0xOwotCWlmIChpbmQ2NCAhPSBpbmQpCi0JCXJldHVybiAtMTsKLQltYigpOyAvKiBlbnN1cmUg
cGFnZSBpcyBxdWllc2NlbnQ7IHRtZW0gbWF5IGFkZHJlc3MgaXQgd2l0aCBhbiBhbGlhcyAqLwot
CXJldCA9IHhlbl90bWVtX3B1dF9wYWdlKHBvb2wsIG9zd2l6KHR5cGUsIGluZCksIGlzd2l6KGlu
ZCksIHBhZ2UpOwotCS8qIHRyYW5zbGF0ZSBYZW4gdG1lbSByZXR1cm4gdmFsdWVzIHRvIGxpbnV4
IHNlbWFudGljcyAqLwotCWlmIChyZXQgPT0gMSkKLQkJcmV0dXJuIDA7Ci0JZWxzZQotCQlyZXR1
cm4gLTE7Ci19Ci0KLS8qCi0gKiByZXR1cm5zIDAgaWYgdGhlIHBhZ2Ugd2FzIHN1Y2Nlc3NmdWxs
eSBnb3R0ZW4gZnJvbSBmcm9udHN3YXAsIC0xIGlmCi0gKiB3YXMgbm90IHByZXNlbnQgKHNob3Vs
ZCBuZXZlciBoYXBwZW4hKQotICovCi1zdGF0aWMgaW50IHRtZW1fZnJvbnRzd2FwX2xvYWQodW5z
aWduZWQgdHlwZSwgcGdvZmZfdCBvZmZzZXQsCi0JCQkJICAgc3RydWN0IHBhZ2UgKnBhZ2UpCi17
Ci0JdTY0IGluZDY0ID0gKHU2NClvZmZzZXQ7Ci0JdTMyIGluZCA9ICh1MzIpb2Zmc2V0OwotCWlu
dCBwb29sID0gdG1lbV9mcm9udHN3YXBfcG9vbGlkOwotCWludCByZXQ7Ci0KLQlpZiAocG9vbCA8
IDApCi0JCXJldHVybiAtMTsKLQlpZiAoaW5kNjQgIT0gaW5kKQotCQlyZXR1cm4gLTE7Ci0JcmV0
ID0geGVuX3RtZW1fZ2V0X3BhZ2UocG9vbCwgb3N3aXoodHlwZSwgaW5kKSwgaXN3aXooaW5kKSwg
cGFnZSk7Ci0JLyogdHJhbnNsYXRlIFhlbiB0bWVtIHJldHVybiB2YWx1ZXMgdG8gbGludXggc2Vt
YW50aWNzICovCi0JaWYgKHJldCA9PSAxKQotCQlyZXR1cm4gMDsKLQllbHNlCi0JCXJldHVybiAt
MTsKLX0KLQotLyogZmx1c2ggYSBzaW5nbGUgcGFnZSBmcm9tIGZyb250c3dhcCAqLwotc3RhdGlj
IHZvaWQgdG1lbV9mcm9udHN3YXBfZmx1c2hfcGFnZSh1bnNpZ25lZCB0eXBlLCBwZ29mZl90IG9m
ZnNldCkKLXsKLQl1NjQgaW5kNjQgPSAodTY0KW9mZnNldDsKLQl1MzIgaW5kID0gKHUzMilvZmZz
ZXQ7Ci0JaW50IHBvb2wgPSB0bWVtX2Zyb250c3dhcF9wb29saWQ7Ci0KLQlpZiAocG9vbCA8IDAp
Ci0JCXJldHVybjsKLQlpZiAoaW5kNjQgIT0gaW5kKQotCQlyZXR1cm47Ci0JKHZvaWQpIHhlbl90
bWVtX2ZsdXNoX3BhZ2UocG9vbCwgb3N3aXoodHlwZSwgaW5kKSwgaXN3aXooaW5kKSk7Ci19Ci0K
LS8qIGZsdXNoIGFsbCBwYWdlcyBmcm9tIHRoZSBwYXNzZWQgc3dhcHR5cGUgKi8KLXN0YXRpYyB2
b2lkIHRtZW1fZnJvbnRzd2FwX2ZsdXNoX2FyZWEodW5zaWduZWQgdHlwZSkKLXsKLQlpbnQgcG9v
bCA9IHRtZW1fZnJvbnRzd2FwX3Bvb2xpZDsKLQlpbnQgaW5kOwotCi0JaWYgKHBvb2wgPCAwKQot
CQlyZXR1cm47Ci0JZm9yIChpbmQgPSBTV0laX01BU0s7IGluZCA+PSAwOyBpbmQtLSkKLQkJKHZv
aWQpeGVuX3RtZW1fZmx1c2hfb2JqZWN0KHBvb2wsIG9zd2l6KHR5cGUsIGluZCkpOwotfQotCi1z
dGF0aWMgdm9pZCB0bWVtX2Zyb250c3dhcF9pbml0KHVuc2lnbmVkIGlnbm9yZWQpCi17Ci0Jc3Ry
dWN0IHRtZW1fcG9vbF91dWlkIHByaXZhdGUgPSBUTUVNX1BPT0xfUFJJVkFURV9VVUlEOwotCi0J
LyogYSBzaW5nbGUgdG1lbSBwb29saWQgaXMgdXNlZCBmb3IgYWxsIGZyb250c3dhcCAidHlwZXMi
IChzd2FwZmlsZXMpICovCi0JaWYgKHRtZW1fZnJvbnRzd2FwX3Bvb2xpZCA8IDApCi0JCXRtZW1f
ZnJvbnRzd2FwX3Bvb2xpZCA9Ci0JCSAgICB4ZW5fdG1lbV9uZXdfcG9vbChwcml2YXRlLCBUTUVN
X1BPT0xfUEVSU0lTVCwgUEFHRV9TSVpFKTsKLX0KLQotc3RhdGljIHN0cnVjdCBmcm9udHN3YXBf
b3BzIHRtZW1fZnJvbnRzd2FwX29wcyA9IHsKLQkuc3RvcmUgPSB0bWVtX2Zyb250c3dhcF9zdG9y
ZSwKLQkubG9hZCA9IHRtZW1fZnJvbnRzd2FwX2xvYWQsCi0JLmludmFsaWRhdGVfcGFnZSA9IHRt
ZW1fZnJvbnRzd2FwX2ZsdXNoX3BhZ2UsCi0JLmludmFsaWRhdGVfYXJlYSA9IHRtZW1fZnJvbnRz
d2FwX2ZsdXNoX2FyZWEsCi0JLmluaXQgPSB0bWVtX2Zyb250c3dhcF9pbml0Ci19OwotI2VuZGlm
Ci0KLXN0YXRpYyBpbnQgX19pbml0IHhlbl90bWVtX2luaXQodm9pZCkKLXsKLQlpZiAoIXhlbl9k
b21haW4oKSkKLQkJcmV0dXJuIDA7Ci0jaWZkZWYgQ09ORklHX0ZST05UU1dBUAotCWlmICh0bWVt
X2VuYWJsZWQgJiYgZnJvbnRzd2FwKSB7Ci0JCWNoYXIgKnMgPSAiIjsKLQotCQl0bWVtX2Zyb250
c3dhcF9wb29saWQgPSAtMTsKLQkJZnJvbnRzd2FwX3JlZ2lzdGVyX29wcygmdG1lbV9mcm9udHN3
YXBfb3BzKTsKLQkJcHJfaW5mbygiZnJvbnRzd2FwIGVuYWJsZWQsIFJBTSBwcm92aWRlZCBieSBY
ZW4gVHJhbnNjZW5kZW50IE1lbW9yeSVzXG4iLAotCQkJcyk7Ci0JfQotI2VuZGlmCi0jaWZkZWYg
Q09ORklHX0NMRUFOQ0FDSEUKLQlCVUlMRF9CVUdfT04oc2l6ZW9mKHN0cnVjdCBjbGVhbmNhY2hl
X2ZpbGVrZXkpICE9IHNpemVvZihzdHJ1Y3QgdG1lbV9vaWQpKTsKLQlpZiAodG1lbV9lbmFibGVk
ICYmIGNsZWFuY2FjaGUpIHsKLQkJaW50IGVycjsKLQotCQllcnIgPSBjbGVhbmNhY2hlX3JlZ2lz
dGVyX29wcygmdG1lbV9jbGVhbmNhY2hlX29wcyk7Ci0JCWlmIChlcnIpCi0JCQlwcl93YXJuKCJ4
ZW4tdG1lbTogZmFpbGVkIHRvIGVuYWJsZSBjbGVhbmNhY2hlOiAlZFxuIiwKLQkJCQllcnIpOwot
CQllbHNlCi0JCQlwcl9pbmZvKCJjbGVhbmNhY2hlIGVuYWJsZWQsIFJBTSBwcm92aWRlZCBieSAi
Ci0JCQkJIlhlbiBUcmFuc2NlbmRlbnQgTWVtb3J5XG4iKTsKLQl9Ci0jZW5kaWYKLSNpZmRlZiBD
T05GSUdfWEVOX1NFTEZCQUxMT09OSU5HCi0JLyoKLQkgKiBUaGVyZSBpcyBubyBwb2ludCBvZiBk
cml2aW5nIHBhZ2VzIHRvIHRoZSBzd2FwIHN5c3RlbSBpZiB0aGV5Ci0JICogYXJlbid0IGdvaW5n
IGFueXdoZXJlIGluIHRtZW0gdW5pdmVyc2UuCi0JICovCi0JaWYgKCFmcm9udHN3YXApIHsKLQkJ
c2VsZnNocmlua2luZyA9IGZhbHNlOwotCQlzZWxmYmFsbG9vbmluZyA9IGZhbHNlOwotCX0KLQl4
ZW5fc2VsZmJhbGxvb25faW5pdChzZWxmYmFsbG9vbmluZywgc2VsZnNocmlua2luZyk7Ci0jZW5k
aWYKLQlyZXR1cm4gMDsKLX0KLQotbW9kdWxlX2luaXQoeGVuX3RtZW1faW5pdCkKLU1PRFVMRV9M
SUNFTlNFKCJHUEwiKTsKLU1PRFVMRV9BVVRIT1IoIkRhbiBNYWdlbmhlaW1lciA8ZGFuLm1hZ2Vu
aGVpbWVyQG9yYWNsZS5jb20+Iik7Ci1NT0RVTEVfREVTQ1JJUFRJT04oIlNoaW0gdG8gWGVuIHRy
YW5zY2VuZGVudCBtZW1vcnkiKTsKZGlmZiAtLWdpdCBhL2RyaXZlcnMveGVuL3hlbi1iYWxsb29u
LmMgYi9kcml2ZXJzL3hlbi94ZW4tYmFsbG9vbi5jCmluZGV4IGE2NzIzNmIwMjQ1Mi4uNmQxMmZj
MzY4MjEwIDEwMDY0NAotLS0gYS9kcml2ZXJzL3hlbi94ZW4tYmFsbG9vbi5jCisrKyBiL2RyaXZl
cnMveGVuL3hlbi1iYWxsb29uLmMKQEAgLTEyOSw4ICsxMjksNiBAQCB2b2lkIHhlbl9iYWxsb29u
X2luaXQodm9pZCkKIHsKIAlyZWdpc3Rlcl9iYWxsb29uKCZiYWxsb29uX2Rldik7CiAKLQlyZWdp
c3Rlcl94ZW5fc2VsZmJhbGxvb25pbmcoJmJhbGxvb25fZGV2KTsKLQogCXJlZ2lzdGVyX3hlbnN0
b3JlX25vdGlmaWVyKCZ4ZW5zdG9yZV9ub3RpZmllcik7CiB9CiBFWFBPUlRfU1lNQk9MX0dQTCh4
ZW5fYmFsbG9vbl9pbml0KTsKZGlmZiAtLWdpdCBhL2RyaXZlcnMveGVuL3hlbi1zZWxmYmFsbG9v
bi5jIGIvZHJpdmVycy94ZW4veGVuLXNlbGZiYWxsb29uLmMKZGVsZXRlZCBmaWxlIG1vZGUgMTAw
NjQ0CmluZGV4IDI0NmY2MTIyYzllZS4uMDAwMDAwMDAwMDAwCi0tLSBhL2RyaXZlcnMveGVuL3hl
bi1zZWxmYmFsbG9vbi5jCisrKyAvZGV2L251bGwKQEAgLTEsNTc5ICswLDAgQEAKLS8vIFNQRFgt
TGljZW5zZS1JZGVudGlmaWVyOiBHUEwtMi4wCi0vKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBY
ZW4gc2VsZmJhbGxvb24gZHJpdmVyIChhbmQgb3B0aW9uYWwgZnJvbnRzd2FwIHNlbGYtc2hyaW5r
aW5nIGRyaXZlcikKLSAqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDktMjAxMSwgRGFuIE1hZ2VuaGVp
bWVyLCBPcmFjbGUgQ29ycC4KLSAqCi0gKiBUaGlzIGNvZGUgY29tcGxlbWVudHMgdGhlIGNsZWFu
Y2FjaGUgYW5kIGZyb250c3dhcCBwYXRjaHNldHMgdG8gb3B0aW1pemUKLSAqIHN1cHBvcnQgZm9y
IFhlbiBUcmFuc2NlbmRlbnQgTWVtb3J5ICgidG1lbSIpLiAgVGhlIHBvbGljeSBpdCBpbXBsZW1l
bnRzCi0gKiBpcyBydWRpbWVudGFyeSBhbmQgd2lsbCBsaWtlbHkgaW1wcm92ZSBvdmVyIHRpbWUs
IGJ1dCBpdCBkb2VzIHdvcmsgd2VsbAotICogZW5vdWdoIHRvZGF5LgotICoKLSAqIFR3byBmdW5j
dGlvbmFsaXRpZXMgYXJlIGltcGxlbWVudGVkIGhlcmUgd2hpY2ggYm90aCB1c2UgImNvbnRyb2wg
dGhlb3J5IgotICogKGZlZWRiYWNrKSB0byBvcHRpbWl6ZSBtZW1vcnkgdXRpbGl6YXRpb24uIElu
IGEgdmlydHVhbGl6ZWQgZW52aXJvbm1lbnQKLSAqIHN1Y2ggYXMgWGVuLCBSQU0gaXMgb2Z0ZW4g
YSBzY2FyY2UgcmVzb3VyY2UgYW5kIHdlIHdvdWxkIGxpa2UgdG8gZW5zdXJlCi0gKiB0aGF0IGVh
Y2ggb2YgYSBwb3NzaWJseSBsYXJnZSBudW1iZXIgb2YgdmlydHVhbCBtYWNoaW5lcyBpcyB1c2lu
ZyBSQU0KLSAqIGVmZmljaWVudGx5LCBpLmUuIHVzaW5nIGFzIGxpdHRsZSBhcyBwb3NzaWJsZSB3
aGVuIHVuZGVyIGxpZ2h0IGxvYWQKLSAqIGFuZCBvYnRhaW5pbmcgYXMgbXVjaCBhcyBwb3NzaWJs
ZSB3aGVuIG1lbW9yeSBkZW1hbmRzIGFyZSBoaWdoLgotICogU2luY2UgUkFNIG5lZWRzIHZhcnkg
aGlnaGx5IGR5bmFtaWNhbGx5IGFuZCBzb21ldGltZXMgZHJhbWF0aWNhbGx5LAotICogImh5c3Rl
cmVzaXMiIGlzIHVzZWQsIHRoYXQgaXMsIG1lbW9yeSB0YXJnZXQgaXMgZGV0ZXJtaW5lZCBub3Qg
anVzdAotICogb24gY3VycmVudCBkYXRhIGJ1dCBhbHNvIG9uIHBhc3QgZGF0YSBzdG9yZWQgaW4g
dGhlIHN5c3RlbS4KLSAqCi0gKiAiU2VsZmJhbGxvb25pbmciIGNyZWF0ZXMgbWVtb3J5IHByZXNz
dXJlIGJ5IG1hbmFnaW5nIHRoZSBYZW4gYmFsbG9vbgotICogZHJpdmVyIHRvIGRlY3JlYXNlIGFu
ZCBpbmNyZWFzZSBhdmFpbGFibGUga2VybmVsIG1lbW9yeSwgZHJpdmVuCi0gKiBsYXJnZWx5IGJ5
IHRoZSB0YXJnZXQgdmFsdWUgb2YgIkNvbW1pdHRlZF9BUyIgKHNlZSAvcHJvYy9tZW1pbmZvKS4K
LSAqIFNpbmNlIENvbW1pdHRlZF9BUyBkb2VzIG5vdCBhY2NvdW50IGZvciBjbGVhbiBtYXBwZWQg
cGFnZXMgKGkuZS4gcGFnZXMKLSAqIGluIFJBTSB0aGF0IGFyZSBpZGVudGljYWwgdG8gcGFnZXMg
b24gZGlzayksIHNlbGZiYWxsb29uaW5nIGhhcyB0aGUKLSAqIGFmZmVjdCBvZiBwdXNoaW5nIGxl
c3MgZnJlcXVlbnRseSB1c2VkIGNsZWFuIHBhZ2VjYWNoZSBwYWdlcyBvdXQgb2YKLSAqIGtlcm5l
bCBSQU0gYW5kLCBwcmVzdW1hYmx5IHVzaW5nIGNsZWFuY2FjaGUsIGludG8gWGVuIHRtZW0gd2hl
cmUKLSAqIFhlbiBjYW4gbW9yZSBlZmZpY2llbnRseSBvcHRpbWl6ZSBSQU0gdXRpbGl6YXRpb24g
Zm9yIHN1Y2ggcGFnZXMuCi0gKgotICogV2hlbiBrZXJuZWwgbWVtb3J5IGRlbWFuZCB1bmV4cGVj
dGVkbHkgaW5jcmVhc2VzIGZhc3RlciB0aGFuIFhlbiwgdmlhCi0gKiB0aGUgc2VsZmJhbGxvb24g
ZHJpdmVyLCBpcyBhYmxlIHRvIChvciBjaG9vc2VzIHRvKSBwcm92aWRlIHVzYWJsZSBSQU0sCi0g
KiB0aGUga2VybmVsIG1heSBpbnZva2Ugc3dhcHBpbmcuICBJbiBtb3N0IGNhc2VzLCBmcm9udHN3
YXAgaXMgYWJsZQotICogdG8gYWJzb3JiIHRoaXMgc3dhcHBpbmcgaW50byBYZW4gdG1lbS4gIEhv
d2V2ZXIsIGR1ZSB0byB0aGUgZmFjdAotICogdGhhdCB0aGUga2VybmVsIHN3YXAgc3Vic3lzdGVt
IGFzc3VtZXMgc3dhcHBpbmcgb2NjdXJzIHRvIGEgZGlzaywKLSAqIHN3YXBwZWQgcGFnZXMgbWF5
IHNpdCBvbiB0aGUgZGlzayBmb3IgYSB2ZXJ5IGxvbmcgdGltZTsgZXZlbiBpZgotICogdGhlIGtl
cm5lbCBrbm93cyB0aGUgcGFnZSB3aWxsIG5ldmVyIGJlIHVzZWQgYWdhaW4uICBUaGlzIGlzIGJl
Y2F1c2UKLSAqIHRoZSBkaXNrIHNwYWNlIGNvc3RzIHZlcnkgbGl0dGxlIGFuZCBjYW4gYmUgb3Zl
cndyaXR0ZW4gd2hlbgotICogbmVjZXNzYXJ5LiAgV2hlbiBzdWNoIHN0YWxlIHBhZ2VzIGFyZSBp
biBmcm9udHN3YXAsIGhvd2V2ZXIsIHRoZXkKLSAqIGFyZSB0YWtpbmcgdXAgdmFsdWFibGUgcmVh
bCBlc3RhdGUuICAiRnJvbnRzd2FwIHNlbGZzaHJpbmtpbmciIHdvcmtzCi0gKiB0byByZXNvbHZl
IHRoaXM6ICBXaGVuIGZyb250c3dhcCBhY3Rpdml0eSBpcyBvdGhlcndpc2Ugc3RhYmxlCi0gKiBh
bmQgdGhlIGd1ZXN0IGtlcm5lbCBpcyBub3QgdW5kZXIgbWVtb3J5IHByZXNzdXJlLCB0aGUgImZy
b250c3dhcAotICogc2VsZnNocmlua2luZyIgYWNjb3VudHMgZm9yIHRoaXMgYnkgcHJvdmlkaW5n
IHByZXNzdXJlIHRvIHJlbW92ZSBzb21lCi0gKiBwYWdlcyBmcm9tIGZyb250c3dhcCBhbmQgcmV0
dXJuIHRoZW0gdG8ga2VybmVsIG1lbW9yeS4KLSAqCi0gKiBGb3IgYm90aCAic2VsZmJhbGxvb25p
bmciIGFuZCAiZnJvbnRzd2FwLXNlbGZzaHJpbmtpbmciLCBhIHdvcmtlcgotICogdGhyZWFkIGlz
IHVzZWQgYW5kIHN5c2ZzIHR1bmFibGVzIGFyZSBwcm92aWRlZCB0byBhZGp1c3QgdGhlIGZyZXF1
ZW5jeQotICogYW5kIHJhdGUgb2YgYWRqdXN0bWVudHMgdG8gYWNoaWV2ZSB0aGUgZ29hbCwgYXMg
d2VsbCBhcyB0byBkaXNhYmxlIG9uZQotICogb3IgYm90aCBmdW5jdGlvbnMgaW5kZXBlbmRlbnRs
eS4KLSAqCi0gKiBXaGlsZSBzb21lIGFyZ3VlIHRoYXQgdGhpcyBmdW5jdGlvbmFsaXR5IGNhbiBh
bmQgc2hvdWxkIGJlIGltcGxlbWVudGVkCi0gKiBpbiB1c2Vyc3BhY2UsIGl0IGhhcyBiZWVuIG9i
c2VydmVkIHRoYXQgYmFkIHRoaW5ncyBoYXBwZW4gKGUuZy4gT09NcykuCi0gKgotICogU3lzdGVt
IGNvbmZpZ3VyYXRpb24gbm90ZTogU2VsZmJhbGxvb25pbmcgc2hvdWxkIG5vdCBiZSBlbmFibGVk
IG9uCi0gKiBzeXN0ZW1zIHdpdGhvdXQgYSBzdWZmaWNpZW50bHkgbGFyZ2Ugc3dhcCBkZXZpY2Ug
Y29uZmlndXJlZDsgZm9yIGJlc3QKLSAqIHJlc3VsdHMsIGl0IGlzIHJlY29tbWVuZGVkIHRoYXQg
dG90YWwgc3dhcCBiZSBpbmNyZWFzZWQgYnkgdGhlIHNpemUKLSAqIG9mIHRoZSBndWVzdCBtZW1v
cnkuIE5vdGUsIHRoYXQgc2VsZmJhbGxvb25pbmcgc2hvdWxkIGJlIGRpc2FibGVkIGJ5IGRlZmF1
bHQKLSAqIGlmIGZyb250c3dhcCBpcyBub3QgY29uZmlndXJlZC4gIFNpbWlsYXJseSBzZWxmYmFs
bG9vbmluZyBzaG91bGQgYmUgZW5hYmxlZAotICogYnkgZGVmYXVsdCBpZiBmcm9udHN3YXAgaXMg
Y29uZmlndXJlZCBhbmQgY2FuIGJlIGRpc2FibGVkIHdpdGggdGhlCi0gKiAidG1lbS5zZWxmYmFs
bG9vbmluZz0wIiBrZXJuZWwgYm9vdCBvcHRpb24uICBGaW5hbGx5LCB3aGVuIGZyb250c3dhcCBp
cwotICogY29uZmlndXJlZCwgZnJvbnRzd2FwLXNlbGZzaHJpbmtpbmcgY2FuIGJlIGRpc2FibGVk
ICB3aXRoIHRoZQotICogInRtZW0uc2VsZnNocmluaz0wIiBrZXJuZWwgYm9vdCBvcHRpb24uCi0g
KgotICogU2VsZmJhbGxvb25pbmcgaXMgZGlzYWxsb3dlZCBpbiBkb21haW4wIGFuZCBmb3JjZS1k
aXNhYmxlZC4KLSAqCi0gKi8KLQotI2RlZmluZSBwcl9mbXQoZm10KSBLQlVJTERfTU9ETkFNRSAi
OiAiIGZtdAotCi0jaW5jbHVkZSA8bGludXgva2VybmVsLmg+Ci0jaW5jbHVkZSA8bGludXgvbWVt
YmxvY2suaD4KLSNpbmNsdWRlIDxsaW51eC9zd2FwLmg+Ci0jaW5jbHVkZSA8bGludXgvbW0uaD4K
LSNpbmNsdWRlIDxsaW51eC9tbWFuLmg+Ci0jaW5jbHVkZSA8bGludXgvd29ya3F1ZXVlLmg+Ci0j
aW5jbHVkZSA8bGludXgvZGV2aWNlLmg+Ci0jaW5jbHVkZSA8eGVuL2JhbGxvb24uaD4KLSNpbmNs
dWRlIDx4ZW4vdG1lbS5oPgotI2luY2x1ZGUgPHhlbi94ZW4uaD4KLQotLyogRW5hYmxlL2Rpc2Fi
bGUgd2l0aCBzeXNmcy4gKi8KLXN0YXRpYyBpbnQgeGVuX3NlbGZiYWxsb29uaW5nX2VuYWJsZWQg
X19yZWFkX21vc3RseTsKLQotLyoKLSAqIENvbnRyb2xzIHJhdGUgYXQgd2hpY2ggbWVtb3J5IHRh
cmdldCAodGhpcyBpdGVyYXRpb24pIGFwcHJvYWNoZXMKLSAqIHVsdGltYXRlIGdvYWwgd2hlbiBt
ZW1vcnkgbmVlZCBpcyBpbmNyZWFzaW5nICh1cC1oeXN0ZXJlc2lzKSBvcgotICogZGVjcmVhc2lu
ZyAoZG93bi1oeXN0ZXJlc2lzKS4gSGlnaGVyIHZhbHVlcyBvZiBoeXN0ZXJlc2lzIGNhdXNlCi0g
KiBzbG93ZXIgaW5jcmVhc2VzL2RlY3JlYXNlcy4gVGhlIGRlZmF1bHQgdmFsdWVzIGZvciB0aGUg
dmFyaW91cwotICogcGFyYW1ldGVycyB3ZXJlIGRlZW1lZCByZWFzb25hYmxlIGJ5IGV4cGVyaW1l
bnRhdGlvbiwgbWF5IGJlCi0gKiB3b3JrbG9hZC1kZXBlbmRlbnQsIGFuZCBjYW4gYWxsIGJlIGFk
anVzdGVkIHZpYSBzeXNmcy4KLSAqLwotc3RhdGljIHVuc2lnbmVkIGludCBzZWxmYmFsbG9vbl9k
b3duaHlzdGVyZXNpcyBfX3JlYWRfbW9zdGx5ID0gODsKLXN0YXRpYyB1bnNpZ25lZCBpbnQgc2Vs
ZmJhbGxvb25fdXBoeXN0ZXJlc2lzIF9fcmVhZF9tb3N0bHkgPSAxOwotCi0vKiBJbiBIWiwgY29u
dHJvbHMgZnJlcXVlbmN5IG9mIHdvcmtlciBpbnZvY2F0aW9uLiAqLwotc3RhdGljIHVuc2lnbmVk
IGludCBzZWxmYmFsbG9vbl9pbnRlcnZhbCBfX3JlYWRfbW9zdGx5ID0gNTsKLQotLyoKLSAqIE1p
bmltdW0gdXNhYmxlIFJBTSBpbiBNQiBmb3Igc2VsZmJhbGxvb25pbmcgdGFyZ2V0IGZvciBiYWxs
b29uLgotICogSWYgbm9uLXplcm8sIGl0IGlzIGFkZGVkIHRvIHRvdGFscmVzZXJ2ZV9wYWdlcyBh
bmQgc2VsZi1iYWxsb29uaW5nCi0gKiB3aWxsIG5vdCBiYWxsb29uIGJlbG93IHRoZSBzdW0uICBJ
ZiB6ZXJvLCBhIHBpZWNld2lzZSBsaW5lYXIgZnVuY3Rpb24KLSAqIGlzIGNhbGN1bGF0ZWQgYXMg
YSBtaW5pbXVtIGFuZCBhZGRlZCB0byB0b3RhbHJlc2VydmVfcGFnZXMuICBOb3RlIHRoYXQKLSAq
IHNldHRpbmcgdGhpcyB2YWx1ZSBpbmRpc2NyaW1pbmF0ZWx5IG1heSBjYXVzZSBPT01zIGFuZCBj
cmFzaGVzLgotICovCi1zdGF0aWMgdW5zaWduZWQgaW50IHNlbGZiYWxsb29uX21pbl91c2FibGVf
bWI7Ci0KLS8qCi0gKiBBbW91bnQgb2YgUkFNIGluIE1CIHRvIGFkZCB0byB0aGUgdGFyZ2V0IG51
bWJlciBvZiBwYWdlcy4KLSAqIENhbiBiZSB1c2VkIHRvIHJlc2VydmUgc29tZSBtb3JlIHJvb20g
Zm9yIGNhY2hlcyBhbmQgdGhlIGxpa2UuCi0gKi8KLXN0YXRpYyB1bnNpZ25lZCBpbnQgc2VsZmJh
bGxvb25fcmVzZXJ2ZWRfbWI7Ci0KLXN0YXRpYyB2b2lkIHNlbGZiYWxsb29uX3Byb2Nlc3Moc3Ry
dWN0IHdvcmtfc3RydWN0ICp3b3JrKTsKLXN0YXRpYyBERUNMQVJFX0RFTEFZRURfV09SSyhzZWxm
YmFsbG9vbl93b3JrZXIsIHNlbGZiYWxsb29uX3Byb2Nlc3MpOwotCi0jaWZkZWYgQ09ORklHX0ZS
T05UU1dBUAotI2luY2x1ZGUgPGxpbnV4L2Zyb250c3dhcC5oPgotCi0vKiBFbmFibGUvZGlzYWJs
ZSB3aXRoIHN5c2ZzLiAqLwotc3RhdGljIGJvb2wgZnJvbnRzd2FwX3NlbGZzaHJpbmtpbmcgX19y
ZWFkX21vc3RseTsKLQotLyoKLSAqIFRoZSBkZWZhdWx0IHZhbHVlcyBmb3IgdGhlIGZvbGxvd2lu
ZyBwYXJhbWV0ZXJzIHdlcmUgZGVlbWVkIHJlYXNvbmFibGUKLSAqIGJ5IGV4cGVyaW1lbnRhdGlv
biwgbWF5IGJlIHdvcmtsb2FkLWRlcGVuZGVudCwgYW5kIGNhbiBhbGwgYmUKLSAqIGFkanVzdGVk
IHZpYSBzeXNmcy4KLSAqLwotCi0vKiBDb250cm9sIHJhdGUgZm9yIGZyb250c3dhcCBzaHJpbmtp
bmcuIEhpZ2hlciBoeXN0ZXJlc2lzIGlzIHNsb3dlci4gKi8KLXN0YXRpYyB1bnNpZ25lZCBpbnQg
ZnJvbnRzd2FwX2h5c3RlcmVzaXMgX19yZWFkX21vc3RseSA9IDIwOwotCi0vKgotICogTnVtYmVy
IG9mIHNlbGZiYWxsb29uIHdvcmtlciBpbnZvY2F0aW9ucyB0byB3YWl0IGJlZm9yZSBvYnNlcnZp
bmcgdGhhdAotICogZnJvbnRzd2FwIHNlbGZzaHJpbmtpbmcgc2hvdWxkIGNvbW1lbmNlLiBOb3Rl
IHRoYXQgc2VsZnNocmlua2luZyBkb2VzCi0gKiBub3QgdXNlIGEgc2VwYXJhdGUgd29ya2VyIHRo
cmVhZC4KLSAqLwotc3RhdGljIHVuc2lnbmVkIGludCBmcm9udHN3YXBfaW5lcnRpYSBfX3JlYWRf
bW9zdGx5ID0gMzsKLQotLyogQ291bnRkb3duIHRvIG5leHQgaW52b2NhdGlvbiBvZiBmcm9udHN3
YXBfc2hyaW5rKCkgKi8KLXN0YXRpYyB1bnNpZ25lZCBsb25nIGZyb250c3dhcF9pbmVydGlhX2Nv
dW50ZXI7Ci0KLS8qCi0gKiBJbnZva2VkIGJ5IHRoZSBzZWxmYmFsbG9vbiB3b3JrZXIgdGhyZWFk
LCB1c2VzIGN1cnJlbnQgbnVtYmVyIG9mIHBhZ2VzCi0gKiBpbiBmcm9udHN3YXAgKGZyb250c3dh
cF9jdXJyX3BhZ2VzKCkpLCBwcmV2aW91cyBzdGF0dXMsIGFuZCBjb250cm9sCi0gKiB2YWx1ZXMg
KGh5c3RlcmVzaXMgYW5kIGluZXJ0aWEpIHRvIGRldGVybWluZSBpZiBmcm9udHN3YXAgc2hvdWxk
IGJlCi0gKiBzaHJ1bmsgYW5kIHdoYXQgdGhlIG5ldyBmcm9udHN3YXAgc2l6ZSBzaG91bGQgYmUu
ICBOb3RlIHRoYXQKLSAqIGZyb250c3dhcF9zaHJpbmsgaXMgZXNzZW50aWFsbHkgYSBwYXJ0aWFs
IHN3YXBvZmYgdGhhdCBpbW1lZGlhdGVseQotICogdHJhbnNmZXJzIHBhZ2VzIGZyb20gdGhlICJz
d2FwIGRldmljZSIgKGZyb250c3dhcCkgYmFjayBpbnRvIGtlcm5lbAotICogUkFNOyBkZXNwaXRl
IHRoZSBuYW1lLCBmcm9udHN3YXAgInNocmlua2luZyIgaXMgdmVyeSBkaWZmZXJlbnQgZnJvbQot
ICogdGhlICJzaHJpbmtlciIgaW50ZXJmYWNlIHVzZWQgYnkgdGhlIGtlcm5lbCBNTSBzdWJzeXN0
ZW0gdG8gcmVjbGFpbQotICogbWVtb3J5LgotICovCi1zdGF0aWMgdm9pZCBmcm9udHN3YXBfc2Vs
ZnNocmluayh2b2lkKQotewotCXN0YXRpYyB1bnNpZ25lZCBsb25nIGN1cl9mcm9udHN3YXBfcGFn
ZXM7Ci0JdW5zaWduZWQgbG9uZyBsYXN0X2Zyb250c3dhcF9wYWdlczsKLQl1bnNpZ25lZCBsb25n
IHRndF9mcm9udHN3YXBfcGFnZXM7Ci0KLQlsYXN0X2Zyb250c3dhcF9wYWdlcyA9IGN1cl9mcm9u
dHN3YXBfcGFnZXM7Ci0JY3VyX2Zyb250c3dhcF9wYWdlcyA9IGZyb250c3dhcF9jdXJyX3BhZ2Vz
KCk7Ci0JaWYgKCFjdXJfZnJvbnRzd2FwX3BhZ2VzIHx8Ci0JCQkoY3VyX2Zyb250c3dhcF9wYWdl
cyA+IGxhc3RfZnJvbnRzd2FwX3BhZ2VzKSkgewotCQlmcm9udHN3YXBfaW5lcnRpYV9jb3VudGVy
ID0gZnJvbnRzd2FwX2luZXJ0aWE7Ci0JCXJldHVybjsKLQl9Ci0JaWYgKGZyb250c3dhcF9pbmVy
dGlhX2NvdW50ZXIgJiYgLS1mcm9udHN3YXBfaW5lcnRpYV9jb3VudGVyKQotCQlyZXR1cm47Ci0J
aWYgKGN1cl9mcm9udHN3YXBfcGFnZXMgPD0gZnJvbnRzd2FwX2h5c3RlcmVzaXMpCi0JCXRndF9m
cm9udHN3YXBfcGFnZXMgPSAwOwotCWVsc2UKLQkJdGd0X2Zyb250c3dhcF9wYWdlcyA9IGN1cl9m
cm9udHN3YXBfcGFnZXMgLQotCQkJKGN1cl9mcm9udHN3YXBfcGFnZXMgLyBmcm9udHN3YXBfaHlz
dGVyZXNpcyk7Ci0JZnJvbnRzd2FwX3Nocmluayh0Z3RfZnJvbnRzd2FwX3BhZ2VzKTsKLQlmcm9u
dHN3YXBfaW5lcnRpYV9jb3VudGVyID0gZnJvbnRzd2FwX2luZXJ0aWE7Ci19Ci0KLSNlbmRpZiAv
KiBDT05GSUdfRlJPTlRTV0FQICovCi0KLSNkZWZpbmUgTUIyUEFHRVMobWIpCSgobWIpIDw8ICgy
MCAtIFBBR0VfU0hJRlQpKQotI2RlZmluZSBQQUdFUzJNQihwYWdlcykgKChwYWdlcykgPj4gKDIw
IC0gUEFHRV9TSElGVCkpCi0KLS8qCi0gKiBVc2UgY3VycmVudCBiYWxsb29uIHNpemUsIHRoZSBn
b2FsICh2bV9jb21taXR0ZWRfYXMpLCBhbmQgaHlzdGVyZXNpcwotICogcGFyYW1ldGVycyB0byBz
ZXQgYSBuZXcgdGFyZ2V0IGJhbGxvb24gc2l6ZQotICovCi1zdGF0aWMgdm9pZCBzZWxmYmFsbG9v
bl9wcm9jZXNzKHN0cnVjdCB3b3JrX3N0cnVjdCAqd29yaykKLXsKLQl1bnNpZ25lZCBsb25nIGN1
cl9wYWdlcywgZ29hbF9wYWdlcywgdGd0X3BhZ2VzLCBmbG9vcl9wYWdlczsKLQl1bnNpZ25lZCBs
b25nIHVzZWZ1bF9wYWdlczsKLQlib29sIHJlc2V0X3RpbWVyID0gZmFsc2U7Ci0KLQlpZiAoeGVu
X3NlbGZiYWxsb29uaW5nX2VuYWJsZWQpIHsKLQkJY3VyX3BhZ2VzID0gdG90YWxyYW1fcGFnZXMo
KTsKLQkJdGd0X3BhZ2VzID0gY3VyX3BhZ2VzOyAvKiBkZWZhdWx0IGlzIG5vIGNoYW5nZSAqLwot
CQlnb2FsX3BhZ2VzID0gdm1fbWVtb3J5X2NvbW1pdHRlZCgpICsKLQkJCQl0b3RhbHJlc2VydmVf
cGFnZXMgKwotCQkJCU1CMlBBR0VTKHNlbGZiYWxsb29uX3Jlc2VydmVkX21iKTsKLSNpZmRlZiBD
T05GSUdfRlJPTlRTV0FQCi0JCS8qIGFsbG93IHNwYWNlIGZvciBmcm9udHN3YXAgcGFnZXMgdG8g
YmUgcmVwYXRyaWF0ZWQgKi8KLQkJaWYgKGZyb250c3dhcF9zZWxmc2hyaW5raW5nKQotCQkJZ29h
bF9wYWdlcyArPSBmcm9udHN3YXBfY3Vycl9wYWdlcygpOwotI2VuZGlmCi0JCWlmIChjdXJfcGFn
ZXMgPiBnb2FsX3BhZ2VzKQotCQkJdGd0X3BhZ2VzID0gY3VyX3BhZ2VzIC0KLQkJCQkoKGN1cl9w
YWdlcyAtIGdvYWxfcGFnZXMpIC8KLQkJCQkgIHNlbGZiYWxsb29uX2Rvd25oeXN0ZXJlc2lzKTsK
LQkJZWxzZSBpZiAoY3VyX3BhZ2VzIDwgZ29hbF9wYWdlcykKLQkJCXRndF9wYWdlcyA9IGN1cl9w
YWdlcyArCi0JCQkJKChnb2FsX3BhZ2VzIC0gY3VyX3BhZ2VzKSAvCi0JCQkJICBzZWxmYmFsbG9v
bl91cGh5c3RlcmVzaXMpOwotCQkvKiBlbHNlIGlmIGN1cl9wYWdlcyA9PSBnb2FsX3BhZ2VzLCBu
byBjaGFuZ2UgKi8KLQkJdXNlZnVsX3BhZ2VzID0gbWF4X3BmbiAtIHRvdGFscmVzZXJ2ZV9wYWdl
czsKLQkJaWYgKHNlbGZiYWxsb29uX21pbl91c2FibGVfbWIgIT0gMCkKLQkJCWZsb29yX3BhZ2Vz
ID0gdG90YWxyZXNlcnZlX3BhZ2VzICsKLQkJCQkJTUIyUEFHRVMoc2VsZmJhbGxvb25fbWluX3Vz
YWJsZV9tYik7Ci0JCS8qIHBpZWNld2lzZSBsaW5lYXIgZnVuY3Rpb24gZW5kaW5nIGluIH4zJSBz
bG9wZSAqLwotCQllbHNlIGlmICh1c2VmdWxfcGFnZXMgPCBNQjJQQUdFUygxNikpCi0JCQlmbG9v
cl9wYWdlcyA9IG1heF9wZm47IC8qIG5vdCB3b3J0aCBiYWxsb29uaW5nICovCi0JCWVsc2UgaWYg
KHVzZWZ1bF9wYWdlcyA8IE1CMlBBR0VTKDY0KSkKLQkJCWZsb29yX3BhZ2VzID0gdG90YWxyZXNl
cnZlX3BhZ2VzICsgTUIyUEFHRVMoMTYpICsKLQkJCQkJKCh1c2VmdWxfcGFnZXMgLSBNQjJQQUdF
UygxNikpID4+IDEpOwotCQllbHNlIGlmICh1c2VmdWxfcGFnZXMgPCBNQjJQQUdFUyg1MTIpKQot
CQkJZmxvb3JfcGFnZXMgPSB0b3RhbHJlc2VydmVfcGFnZXMgKyBNQjJQQUdFUyg0MCkgKwotCQkJ
CQkoKHVzZWZ1bF9wYWdlcyAtIE1CMlBBR0VTKDQwKSkgPj4gMyk7Ci0JCWVsc2UgLyogdXNlZnVs
X3BhZ2VzID49IE1CMlBBR0VTKDUxMikgKi8KLQkJCWZsb29yX3BhZ2VzID0gdG90YWxyZXNlcnZl
X3BhZ2VzICsgTUIyUEFHRVMoOTkpICsKLQkJCQkJKCh1c2VmdWxfcGFnZXMgLSBNQjJQQUdFUyg5
OSkpID4+IDUpOwotCQlpZiAodGd0X3BhZ2VzIDwgZmxvb3JfcGFnZXMpCi0JCQl0Z3RfcGFnZXMg
PSBmbG9vcl9wYWdlczsKLQkJYmFsbG9vbl9zZXRfbmV3X3RhcmdldCh0Z3RfcGFnZXMgKwotCQkJ
YmFsbG9vbl9zdGF0cy5jdXJyZW50X3BhZ2VzIC0gdG90YWxyYW1fcGFnZXMoKSk7Ci0JCXJlc2V0
X3RpbWVyID0gdHJ1ZTsKLQl9Ci0jaWZkZWYgQ09ORklHX0ZST05UU1dBUAotCWlmIChmcm9udHN3
YXBfc2VsZnNocmlua2luZykgewotCQlmcm9udHN3YXBfc2VsZnNocmluaygpOwotCQlyZXNldF90
aW1lciA9IHRydWU7Ci0JfQotI2VuZGlmCi0JaWYgKHJlc2V0X3RpbWVyKQotCQlzY2hlZHVsZV9k
ZWxheWVkX3dvcmsoJnNlbGZiYWxsb29uX3dvcmtlciwKLQkJCXNlbGZiYWxsb29uX2ludGVydmFs
ICogSFopOwotfQotCi0jaWZkZWYgQ09ORklHX1NZU0ZTCi0KLSNpbmNsdWRlIDxsaW51eC9jYXBh
YmlsaXR5Lmg+Ci0KLSNkZWZpbmUgU0VMRkJBTExPT05fU0hPVyhuYW1lLCBmb3JtYXQsIGFyZ3Mu
Li4pCQkJCVwKLQlzdGF0aWMgc3NpemVfdCBzaG93XyMjbmFtZShzdHJ1Y3QgZGV2aWNlICpkZXYs
CVwKLQkJCQkJICBzdHJ1Y3QgZGV2aWNlX2F0dHJpYnV0ZSAqYXR0ciwgXAotCQkJCQkgIGNoYXIg
KmJ1ZikgXAotCXsgXAotCQlyZXR1cm4gc3ByaW50ZihidWYsIGZvcm1hdCwgIyNhcmdzKTsgXAot
CX0KLQotU0VMRkJBTExPT05fU0hPVyhzZWxmYmFsbG9vbmluZywgIiVkXG4iLCB4ZW5fc2VsZmJh
bGxvb25pbmdfZW5hYmxlZCk7Ci0KLXN0YXRpYyBzc2l6ZV90IHN0b3JlX3NlbGZiYWxsb29uaW5n
KHN0cnVjdCBkZXZpY2UgKmRldiwKLQkJCSAgICBzdHJ1Y3QgZGV2aWNlX2F0dHJpYnV0ZSAqYXR0
ciwKLQkJCSAgICBjb25zdCBjaGFyICpidWYsCi0JCQkgICAgc2l6ZV90IGNvdW50KQotewotCWJv
b2wgd2FzX2VuYWJsZWQgPSB4ZW5fc2VsZmJhbGxvb25pbmdfZW5hYmxlZDsKLQl1bnNpZ25lZCBs
b25nIHRtcDsKLQlpbnQgZXJyOwotCi0JaWYgKCFjYXBhYmxlKENBUF9TWVNfQURNSU4pKQotCQly
ZXR1cm4gLUVQRVJNOwotCi0JZXJyID0ga3N0cnRvdWwoYnVmLCAxMCwgJnRtcCk7Ci0JaWYgKGVy
cikKLQkJcmV0dXJuIGVycjsKLQlpZiAoKHRtcCAhPSAwKSAmJiAodG1wICE9IDEpKQotCQlyZXR1
cm4gLUVJTlZBTDsKLQotCXhlbl9zZWxmYmFsbG9vbmluZ19lbmFibGVkID0gISF0bXA7Ci0JaWYg
KCF3YXNfZW5hYmxlZCAmJiB4ZW5fc2VsZmJhbGxvb25pbmdfZW5hYmxlZCkKLQkJc2NoZWR1bGVf
ZGVsYXllZF93b3JrKCZzZWxmYmFsbG9vbl93b3JrZXIsCi0JCQlzZWxmYmFsbG9vbl9pbnRlcnZh
bCAqIEhaKTsKLQotCXJldHVybiBjb3VudDsKLX0KLQotc3RhdGljIERFVklDRV9BVFRSKHNlbGZi
YWxsb29uaW5nLCBTX0lSVUdPIHwgU19JV1VTUiwKLQkJICAgc2hvd19zZWxmYmFsbG9vbmluZywg
c3RvcmVfc2VsZmJhbGxvb25pbmcpOwotCi1TRUxGQkFMTE9PTl9TSE9XKHNlbGZiYWxsb29uX2lu
dGVydmFsLCAiJWRcbiIsIHNlbGZiYWxsb29uX2ludGVydmFsKTsKLQotc3RhdGljIHNzaXplX3Qg
c3RvcmVfc2VsZmJhbGxvb25faW50ZXJ2YWwoc3RydWN0IGRldmljZSAqZGV2LAotCQkJCQkgIHN0
cnVjdCBkZXZpY2VfYXR0cmlidXRlICphdHRyLAotCQkJCQkgIGNvbnN0IGNoYXIgKmJ1ZiwKLQkJ
CQkJICBzaXplX3QgY291bnQpCi17Ci0JdW5zaWduZWQgbG9uZyB2YWw7Ci0JaW50IGVycjsKLQot
CWlmICghY2FwYWJsZShDQVBfU1lTX0FETUlOKSkKLQkJcmV0dXJuIC1FUEVSTTsKLQllcnIgPSBr
c3RydG91bChidWYsIDEwLCAmdmFsKTsKLQlpZiAoZXJyKQotCQlyZXR1cm4gZXJyOwotCWlmICh2
YWwgPT0gMCkKLQkJcmV0dXJuIC1FSU5WQUw7Ci0Jc2VsZmJhbGxvb25faW50ZXJ2YWwgPSB2YWw7
Ci0JcmV0dXJuIGNvdW50OwotfQotCi1zdGF0aWMgREVWSUNFX0FUVFIoc2VsZmJhbGxvb25faW50
ZXJ2YWwsIFNfSVJVR08gfCBTX0lXVVNSLAotCQkgICBzaG93X3NlbGZiYWxsb29uX2ludGVydmFs
LCBzdG9yZV9zZWxmYmFsbG9vbl9pbnRlcnZhbCk7Ci0KLVNFTEZCQUxMT09OX1NIT1coc2VsZmJh
bGxvb25fZG93bmh5cywgIiVkXG4iLCBzZWxmYmFsbG9vbl9kb3duaHlzdGVyZXNpcyk7Ci0KLXN0
YXRpYyBzc2l6ZV90IHN0b3JlX3NlbGZiYWxsb29uX2Rvd25oeXMoc3RydWN0IGRldmljZSAqZGV2
LAotCQkJCQkgc3RydWN0IGRldmljZV9hdHRyaWJ1dGUgKmF0dHIsCi0JCQkJCSBjb25zdCBjaGFy
ICpidWYsCi0JCQkJCSBzaXplX3QgY291bnQpCi17Ci0JdW5zaWduZWQgbG9uZyB2YWw7Ci0JaW50
IGVycjsKLQotCWlmICghY2FwYWJsZShDQVBfU1lTX0FETUlOKSkKLQkJcmV0dXJuIC1FUEVSTTsK
LQllcnIgPSBrc3RydG91bChidWYsIDEwLCAmdmFsKTsKLQlpZiAoZXJyKQotCQlyZXR1cm4gZXJy
OwotCWlmICh2YWwgPT0gMCkKLQkJcmV0dXJuIC1FSU5WQUw7Ci0Jc2VsZmJhbGxvb25fZG93bmh5
c3RlcmVzaXMgPSB2YWw7Ci0JcmV0dXJuIGNvdW50OwotfQotCi1zdGF0aWMgREVWSUNFX0FUVFIo
c2VsZmJhbGxvb25fZG93bmh5c3RlcmVzaXMsIFNfSVJVR08gfCBTX0lXVVNSLAotCQkgICBzaG93
X3NlbGZiYWxsb29uX2Rvd25oeXMsIHN0b3JlX3NlbGZiYWxsb29uX2Rvd25oeXMpOwotCi0KLVNF
TEZCQUxMT09OX1NIT1coc2VsZmJhbGxvb25fdXBoeXMsICIlZFxuIiwgc2VsZmJhbGxvb25fdXBo
eXN0ZXJlc2lzKTsKLQotc3RhdGljIHNzaXplX3Qgc3RvcmVfc2VsZmJhbGxvb25fdXBoeXMoc3Ry
dWN0IGRldmljZSAqZGV2LAotCQkJCSAgICAgICBzdHJ1Y3QgZGV2aWNlX2F0dHJpYnV0ZSAqYXR0
ciwKLQkJCQkgICAgICAgY29uc3QgY2hhciAqYnVmLAotCQkJCSAgICAgICBzaXplX3QgY291bnQp
Ci17Ci0JdW5zaWduZWQgbG9uZyB2YWw7Ci0JaW50IGVycjsKLQotCWlmICghY2FwYWJsZShDQVBf
U1lTX0FETUlOKSkKLQkJcmV0dXJuIC1FUEVSTTsKLQllcnIgPSBrc3RydG91bChidWYsIDEwLCAm
dmFsKTsKLQlpZiAoZXJyKQotCQlyZXR1cm4gZXJyOwotCWlmICh2YWwgPT0gMCkKLQkJcmV0dXJu
IC1FSU5WQUw7Ci0Jc2VsZmJhbGxvb25fdXBoeXN0ZXJlc2lzID0gdmFsOwotCXJldHVybiBjb3Vu
dDsKLX0KLQotc3RhdGljIERFVklDRV9BVFRSKHNlbGZiYWxsb29uX3VwaHlzdGVyZXNpcywgU19J
UlVHTyB8IFNfSVdVU1IsCi0JCSAgIHNob3dfc2VsZmJhbGxvb25fdXBoeXMsIHN0b3JlX3NlbGZi
YWxsb29uX3VwaHlzKTsKLQotU0VMRkJBTExPT05fU0hPVyhzZWxmYmFsbG9vbl9taW5fdXNhYmxl
X21iLCAiJWRcbiIsCi0JCQkJc2VsZmJhbGxvb25fbWluX3VzYWJsZV9tYik7Ci0KLXN0YXRpYyBz
c2l6ZV90IHN0b3JlX3NlbGZiYWxsb29uX21pbl91c2FibGVfbWIoc3RydWN0IGRldmljZSAqZGV2
LAotCQkJCQkgICAgICAgc3RydWN0IGRldmljZV9hdHRyaWJ1dGUgKmF0dHIsCi0JCQkJCSAgICAg
ICBjb25zdCBjaGFyICpidWYsCi0JCQkJCSAgICAgICBzaXplX3QgY291bnQpCi17Ci0JdW5zaWdu
ZWQgbG9uZyB2YWw7Ci0JaW50IGVycjsKLQotCWlmICghY2FwYWJsZShDQVBfU1lTX0FETUlOKSkK
LQkJcmV0dXJuIC1FUEVSTTsKLQllcnIgPSBrc3RydG91bChidWYsIDEwLCAmdmFsKTsKLQlpZiAo
ZXJyKQotCQlyZXR1cm4gZXJyOwotCWlmICh2YWwgPT0gMCkKLQkJcmV0dXJuIC1FSU5WQUw7Ci0J
c2VsZmJhbGxvb25fbWluX3VzYWJsZV9tYiA9IHZhbDsKLQlyZXR1cm4gY291bnQ7Ci19Ci0KLXN0
YXRpYyBERVZJQ0VfQVRUUihzZWxmYmFsbG9vbl9taW5fdXNhYmxlX21iLCBTX0lSVUdPIHwgU19J
V1VTUiwKLQkJICAgc2hvd19zZWxmYmFsbG9vbl9taW5fdXNhYmxlX21iLAotCQkgICBzdG9yZV9z
ZWxmYmFsbG9vbl9taW5fdXNhYmxlX21iKTsKLQotU0VMRkJBTExPT05fU0hPVyhzZWxmYmFsbG9v
bl9yZXNlcnZlZF9tYiwgIiVkXG4iLAotCQkJCXNlbGZiYWxsb29uX3Jlc2VydmVkX21iKTsKLQot
c3RhdGljIHNzaXplX3Qgc3RvcmVfc2VsZmJhbGxvb25fcmVzZXJ2ZWRfbWIoc3RydWN0IGRldmlj
ZSAqZGV2LAotCQkJCQkgICAgIHN0cnVjdCBkZXZpY2VfYXR0cmlidXRlICphdHRyLAotCQkJCQkg
ICAgIGNvbnN0IGNoYXIgKmJ1ZiwKLQkJCQkJICAgICBzaXplX3QgY291bnQpCi17Ci0JdW5zaWdu
ZWQgbG9uZyB2YWw7Ci0JaW50IGVycjsKLQotCWlmICghY2FwYWJsZShDQVBfU1lTX0FETUlOKSkK
LQkJcmV0dXJuIC1FUEVSTTsKLQllcnIgPSBrc3RydG91bChidWYsIDEwLCAmdmFsKTsKLQlpZiAo
ZXJyKQotCQlyZXR1cm4gZXJyOwotCWlmICh2YWwgPT0gMCkKLQkJcmV0dXJuIC1FSU5WQUw7Ci0J
c2VsZmJhbGxvb25fcmVzZXJ2ZWRfbWIgPSB2YWw7Ci0JcmV0dXJuIGNvdW50OwotfQotCi1zdGF0
aWMgREVWSUNFX0FUVFIoc2VsZmJhbGxvb25fcmVzZXJ2ZWRfbWIsIFNfSVJVR08gfCBTX0lXVVNS
LAotCQkgICBzaG93X3NlbGZiYWxsb29uX3Jlc2VydmVkX21iLAotCQkgICBzdG9yZV9zZWxmYmFs
bG9vbl9yZXNlcnZlZF9tYik7Ci0KLQotI2lmZGVmIENPTkZJR19GUk9OVFNXQVAKLVNFTEZCQUxM
T09OX1NIT1coZnJvbnRzd2FwX3NlbGZzaHJpbmtpbmcsICIlZFxuIiwgZnJvbnRzd2FwX3NlbGZz
aHJpbmtpbmcpOwotCi1zdGF0aWMgc3NpemVfdCBzdG9yZV9mcm9udHN3YXBfc2VsZnNocmlua2lu
ZyhzdHJ1Y3QgZGV2aWNlICpkZXYsCi0JCQkJCSAgICAgc3RydWN0IGRldmljZV9hdHRyaWJ1dGUg
KmF0dHIsCi0JCQkJCSAgICAgY29uc3QgY2hhciAqYnVmLAotCQkJCQkgICAgIHNpemVfdCBjb3Vu
dCkKLXsKLQlib29sIHdhc19lbmFibGVkID0gZnJvbnRzd2FwX3NlbGZzaHJpbmtpbmc7Ci0JdW5z
aWduZWQgbG9uZyB0bXA7Ci0JaW50IGVycjsKLQotCWlmICghY2FwYWJsZShDQVBfU1lTX0FETUlO
KSkKLQkJcmV0dXJuIC1FUEVSTTsKLQllcnIgPSBrc3RydG91bChidWYsIDEwLCAmdG1wKTsKLQlp
ZiAoZXJyKQotCQlyZXR1cm4gZXJyOwotCWlmICgodG1wICE9IDApICYmICh0bXAgIT0gMSkpCi0J
CXJldHVybiAtRUlOVkFMOwotCWZyb250c3dhcF9zZWxmc2hyaW5raW5nID0gISF0bXA7Ci0JaWYg
KCF3YXNfZW5hYmxlZCAmJiAheGVuX3NlbGZiYWxsb29uaW5nX2VuYWJsZWQgJiYKLQkgICAgIGZy
b250c3dhcF9zZWxmc2hyaW5raW5nKQotCQlzY2hlZHVsZV9kZWxheWVkX3dvcmsoJnNlbGZiYWxs
b29uX3dvcmtlciwKLQkJCXNlbGZiYWxsb29uX2ludGVydmFsICogSFopOwotCi0JcmV0dXJuIGNv
dW50OwotfQotCi1zdGF0aWMgREVWSUNFX0FUVFIoZnJvbnRzd2FwX3NlbGZzaHJpbmtpbmcsIFNf
SVJVR08gfCBTX0lXVVNSLAotCQkgICBzaG93X2Zyb250c3dhcF9zZWxmc2hyaW5raW5nLCBzdG9y
ZV9mcm9udHN3YXBfc2VsZnNocmlua2luZyk7Ci0KLVNFTEZCQUxMT09OX1NIT1coZnJvbnRzd2Fw
X2luZXJ0aWEsICIlZFxuIiwgZnJvbnRzd2FwX2luZXJ0aWEpOwotCi1zdGF0aWMgc3NpemVfdCBz
dG9yZV9mcm9udHN3YXBfaW5lcnRpYShzdHJ1Y3QgZGV2aWNlICpkZXYsCi0JCQkJICAgICAgIHN0
cnVjdCBkZXZpY2VfYXR0cmlidXRlICphdHRyLAotCQkJCSAgICAgICBjb25zdCBjaGFyICpidWYs
Ci0JCQkJICAgICAgIHNpemVfdCBjb3VudCkKLXsKLQl1bnNpZ25lZCBsb25nIHZhbDsKLQlpbnQg
ZXJyOwotCi0JaWYgKCFjYXBhYmxlKENBUF9TWVNfQURNSU4pKQotCQlyZXR1cm4gLUVQRVJNOwot
CWVyciA9IGtzdHJ0b3VsKGJ1ZiwgMTAsICZ2YWwpOwotCWlmIChlcnIpCi0JCXJldHVybiBlcnI7
Ci0JaWYgKHZhbCA9PSAwKQotCQlyZXR1cm4gLUVJTlZBTDsKLQlmcm9udHN3YXBfaW5lcnRpYSA9
IHZhbDsKLQlmcm9udHN3YXBfaW5lcnRpYV9jb3VudGVyID0gdmFsOwotCXJldHVybiBjb3VudDsK
LX0KLQotc3RhdGljIERFVklDRV9BVFRSKGZyb250c3dhcF9pbmVydGlhLCBTX0lSVUdPIHwgU19J
V1VTUiwKLQkJICAgc2hvd19mcm9udHN3YXBfaW5lcnRpYSwgc3RvcmVfZnJvbnRzd2FwX2luZXJ0
aWEpOwotCi1TRUxGQkFMTE9PTl9TSE9XKGZyb250c3dhcF9oeXN0ZXJlc2lzLCAiJWRcbiIsIGZy
b250c3dhcF9oeXN0ZXJlc2lzKTsKLQotc3RhdGljIHNzaXplX3Qgc3RvcmVfZnJvbnRzd2FwX2h5
c3RlcmVzaXMoc3RydWN0IGRldmljZSAqZGV2LAotCQkJCQkgIHN0cnVjdCBkZXZpY2VfYXR0cmli
dXRlICphdHRyLAotCQkJCQkgIGNvbnN0IGNoYXIgKmJ1ZiwKLQkJCQkJICBzaXplX3QgY291bnQp
Ci17Ci0JdW5zaWduZWQgbG9uZyB2YWw7Ci0JaW50IGVycjsKLQotCWlmICghY2FwYWJsZShDQVBf
U1lTX0FETUlOKSkKLQkJcmV0dXJuIC1FUEVSTTsKLQllcnIgPSBrc3RydG91bChidWYsIDEwLCAm
dmFsKTsKLQlpZiAoZXJyKQotCQlyZXR1cm4gZXJyOwotCWlmICh2YWwgPT0gMCkKLQkJcmV0dXJu
IC1FSU5WQUw7Ci0JZnJvbnRzd2FwX2h5c3RlcmVzaXMgPSB2YWw7Ci0JcmV0dXJuIGNvdW50Owot
fQotCi1zdGF0aWMgREVWSUNFX0FUVFIoZnJvbnRzd2FwX2h5c3RlcmVzaXMsIFNfSVJVR08gfCBT
X0lXVVNSLAotCQkgICBzaG93X2Zyb250c3dhcF9oeXN0ZXJlc2lzLCBzdG9yZV9mcm9udHN3YXBf
aHlzdGVyZXNpcyk7Ci0KLSNlbmRpZiAvKiBDT05GSUdfRlJPTlRTV0FQICovCi0KLXN0YXRpYyBz
dHJ1Y3QgYXR0cmlidXRlICpzZWxmYmFsbG9vbl9hdHRyc1tdID0gewotCSZkZXZfYXR0cl9zZWxm
YmFsbG9vbmluZy5hdHRyLAotCSZkZXZfYXR0cl9zZWxmYmFsbG9vbl9pbnRlcnZhbC5hdHRyLAot
CSZkZXZfYXR0cl9zZWxmYmFsbG9vbl9kb3duaHlzdGVyZXNpcy5hdHRyLAotCSZkZXZfYXR0cl9z
ZWxmYmFsbG9vbl91cGh5c3RlcmVzaXMuYXR0ciwKLQkmZGV2X2F0dHJfc2VsZmJhbGxvb25fbWlu
X3VzYWJsZV9tYi5hdHRyLAotCSZkZXZfYXR0cl9zZWxmYmFsbG9vbl9yZXNlcnZlZF9tYi5hdHRy
LAotI2lmZGVmIENPTkZJR19GUk9OVFNXQVAKLQkmZGV2X2F0dHJfZnJvbnRzd2FwX3NlbGZzaHJp
bmtpbmcuYXR0ciwKLQkmZGV2X2F0dHJfZnJvbnRzd2FwX2h5c3RlcmVzaXMuYXR0ciwKLQkmZGV2
X2F0dHJfZnJvbnRzd2FwX2luZXJ0aWEuYXR0ciwKLSNlbmRpZgotCU5VTEwKLX07Ci0KLXN0YXRp
YyBjb25zdCBzdHJ1Y3QgYXR0cmlidXRlX2dyb3VwIHNlbGZiYWxsb29uX2dyb3VwID0gewotCS5u
YW1lID0gInNlbGZiYWxsb29uIiwKLQkuYXR0cnMgPSBzZWxmYmFsbG9vbl9hdHRycwotfTsKLSNl
bmRpZgotCi1pbnQgcmVnaXN0ZXJfeGVuX3NlbGZiYWxsb29uaW5nKHN0cnVjdCBkZXZpY2UgKmRl
dikKLXsKLQlpbnQgZXJyb3IgPSAtMTsKLQotI2lmZGVmIENPTkZJR19TWVNGUwotCWVycm9yID0g
c3lzZnNfY3JlYXRlX2dyb3VwKCZkZXYtPmtvYmosICZzZWxmYmFsbG9vbl9ncm91cCk7Ci0jZW5k
aWYKLQlyZXR1cm4gZXJyb3I7Ci19Ci1FWFBPUlRfU1lNQk9MKHJlZ2lzdGVyX3hlbl9zZWxmYmFs
bG9vbmluZyk7Ci0KLWludCB4ZW5fc2VsZmJhbGxvb25faW5pdChib29sIHVzZV9zZWxmYmFsbG9v
bmluZywgYm9vbCB1c2VfZnJvbnRzd2FwX3NlbGZzaHJpbmspCi17Ci0JYm9vbCBlbmFibGUgPSBm
YWxzZTsKLQl1bnNpZ25lZCBsb25nIHJlc2VydmVfcGFnZXM7Ci0KLQlpZiAoIXhlbl9kb21haW4o
KSkKLQkJcmV0dXJuIC1FTk9ERVY7Ci0KLQlpZiAoeGVuX2luaXRpYWxfZG9tYWluKCkpIHsKLQkJ
cHJfaW5mbygiWGVuIHNlbGZiYWxsb29uaW5nIGRyaXZlciBkaXNhYmxlZCBmb3IgZG9tYWluMFxu
Iik7Ci0JCXJldHVybiAtRU5PREVWOwotCX0KLQotCXhlbl9zZWxmYmFsbG9vbmluZ19lbmFibGVk
ID0gdG1lbV9lbmFibGVkICYmIHVzZV9zZWxmYmFsbG9vbmluZzsKLQlpZiAoeGVuX3NlbGZiYWxs
b29uaW5nX2VuYWJsZWQpIHsKLQkJcHJfaW5mbygiSW5pdGlhbGl6aW5nIFhlbiBzZWxmYmFsbG9v
bmluZyBkcml2ZXJcbiIpOwotCQllbmFibGUgPSB0cnVlOwotCX0KLSNpZmRlZiBDT05GSUdfRlJP
TlRTV0FQCi0JZnJvbnRzd2FwX3NlbGZzaHJpbmtpbmcgPSB0bWVtX2VuYWJsZWQgJiYgdXNlX2Zy
b250c3dhcF9zZWxmc2hyaW5rOwotCWlmIChmcm9udHN3YXBfc2VsZnNocmlua2luZykgewotCQlw
cl9pbmZvKCJJbml0aWFsaXppbmcgZnJvbnRzd2FwIHNlbGZzaHJpbmtpbmcgZHJpdmVyXG4iKTsK
LQkJZW5hYmxlID0gdHJ1ZTsKLQl9Ci0jZW5kaWYKLQlpZiAoIWVuYWJsZSkKLQkJcmV0dXJuIC1F
Tk9ERVY7Ci0KLQkvKgotCSAqIEdpdmUgc2VsZmJhbGxvb25fcmVzZXJ2ZWRfbWIgYSBkZWZhdWx0
IHZhbHVlKDEwJSBvZiB0b3RhbCByYW0gcGFnZXMpCi0JICogdG8gbWFrZSBzZWxmYmFsbG9vbiBu
b3Qgc28gYWdncmVzc2l2ZS4KLQkgKgotCSAqIFRoZXJlIGFyZSBtYWlubHkgdHdvIHJlYXNvbnM6
Ci0JICogMSkgVGhlIG9yaWdpbmFsIGdvYWxfcGFnZSBkaWRuJ3QgY29uc2lkZXIgc29tZSBwYWdl
cyB1c2VkIGJ5IGtlcm5lbAotCSAqICAgIHNwYWNlLCBsaWtlIHNsYWIgcGFnZXMgYW5kIG1lbW9y
eSB1c2VkIGJ5IGRldmljZSBkcml2ZXJzLgotCSAqCi0JICogMikgVGhlIGJhbGxvb24gZHJpdmVy
IG1heSBub3QgZ2l2ZSBiYWNrIG1lbW9yeSB0byBndWVzdCBPUyBmYXN0Ci0JICogICAgZW5vdWdo
IHdoZW4gdGhlIHdvcmtsb2FkIHN1ZGRlbmx5IGFxdXJpZXMgYSBsb3Qgb2YgcGh5c2ljYWwgbWVt
b3J5LgotCSAqCi0JICogSW4gYm90aCBjYXNlcywgdGhlIGd1ZXN0IE9TIHdpbGwgc3VmZmVyIGZy
b20gbWVtb3J5IHByZXNzdXJlIGFuZAotCSAqIE9PTSBraWxsZXIgbWF5IGJlIHRyaWdnZXJlZC4K
LQkgKiBCeSByZXNlcnZpbmcgZXh0cmEgMTAlIG9mIHRvdGFsIHJhbSBwYWdlcywgd2UgY2FuIGtl
ZXAgdGhlIHN5c3RlbQotCSAqIG11Y2ggbW9yZSByZWxpYWJseSBhbmQgcmVzcG9uc2UgZmFzdGVy
IGluIHNvbWUgY2FzZXMuCi0JICovCi0JaWYgKCFzZWxmYmFsbG9vbl9yZXNlcnZlZF9tYikgewot
CQlyZXNlcnZlX3BhZ2VzID0gdG90YWxyYW1fcGFnZXMoKSAvIDEwOwotCQlzZWxmYmFsbG9vbl9y
ZXNlcnZlZF9tYiA9IFBBR0VTMk1CKHJlc2VydmVfcGFnZXMpOwotCX0KLQlzY2hlZHVsZV9kZWxh
eWVkX3dvcmsoJnNlbGZiYWxsb29uX3dvcmtlciwgc2VsZmJhbGxvb25faW50ZXJ2YWwgKiBIWik7
Ci0KLQlyZXR1cm4gMDsKLX0KLUVYUE9SVF9TWU1CT0woeGVuX3NlbGZiYWxsb29uX2luaXQpOwpk
aWZmIC0tZ2l0IGEvaW5jbHVkZS94ZW4vYmFsbG9vbi5oIGIvaW5jbHVkZS94ZW4vYmFsbG9vbi5o
CmluZGV4IDQ5MTRiOTNhMjNmMi4uYTcyZWYzZjg4YjM5IDEwMDY0NAotLS0gYS9pbmNsdWRlL3hl
bi9iYWxsb29uLmgKKysrIGIvaW5jbHVkZS94ZW4vYmFsbG9vbi5oCkBAIC0yOCwxNCArMjgsNiBA
QCBpbnQgYWxsb2NfeGVuYmFsbG9vbmVkX3BhZ2VzKGludCBucl9wYWdlcywgc3RydWN0IHBhZ2Ug
KipwYWdlcyk7CiB2b2lkIGZyZWVfeGVuYmFsbG9vbmVkX3BhZ2VzKGludCBucl9wYWdlcywgc3Ry
dWN0IHBhZ2UgKipwYWdlcyk7CiAKIHN0cnVjdCBkZXZpY2U7Ci0jaWZkZWYgQ09ORklHX1hFTl9T
RUxGQkFMTE9PTklORwotZXh0ZXJuIGludCByZWdpc3Rlcl94ZW5fc2VsZmJhbGxvb25pbmcoc3Ry
dWN0IGRldmljZSAqZGV2KTsKLSNlbHNlCi1zdGF0aWMgaW5saW5lIGludCByZWdpc3Rlcl94ZW5f
c2VsZmJhbGxvb25pbmcoc3RydWN0IGRldmljZSAqZGV2KQotewotCXJldHVybiAtRU5PU1lTOwot
fQotI2VuZGlmCiAKICNpZmRlZiBDT05GSUdfWEVOX0JBTExPT04KIHZvaWQgeGVuX2JhbGxvb25f
aW5pdCh2b2lkKTsKZGlmZiAtLWdpdCBhL2luY2x1ZGUveGVuL3RtZW0uaCBiL2luY2x1ZGUveGVu
L3RtZW0uaApkZWxldGVkIGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggYzgwYmFmZTMxZjE0Li4wMDAw
MDAwMDAwMDAKLS0tIGEvaW5jbHVkZS94ZW4vdG1lbS5oCisrKyAvZGV2L251bGwKQEAgLTEsMTgg
KzAsMCBAQAotLyogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAgKi8KLSNpZm5kZWYg
X1hFTl9UTUVNX0gKLSNkZWZpbmUgX1hFTl9UTUVNX0gKLQotI2luY2x1ZGUgPGxpbnV4L3R5cGVz
Lmg+Ci0KLSNpZmRlZiBDT05GSUdfWEVOX1RNRU1fTU9EVUxFCi0jZGVmaW5lIHRtZW1fZW5hYmxl
ZCB0cnVlCi0jZWxzZQotLyogZGVmaW5lZCBpbiBkcml2ZXJzL3hlbi90bWVtLmMgKi8KLWV4dGVy
biBib29sIHRtZW1fZW5hYmxlZDsKLSNlbmRpZgotCi0jaWZkZWYgQ09ORklHX1hFTl9TRUxGQkFM
TE9PTklORwotZXh0ZXJuIGludCB4ZW5fc2VsZmJhbGxvb25faW5pdChib29sLCBib29sKTsKLSNl
bmRpZgotCi0jZW5kaWYgLyogX1hFTl9UTUVNX0ggKi8KLS0gCjIuMTYuNAoKCl9fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fClhlbi1kZXZlbCBtYWlsaW5nIGxp
c3QKWGVuLWRldmVsQGxpc3RzLnhlbnByb2plY3Qub3JnCmh0dHBzOi8vbGlzdHMueGVucHJvamVj
dC5vcmcvbWFpbG1hbi9saXN0aW5mby94ZW4tZGV2ZWw=

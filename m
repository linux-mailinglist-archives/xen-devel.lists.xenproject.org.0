Return-Path: <xen-devel-bounces@lists.xenproject.org>
X-Original-To: lists+xen-devel@lfdr.de
Delivered-To: lists+xen-devel@lfdr.de
Received: from lists.xenproject.org (lists.xenproject.org [192.237.175.120])
	by mail.lfdr.de (Postfix) with ESMTPS id 29CADBF46D
	for <lists+xen-devel@lfdr.de>; Thu, 26 Sep 2019 15:52:12 +0200 (CEST)
Received: from localhost ([127.0.0.1] helo=lists.xenproject.org)
	by lists.xenproject.org with esmtp (Exim 4.89)
	(envelope-from <xen-devel-bounces@lists.xenproject.org>)
	id 1iDU9q-0002ky-ST; Thu, 26 Sep 2019 13:50:10 +0000
Received: from us1-rack-iad1.inumbo.com ([172.99.69.81])
 by lists.xenproject.org with esmtp (Exim 4.89) (envelope-from
 <SRS0=njQ1=XV=intel.com=chao.gao@srs-us1.protection.inumbo.net>)
 id 1iDU9q-0002kZ-8m
 for xen-devel@lists.xenproject.org; Thu, 26 Sep 2019 13:50:10 +0000
X-Inumbo-ID: 846ce508-e064-11e9-8628-bc764e2007e4
Received: from mga04.intel.com (unknown [192.55.52.120])
 by localhost (Halon) with ESMTPS
 id 846ce508-e064-11e9-8628-bc764e2007e4;
 Thu, 26 Sep 2019 13:49:53 +0000 (UTC)
X-Amp-Result: SKIPPED(no attachment in message)
X-Amp-File-Uploaded: False
Received: from fmsmga008.fm.intel.com ([10.253.24.58])
 by fmsmga104.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384;
 26 Sep 2019 06:49:53 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.64,552,1559545200"; d="scan'208";a="189126069"
Received: from gao-cwp.sh.intel.com ([10.239.159.26])
 by fmsmga008.fm.intel.com with ESMTP; 26 Sep 2019 06:49:50 -0700
From: Chao Gao <chao.gao@intel.com>
To: xen-devel@lists.xenproject.org
Date: Thu, 26 Sep 2019 21:53:34 +0800
Message-Id: <1569506015-26938-7-git-send-email-chao.gao@intel.com>
X-Mailer: git-send-email 1.9.1
In-Reply-To: <1569506015-26938-1-git-send-email-chao.gao@intel.com>
References: <1569506015-26938-1-git-send-email-chao.gao@intel.com>
Subject: [Xen-devel] [PATCH v11 6/7] microcode: rendezvous CPUs in NMI
 handler and load ucode
X-BeenThere: xen-devel@lists.xenproject.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Xen developer discussion <xen-devel.lists.xenproject.org>
List-Unsubscribe: <https://lists.xenproject.org/mailman/options/xen-devel>,
 <mailto:xen-devel-request@lists.xenproject.org?subject=unsubscribe>
List-Post: <mailto:xen-devel@lists.xenproject.org>
List-Help: <mailto:xen-devel-request@lists.xenproject.org?subject=help>
List-Subscribe: <https://lists.xenproject.org/mailman/listinfo/xen-devel>,
 <mailto:xen-devel-request@lists.xenproject.org?subject=subscribe>
Cc: Sergey Dyasli <sergey.dyasli@citrix.com>,
 Stefano Stabellini <sstabellini@kernel.org>, Ashok Raj <ashok.raj@intel.com>,
 Wei Liu <wl@xen.org>, Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>,
 George Dunlap <George.Dunlap@eu.citrix.com>,
 Ian Jackson <ian.jackson@eu.citrix.com>, Tim Deegan <tim@xen.org>,
 Julien Grall <julien.grall@arm.com>, Jan Beulich <jbeulich@suse.com>,
 Andrew Cooper <andrew.cooper3@citrix.com>, Chao Gao <chao.gao@intel.com>,
 =?UTF-8?q?Roger=20Pau=20Monn=C3=A9?= <roger.pau@citrix.com>
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: xen-devel-bounces@lists.xenproject.org
Sender: "Xen-devel" <xen-devel-bounces@lists.xenproject.org>

V2hlbiBvbmUgY29yZSBpcyBsb2FkaW5nIHVjb2RlLCBoYW5kbGluZyBOTUkgb24gc2libGluZyB0
aHJlYWRzIG9yCm9uIG90aGVyIGNvcmVzIGluIHRoZSBzeXN0ZW0gbWlnaHQgYmUgcHJvYmxlbWF0
aWMuIEJ5IHJlbmRlenZvdXNpbmcKYWxsIENQVXMgaW4gTk1JIGhhbmRsZXIsIGl0IHByZXZlbnRz
IE5NSSBhY2NlcHRhbmNlIGR1cmluZyB1Y29kZQpsb2FkaW5nLgoKQmFzaWNhbGx5LCBzb21lIHdv
cmsgcHJldmlvdXNseSBkb25lIGluIHN0b3BfbWFjaGluZSBjb250ZXh0IGlzCm1vdmVkIHRvIE5N
SSBoYW5kbGVyLiBQcmltYXJ5IHRocmVhZHMgY2FsbCBpbiBhbmQgbG9hZCB1Y29kZSBpbgpOTUkg
aGFuZGxlci4gU2Vjb25kYXJ5IHRocmVhZHMgd2FpdCBmb3IgdGhlIGNvbXBsZXRpb24gb2YgdWNv
ZGUKbG9hZGluZyBvbiBhbGwgQ1BVIGNvcmVzLiBBbiBvcHRpb24gaXMgaW50cm9kdWNlZCB0byBk
aXNhYmxlIHRoaXMKYmVoYXZpb3IuCgpDb250cm9sIHRocmVhZCBkb2Vzbid0IHJlbmRlenZvdXMg
aW4gTk1JIGhhbmRsZXIgYnkgY2FsbGluZyBzZWxmX25taSgpCihpbiBjYXNlIG9mIHVua25vd25f
bm1pX2Vycm9yKCkgYmVpbmcgdHJpZ2dlcmVkKS4gVGhlIHNpZGUgZWZmZWN0IGlzCmNvbnRyb2wg
dGhyZWFkIG1pZ2h0IGJlIGhhbmRsaW5nIGFuIE5NSSBhbmQgaW50ZXJhY3Rpbmcgd2l0aCB0aGUg
b2xkCnVjb2RlIG5vdCBpbiBhIGNvbnRyb2xsZWQgd2F5IHdoaWxlIG90aGVyIHRocmVhZHMgYXJl
IGxvYWRpbmcgdWNvZGUuClVwZGF0ZSB1Y29kZSBvbiB0aGUgY29udHJvbCB0aHJlYWQgZmlyc3Qg
dG8gbWl0aWdhdGUgdGhpcyBpc3N1ZS4KClNpZ25lZC1vZmYtYnk6IFNlcmdleSBEeWFzbGkgPHNl
cmdleS5keWFzbGlAY2l0cml4LmNvbT4KU2lnbmVkLW9mZi1ieTogQ2hhbyBHYW8gPGNoYW8uZ2Fv
QGludGVsLmNvbT4KLS0tCkNoYW5nZXMgaW4gdjExOgogLSBFeHRlbmQgZXhpc3RpbmcgJ25taScg
b3B0aW9uIHJhdGhlciB0aGFuIHVzZSBhIG5ldyBvbmUuCiAtIHVzZSBwZXItY3B1IHZhcmlhYmxl
IHRvIHN0b3JlIGVycm9yIGNvZGUgb2YgeHh4X25taV93b3JrKCkKIC0gcmVuYW1lIHNlY29uZGFy
eV90aHJlYWRfd29yayB0byBzZWNvbmRhcnlfbm1pX3dvcmsuCiAtIGludGlhbGl6ZSBubWlfcGF0
Y2ggdG8gWkVST19CTE9DS19QVFIgYW5kIG1ha2UgaXQgc3RhdGljLgogLSBjb25zdGlmeSBubWlf
Y3B1CiAtIGV4cGxhaW4gd2h5IGNvbnRyb2wgdGhyZWFkIGxvYWRzIHVjb2RlIGZpcnN0IGluIHBh
dGNoIGRlc2NyaXB0aW9uCgpDaGFuZ2VzIGluIHYxMDoKIC0gcmV3cml0ZSBiYXNlZCBvbiBTZXJn
ZXkncyBpZGVhIGFuZCBwYXRjaAogLSBhZGQgU2VyZ2V5J3MgU09CLgogLSBhZGQgYW4gb3B0aW9u
IHRvIGRpc2FibGUgdWNvZGUgbG9hZGluZyBpbiBOTUkgaGFuZGxlcgogLSBkb24ndCBzZW5kIElQ
SSBOTUkgdG8gdGhlIGNvbnRyb2wgdGhyZWFkIHRvIGF2b2lkIHVua25vd25fbm1pX2Vycm9yKCkK
IGluIGRvX25taSgpLgogLSBhZGQgYW4gYXNzZXJ0aW9uIHRvIG1ha2Ugc3VyZSB0aGUgY3B1IGNo
b3NlbiB0byBoYW5kbGUgcGxhdGZvcm0gTk1JCiB3b24ndCBzZW5kIHNlbGYgTk1JLiBPdGhlcndp
c2UsIHRoZXJlIGlzIGEgcmlzayB0aGF0IHdlIGVuY291bnRlcgogdW5rbm93bl9ubWlfZXJyb3Io
KSBhbmQgc3lzdGVtIGNyYXNoZXMuCgpDaGFuZ2VzIGluIHY5OgogLSBjb250cm9sIHRocmVhZHMg
c2VuZCBOTUkgdG8gYWxsIG90aGVyIHRocmVhZHMuIFNsYXZlIHRocmVhZHMgd2lsbAogc3RheSBp
biB0aGUgTk1JIGhhbmRsaW5nIHRvIHByZXZlbnQgTk1JIGFjY2VwdGFuY2UgZHVyaW5nIHVjb2Rl
CiBsb2FkaW5nLiBOb3RlIHRoYXQgc2VsZi1ubWkgaXMgaW52YWxpZCBhY2NvcmRpbmcgdG8gU0RN
LgogLSBzL3JlcF9ub3AvY3B1X3JlbGF4CiAtIHJlbW92ZSBkZWJ1ZyBtZXNzYWdlIGluIG1pY3Jv
Y29kZV9ubWlfY2FsbGJhY2soKS4gUHJpbnRpbmcgZGVidWcKIG1lc3NhZ2Ugd291bGQgdGFrZSBs
b25nIHRpbWVzIGFuZCBjb250cm9sIHRocmVhZCBtYXkgdGltZW91dC4KIC0gcmViYXNlIGFuZCBm
aXggY29uZmxpY3RzCgpDaGFuZ2VzIGluIHY4OgogLSBuZXcKLS0tCiBkb2NzL21pc2MveGVuLWNv
bW1hbmQtbGluZS5wYW5kb2MgfCAgIDYgKy0KIHhlbi9hcmNoL3g4Ni9taWNyb2NvZGUuYyAgICAg
ICAgICB8IDE1NiArKysrKysrKysrKysrKysrKysrKysrKysrKysrKystLS0tLS0tLQogeGVuL2Fy
Y2gveDg2L3RyYXBzLmMgICAgICAgICAgICAgIHwgICA2ICstCiB4ZW4vaW5jbHVkZS9hc20teDg2
L25taS5oICAgICAgICAgfCAgIDMgKwogNCBmaWxlcyBjaGFuZ2VkLCAxMzggaW5zZXJ0aW9ucygr
KSwgMzMgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvZG9jcy9taXNjL3hlbi1jb21tYW5kLWxp
bmUucGFuZG9jIGIvZG9jcy9taXNjL3hlbi1jb21tYW5kLWxpbmUucGFuZG9jCmluZGV4IDgzMjc5
N2UuLjhiZWIyODUgMTAwNjQ0Ci0tLSBhL2RvY3MvbWlzYy94ZW4tY29tbWFuZC1saW5lLnBhbmRv
YworKysgYi9kb2NzL21pc2MveGVuLWNvbW1hbmQtbGluZS5wYW5kb2MKQEAgLTIwMzYsNyArMjAz
Niw3IEBAIHBhZ2VzKSBtdXN0IGFsc28gYmUgc3BlY2lmaWVkIHZpYSB0aGUgdGJ1Zl9zaXplIHBh
cmFtZXRlci4KID4gYD0gdW5zdGFibGUgfCBza2V3ZWQgfCBzdGFibGU6c29ja2V0YAogCiAjIyMg
dWNvZGUgKHg4NikKLT4gYD0gWzxpbnRlZ2VyPiB8IHNjYW5dYAorPiBgPSBMaXN0IG9mIFsgPGlu
dGVnZXI+IHwgc2Nhbiwgbm1pPTxib29sPiBdYAogCiBTcGVjaWZ5IGhvdyBhbmQgd2hlcmUgdG8g
ZmluZCBDUFUgbWljcm9jb2RlIHVwZGF0ZSBibG9iLgogCkBAIC0yMDU3LDYgKzIwNTcsMTAgQEAg
bWljcm9jb2RlIGluIHRoZSBjcGlvIG5hbWUgc3BhY2UgbXVzdCBiZToKICAgLSBvbiBJbnRlbDog
a2VybmVsL3g4Ni9taWNyb2NvZGUvR2VudWluZUludGVsLmJpbgogICAtIG9uIEFNRCAgOiBrZXJu
ZWwveDg2L21pY3JvY29kZS9BdXRoZW50aWNBTUQuYmluCiAKKydubWknIGRldGVybWluZXMgbGF0
ZSBsb2FkaW5nIGlzIHBlcmZvcm1lZCBpbiBOTUkgaGFuZGxlciBvciBqdXN0IGluCitzdG9wX21h
Y2hpbmUgY29udGV4dC4gSW4gTk1JIGhhbmRsZXIsIGV2ZW4gTk1JcyBhcmUgYmxvY2tlZCwgd2hp
Y2ggaXMKK2NvbnNpZGVyZWQgc2FmZXIuIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC4KKwog
IyMjIHVucmVzdHJpY3RlZF9ndWVzdCAoSW50ZWwpCiA+IGA9IDxib29sZWFuPmAKIApkaWZmIC0t
Z2l0IGEveGVuL2FyY2gveDg2L21pY3JvY29kZS5jIGIveGVuL2FyY2gveDg2L21pY3JvY29kZS5j
CmluZGV4IDZjMjM4NzkuLmI5ZmE4YmIgMTAwNjQ0Ci0tLSBhL3hlbi9hcmNoL3g4Ni9taWNyb2Nv
ZGUuYworKysgYi94ZW4vYXJjaC94ODYvbWljcm9jb2RlLmMKQEAgLTM2LDggKzM2LDEwIEBACiAj
aW5jbHVkZSA8eGVuL2Vhcmx5Y3Bpby5oPgogI2luY2x1ZGUgPHhlbi93YXRjaGRvZy5oPgogCisj
aW5jbHVkZSA8YXNtL2FwaWMuaD4KICNpbmNsdWRlIDxhc20vZGVsYXkuaD4KICNpbmNsdWRlIDxh
c20vbXNyLmg+CisjaW5jbHVkZSA8YXNtL25taS5oPgogI2luY2x1ZGUgPGFzbS9wcm9jZXNzb3Iu
aD4KICNpbmNsdWRlIDxhc20vc2V0dXAuaD4KICNpbmNsdWRlIDxhc20vbWljcm9jb2RlLmg+CkBA
IC05NSw2ICs5Nyw5IEBAIHN0YXRpYyBzdHJ1Y3QgdWNvZGVfbW9kX2Jsb2IgX19pbml0ZGF0YSB1
Y29kZV9ibG9iOwogICovCiBzdGF0aWMgYm9vbF90IF9faW5pdGRhdGEgdWNvZGVfc2NhbjsKIAor
LyogQnkgZGVmYXVsdCwgdWNvZGUgbG9hZGluZyBpcyBkb25lIGluIE5NSSBoYW5kbGVyICovCitz
dGF0aWMgYm9vbCB1Y29kZV9pbl9ubWkgPSB0cnVlOworCiAvKiBQcm90ZWN0ZWQgYnkgbWljcm9j
b2RlX211dGV4ICovCiBzdGF0aWMgc3RydWN0IG1pY3JvY29kZV9wYXRjaCAqbWljcm9jb2RlX2Nh
Y2hlOwogCkBAIC0xMDUsMjMgKzExMCw0MiBAQCB2b2lkIF9faW5pdCBtaWNyb2NvZGVfc2V0X21v
ZHVsZSh1bnNpZ25lZCBpbnQgaWR4KQogfQogCiAvKgotICogVGhlIGZvcm1hdCBpcyAnWzxpbnRl
Z2VyPnxzY2FuXScuIEJvdGggb3B0aW9ucyBhcmUgb3B0aW9uYWwuCisgKiBUaGUgZm9ybWF0IGlz
ICdbPGludGVnZXI+fHNjYW4sIG5taT08Ym9vbD5dJy4gQm90aCBvcHRpb25zIGFyZSBvcHRpb25h
bC4KICAqIElmIHRoZSBFRkkgaGFzIGZvcmNlZCB3aGljaCBvZiB0aGUgbXVsdGlib290IHBheWxv
YWRzIGlzIHRvIGJlIHVzZWQsCi0gKiBubyBwYXJzaW5nIHdpbGwgYmUgYXR0ZW1wdGVkLgorICog
b25seSBubWk9PGJvb2w+IGlzIHBhcnNlZC4KICAqLwogc3RhdGljIGludCBfX2luaXQgcGFyc2Vf
dWNvZGUoY29uc3QgY2hhciAqcykKIHsKLSAgICBjb25zdCBjaGFyICpxID0gTlVMTDsKKyAgICBj
b25zdCBjaGFyICpzczsKKyAgICBpbnQgdmFsLCByYyA9IDA7CiAKLSAgICBpZiAoIHVjb2RlX21v
ZF9mb3JjZWQgKSAvKiBGb3JjZWQgYnkgRUZJICovCi0gICAgICAgcmV0dXJuIDA7CisgICAgZG8g
eworICAgICAgICBzcyA9IHN0cmNocihzLCAnLCcpOworICAgICAgICBpZiAoICFzcyApCisgICAg
ICAgICAgICBzcyA9IHN0cmNocihzLCAnXDAnKTsKIAotICAgIGlmICggIXN0cm5jbXAocywgInNj
YW4iLCA0KSApCi0gICAgICAgIHVjb2RlX3NjYW4gPSAxOwotICAgIGVsc2UKLSAgICAgICAgdWNv
ZGVfbW9kX2lkeCA9IHNpbXBsZV9zdHJ0b2wocywgJnEsIDApOworICAgICAgICBpZiAoICh2YWwg
PSBwYXJzZV9ib29sZWFuKCJubWkiLCBzLCBzcykpID49IDAgKQorICAgICAgICAgICAgdWNvZGVf
aW5fbm1pID0gdmFsOworICAgICAgICBlbHNlIGlmICggIXVjb2RlX21vZF9mb3JjZWQgKSAvKiBO
b3QgZm9yY2VkIGJ5IEVGSSAqLworICAgICAgICB7CisgICAgICAgICAgICBjb25zdCBjaGFyICpx
ID0gTlVMTDsKKworICAgICAgICAgICAgaWYgKCAhc3RybmNtcChzLCAic2NhbiIsIDQpICkKKyAg
ICAgICAgICAgIHsKKyAgICAgICAgICAgICAgICB1Y29kZV9zY2FuID0gdHJ1ZTsKKyAgICAgICAg
ICAgICAgICBxID0gcyArIDQ7CisgICAgICAgICAgICB9CisgICAgICAgICAgICBlbHNlCisgICAg
ICAgICAgICAgICAgdWNvZGVfbW9kX2lkeCA9IHNpbXBsZV9zdHJ0b2wocywgJnEsIDApOworCisg
ICAgICAgICAgICBpZiAoIHEgIT0gc3MgKQorICAgICAgICAgICAgICAgIHJjID0gLUVJTlZBTDsK
KyAgICAgICAgfQorCisgICAgICAgIHMgPSBzcyArIDE7CisgICAgfSB3aGlsZSAoICpzcyApOwog
Ci0gICAgcmV0dXJuIChxICYmICpxKSA/IC1FSU5WQUwgOiAwOworICAgIHJldHVybiByYzsKIH0K
IGN1c3RvbV9wYXJhbSgidWNvZGUiLCBwYXJzZV91Y29kZSk7CiAKQEAgLTIyMiw2ICsyNDYsOCBA
QCBjb25zdCBzdHJ1Y3QgbWljcm9jb2RlX29wcyAqbWljcm9jb2RlX29wczsKIHN0YXRpYyBERUZJ
TkVfU1BJTkxPQ0sobWljcm9jb2RlX211dGV4KTsKIAogREVGSU5FX1BFUl9DUFUoc3RydWN0IGNw
dV9zaWduYXR1cmUsIGNwdV9zaWcpOworLyogU3RvcmUgZXJyb3IgY29kZSBvZiB0aGUgd29yayBk
b25lIGluIE5NSSBoYW5kbGVyICovCitERUZJTkVfUEVSX0NQVShpbnQsIGxvYWRpbmdfZXJyKTsK
IAogLyoKICAqIENvdW50IHRoZSBDUFVzIHRoYXQgaGF2ZSBlbnRlcmVkLCBleGl0ZWQgdGhlIHJl
bmRlenZvdXMgYW5kIHN1Y2NlZWRlZCBpbgpAQCAtMjMyLDYgKzI1OCw3IEBAIERFRklORV9QRVJf
Q1BVKHN0cnVjdCBjcHVfc2lnbmF0dXJlLCBjcHVfc2lnKTsKICAqLwogc3RhdGljIGNwdW1hc2tf
dCBjcHVfY2FsbGluX21hcDsKIHN0YXRpYyBhdG9taWNfdCBjcHVfb3V0LCBjcHVfdXBkYXRlZDsK
K3N0YXRpYyBjb25zdCBzdHJ1Y3QgbWljcm9jb2RlX3BhdGNoICpubWlfcGF0Y2ggPSBaRVJPX0JM
T0NLX1BUUjsKIAogLyoKICAqIFJldHVybiBhIHBhdGNoIHRoYXQgY292ZXJzIGN1cnJlbnQgQ1BV
LiBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgcGF0Y2hlcywKQEAgLTM1Niw0MiArMzgzLDg4IEBAIHN0
YXRpYyB2b2lkIHNldF9zdGF0ZSh1bnNpZ25lZCBpbnQgc3RhdGUpCiAgICAgc21wX3dtYigpOwog
fQogCi1zdGF0aWMgaW50IHNlY29uZGFyeV90aHJlYWRfZm4odm9pZCkKK3N0YXRpYyBpbnQgc2Vj
b25kYXJ5X25taV93b3JrKHZvaWQpCiB7Ci0gICAgdW5zaWduZWQgaW50IHByaW1hcnkgPSBjcHVt
YXNrX2ZpcnN0KHRoaXNfY3B1KGNwdV9zaWJsaW5nX21hc2spKTsKKyAgICBjcHVtYXNrX3NldF9j
cHUoc21wX3Byb2Nlc3Nvcl9pZCgpLCAmY3B1X2NhbGxpbl9tYXApOwogCi0gICAgaWYgKCAhd2Fp
dF9mb3Jfc3RhdGUoTE9BRElOR19DQUxMSU4pICkKLSAgICAgICAgcmV0dXJuIC1FQlVTWTsKKyAg
ICByZXR1cm4gd2FpdF9mb3Jfc3RhdGUoTE9BRElOR19FWElUKSA/IDAgOiAtRUJVU1k7Cit9CisK
K3N0YXRpYyBpbnQgcHJpbWFyeV90aHJlYWRfd29yayhjb25zdCBzdHJ1Y3QgbWljcm9jb2RlX3Bh
dGNoICpwYXRjaCkKK3sKKyAgICBpbnQgcmV0OwogCiAgICAgY3B1bWFza19zZXRfY3B1KHNtcF9w
cm9jZXNzb3JfaWQoKSwgJmNwdV9jYWxsaW5fbWFwKTsKIAotICAgIGlmICggIXdhaXRfZm9yX3N0
YXRlKExPQURJTkdfRVhJVCkgKQorICAgIGlmICggIXdhaXRfZm9yX3N0YXRlKExPQURJTkdfRU5U
RVIpICkKICAgICAgICAgcmV0dXJuIC1FQlVTWTsKIAotICAgIC8qIENvcHkgdXBkYXRlIHJldmlz
aW9uIGZyb20gdGhlIHByaW1hcnkgdGhyZWFkLiAqLwotICAgIHRoaXNfY3B1KGNwdV9zaWcpLnJl
diA9IHBlcl9jcHUoY3B1X3NpZywgcHJpbWFyeSkucmV2OworICAgIHJldCA9IG1pY3JvY29kZV9v
cHMtPmFwcGx5X21pY3JvY29kZShwYXRjaCk7CisgICAgaWYgKCAhcmV0ICkKKyAgICAgICAgYXRv
bWljX2luYygmY3B1X3VwZGF0ZWQpOworICAgIGF0b21pY19pbmMoJmNwdV9vdXQpOwogCi0gICAg
cmV0dXJuIDA7CisgICAgcmV0dXJuIHJldDsKIH0KIAotc3RhdGljIGludCBwcmltYXJ5X3RocmVh
ZF9mbihjb25zdCBzdHJ1Y3QgbWljcm9jb2RlX3BhdGNoICpwYXRjaCkKK3N0YXRpYyBpbnQgcHJp
bWFyeV9ubWlfd29yayhjb25zdCBzdHJ1Y3QgbWljcm9jb2RlX3BhdGNoICpwYXRjaCkKK3sKKyAg
ICByZXR1cm4gcHJpbWFyeV90aHJlYWRfd29yayhwYXRjaCk7Cit9CisKK3N0YXRpYyBpbnQgbWlj
cm9jb2RlX25taV9jYWxsYmFjayhjb25zdCBzdHJ1Y3QgY3B1X3VzZXJfcmVncyAqcmVncywgaW50
IGNwdSkKIHsKLSAgICBpbnQgcmV0ID0gMDsKKyAgICB1bnNpZ25lZCBpbnQgcHJpbWFyeSA9IGNw
dW1hc2tfZmlyc3QodGhpc19jcHUoY3B1X3NpYmxpbmdfbWFzaykpOworICAgIGludCByZXQ7CisK
KyAgICAvKiBTeXN0ZW0tZ2VuZXJhdGVkIE5NSSwgbGVhdmUgdG8gbWFpbiBoYW5kbGVyICovCisg
ICAgaWYgKCBBQ0NFU1NfT05DRShsb2FkaW5nX3N0YXRlKSAhPSBMT0FESU5HX0NBTExJTiApCisg
ICAgICAgIHJldHVybiAwOworCisgICAgLyoKKyAgICAgKiBQcmltYXJ5IHRocmVhZHMgbG9hZCB1
Y29kZSBpbiBOTUkgaGFuZGxlciBvbiBpZiB1Y29kZV9pbl9ubWkgaXMgdHJ1ZS4KKyAgICAgKiBT
ZWNvbmRhcnkgdGhyZWFkcyBhcmUgZXhwZWN0ZWQgdG8gc3RheSBpbiBOTUkgaGFuZGxlciByZWdh
cmRsZXNzIG9mCisgICAgICogdWNvZGVfaW5fbm1pLgorICAgICAqLworICAgIGlmICggY3B1ID09
IGNwdW1hc2tfZmlyc3QoJmNwdV9vbmxpbmVfbWFwKSB8fAorICAgICAgICAgKCF1Y29kZV9pbl9u
bWkgJiYgY3B1ID09IHByaW1hcnkpICkKKyAgICAgICAgcmV0dXJuIDA7CisKKyAgICBpZiAoIGNw
dSA9PSBwcmltYXJ5ICkKKyAgICAgICAgcmV0ID0gcHJpbWFyeV9ubWlfd29yayhubWlfcGF0Y2gp
OworICAgIGVsc2UKKyAgICAgICAgcmV0ID0gc2Vjb25kYXJ5X25taV93b3JrKCk7CisgICAgdGhp
c19jcHUobG9hZGluZ19lcnIpID0gcmV0OworCisgICAgcmV0dXJuIDA7Cit9CiAKK3N0YXRpYyBp
bnQgc2Vjb25kYXJ5X3RocmVhZF9mbih2b2lkKQorewogICAgIGlmICggIXdhaXRfZm9yX3N0YXRl
KExPQURJTkdfQ0FMTElOKSApCiAgICAgICAgIHJldHVybiAtRUJVU1k7CiAKLSAgICBjcHVtYXNr
X3NldF9jcHUoc21wX3Byb2Nlc3Nvcl9pZCgpLCAmY3B1X2NhbGxpbl9tYXApOworICAgIHNlbGZf
bm1pKCk7CiAKLSAgICBpZiAoICF3YWl0X2Zvcl9zdGF0ZShMT0FESU5HX0VOVEVSKSApCisgICAg
LyogQ29weSB1cGRhdGUgcmV2aXNpb24gZnJvbSB0aGUgcHJpbWFyeSB0aHJlYWQuICovCisgICAg
dGhpc19jcHUoY3B1X3NpZykucmV2ID0KKyAgICAgICAgcGVyX2NwdShjcHVfc2lnLCBjcHVtYXNr
X2ZpcnN0KHRoaXNfY3B1KGNwdV9zaWJsaW5nX21hc2spKSkucmV2OworCisgICAgcmV0dXJuIHRo
aXNfY3B1KGxvYWRpbmdfZXJyKTsKK30KKworc3RhdGljIGludCBwcmltYXJ5X3RocmVhZF9mbihj
b25zdCBzdHJ1Y3QgbWljcm9jb2RlX3BhdGNoICpwYXRjaCkKK3sKKyAgICBpZiAoICF3YWl0X2Zv
cl9zdGF0ZShMT0FESU5HX0NBTExJTikgKQogICAgICAgICByZXR1cm4gLUVCVVNZOwogCi0gICAg
cmV0ID0gbWljcm9jb2RlX29wcy0+YXBwbHlfbWljcm9jb2RlKHBhdGNoKTsKLSAgICBpZiAoICFy
ZXQgKQotICAgICAgICBhdG9taWNfaW5jKCZjcHVfdXBkYXRlZCk7Ci0gICAgYXRvbWljX2luYygm
Y3B1X291dCk7CisgICAgaWYgKCB1Y29kZV9pbl9ubWkgKQorICAgIHsKKyAgICAgICAgc2VsZl9u
bWkoKTsKKyAgICAgICAgcmV0dXJuIHRoaXNfY3B1KGxvYWRpbmdfZXJyKTsKKyAgICB9CiAKLSAg
ICByZXR1cm4gcmV0OworICAgIHJldHVybiBwcmltYXJ5X3RocmVhZF93b3JrKHBhdGNoKTsKIH0K
IAogc3RhdGljIGludCBjb250cm9sX3RocmVhZF9mbihjb25zdCBzdHJ1Y3QgbWljcm9jb2RlX3Bh
dGNoICpwYXRjaCkKQEAgLTM5OSw2ICs0NzIsNyBAQCBzdGF0aWMgaW50IGNvbnRyb2xfdGhyZWFk
X2ZuKGNvbnN0IHN0cnVjdCBtaWNyb2NvZGVfcGF0Y2ggKnBhdGNoKQogICAgIHVuc2lnbmVkIGlu
dCBjcHUgPSBzbXBfcHJvY2Vzc29yX2lkKCksIGRvbmU7CiAgICAgdW5zaWduZWQgbG9uZyB0aWNr
OwogICAgIGludCByZXQ7CisgICAgbm1pX2NhbGxiYWNrX3QgKnNhdmVkX25taV9jYWxsYmFjazsK
IAogICAgIC8qCiAgICAgICogV2UgaW50ZW5kIHRvIGtlZXAgaW50ZXJydXB0IGRpc2FibGVkIGZv
ciBhIGxvbmcgdGltZSwgd2hpY2ggbWF5IGxlYWQgdG8KQEAgLTQwNiw2ICs0ODAsMTAgQEAgc3Rh
dGljIGludCBjb250cm9sX3RocmVhZF9mbihjb25zdCBzdHJ1Y3QgbWljcm9jb2RlX3BhdGNoICpw
YXRjaCkKICAgICAgKi8KICAgICB3YXRjaGRvZ19kaXNhYmxlKCk7CiAKKyAgICBubWlfcGF0Y2gg
PSBwYXRjaDsKKyAgICBzbXBfd21iKCk7CisgICAgc2F2ZWRfbm1pX2NhbGxiYWNrID0gc2V0X25t
aV9jYWxsYmFjayhtaWNyb2NvZGVfbm1pX2NhbGxiYWNrKTsKKwogICAgIC8qIEFsbG93IHRocmVh
ZHMgdG8gY2FsbCBpbiAqLwogICAgIHNldF9zdGF0ZShMT0FESU5HX0NBTExJTik7CiAKQEAgLTQy
MCwxNCArNDk4LDIzIEBAIHN0YXRpYyBpbnQgY29udHJvbF90aHJlYWRfZm4oY29uc3Qgc3RydWN0
IG1pY3JvY29kZV9wYXRjaCAqcGF0Y2gpCiAgICAgICAgIHJldHVybiByZXQ7CiAgICAgfQogCi0g
ICAgLyogTGV0IHByaW1hcnkgdGhyZWFkcyBsb2FkIHRoZSBnaXZlbiB1Y29kZSB1cGRhdGUgKi8K
LSAgICBzZXRfc3RhdGUoTE9BRElOR19FTlRFUik7Ci0KKyAgICAvKiBDb250cm9sIHRocmVhZCBs
b2FkcyB1Y29kZSBmaXJzdCB3aGlsZSBvdGhlcnMgYXJlIGluIE5NSSBoYW5kbGVyLiAqLwogICAg
IHJldCA9IG1pY3JvY29kZV9vcHMtPmFwcGx5X21pY3JvY29kZShwYXRjaCk7CiAgICAgaWYgKCAh
cmV0ICkKICAgICAgICAgYXRvbWljX2luYygmY3B1X3VwZGF0ZWQpOwogICAgIGF0b21pY19pbmMo
JmNwdV9vdXQpOwogCisgICAgaWYgKCByZXQgPT0gLUVJTyApCisgICAgeworICAgICAgICBwcmlu
dGsoWEVOTE9HX0VSUgorICAgICAgICAgICAgICAgIkxhdGUgbG9hZGluZyBhYm9ydGVkOiBDUFUl
dSBmYWlsZWQgdG8gdXBkYXRlIHVjb2RlXG4iLCBjcHUpOworICAgICAgICBzZXRfc3RhdGUoTE9B
RElOR19FWElUKTsKKyAgICAgICAgcmV0dXJuIHJldDsKKyAgICB9CisKKyAgICAvKiBMZXQgcHJp
bWFyeSB0aHJlYWRzIGxvYWQgdGhlIGdpdmVuIHVjb2RlIHVwZGF0ZSAqLworICAgIHNldF9zdGF0
ZShMT0FESU5HX0VOVEVSKTsKKwogICAgIHRpY2sgPSByZHRzY19vcmRlcmVkKCk7CiAgICAgLyog
V2FpdCBmb3IgcHJpbWFyeSB0aHJlYWRzIGZpbmlzaGluZyB1cGRhdGUgKi8KICAgICB3aGlsZSAo
IChkb25lID0gYXRvbWljX3JlYWQoJmNwdV9vdXQpKSAhPSBucl9jb3JlcyApCkBAIC00NTYsNiAr
NTQzLDggQEAgc3RhdGljIGludCBjb250cm9sX3RocmVhZF9mbihjb25zdCBzdHJ1Y3QgbWljcm9j
b2RlX3BhdGNoICpwYXRjaCkKICAgICAvKiBNYXJrIGxvYWRpbmcgaXMgZG9uZSB0byB1bmJsb2Nr
IG90aGVyIHRocmVhZHMgKi8KICAgICBzZXRfc3RhdGUoTE9BRElOR19FWElUKTsKIAorICAgIHNl
dF9ubWlfY2FsbGJhY2soc2F2ZWRfbm1pX2NhbGxiYWNrKTsKKyAgICBubWlfcGF0Y2ggPSBaRVJP
X0JMT0NLX1BUUjsKICAgICB3YXRjaGRvZ19lbmFibGUoKTsKIAogICAgIHJldHVybiByZXQ7CkBA
IC01MTUsNiArNjA0LDEzIEBAIGludCBtaWNyb2NvZGVfdXBkYXRlKFhFTl9HVUVTVF9IQU5ETEVf
UEFSQU0oY29uc3Rfdm9pZCkgYnVmLCB1bnNpZ25lZCBsb25nIGxlbikKICAgICAgICAgcmV0dXJu
IC1FQlVTWTsKICAgICB9CiAKKyAgICAvKgorICAgICAqIENQVXMgZXhjZXB0IHRoZSBmaXJzdCBv
bmxpbmUgQ1BVIHdvdWxkIHNlbmQgYSBmYWtlIChzZWxmKSBOTUkgdG8KKyAgICAgKiByZW5kZXp2
b3VzIGluIE5NSSBoYW5kbGVyLiBCdXQgYSBmYWtlIE5NSSB0byBubWlfY3B1IG1heSB0cmlnZ2Vy
CisgICAgICogdW5rbm93bl9ubWlfZXJyb3IoKS4gSXQgZW5zdXJlcyBubWlfY3B1IHdvbid0IHJl
Y2VpdmUgYSBmYWtlIE5NSS4KKyAgICAgKi8KKyAgICBBU1NFUlQoY3B1bWFza19maXJzdCgmY3B1
X29ubGluZV9tYXApID09IG5taV9jcHUpOworCiAgICAgcGF0Y2ggPSBwYXJzZV9ibG9iKGJ1ZmZl
ciwgbGVuKTsKICAgICB4ZnJlZShidWZmZXIpOwogICAgIGlmICggSVNfRVJSKHBhdGNoKSApCmRp
ZmYgLS1naXQgYS94ZW4vYXJjaC94ODYvdHJhcHMuYyBiL3hlbi9hcmNoL3g4Ni90cmFwcy5jCmlu
ZGV4IDE2YzU5MGQuLjJjZDVlMjkgMTAwNjQ0Ci0tLSBhL3hlbi9hcmNoL3g4Ni90cmFwcy5jCisr
KyBiL3hlbi9hcmNoL3g4Ni90cmFwcy5jCkBAIC0xMjYsNiArMTI2LDggQEAgYm9vbGVhbl9wYXJh
bSgibGVyIiwgb3B0X2xlcik7CiAvKiBMYXN0RXhjZXB0aW9uRnJvbUlQIG9uIHRoaXMgaGFyZHdh
cmUuICBaZXJvIGlmIExFUiBpcyBub3QgaW4gdXNlLiAqLwogdW5zaWduZWQgaW50IF9fcmVhZF9t
b3N0bHkgbGVyX21zcjsKIAorY29uc3QgdW5zaWduZWQgaW50IG5taV9jcHU7CisKICNkZWZpbmUg
c3RhY2tfd29yZHNfcGVyX2xpbmUgNAogI2RlZmluZSBFU1BfQkVGT1JFX0VYQ0VQVElPTihyZWdz
KSAoKHVuc2lnbmVkIGxvbmcgKilyZWdzLT5yc3ApCiAKQEAgLTE2NzksNyArMTY4MSw3IEBAIHZv
aWQgZG9fbm1pKGNvbnN0IHN0cnVjdCBjcHVfdXNlcl9yZWdzICpyZWdzKQogICAgICAqIHRoaXMg
cG9ydCBiZWZvcmUgd2UgcmUtYXJtIHRoZSBOTUkgd2F0Y2hkb2csIHdlIHJlZHVjZSB0aGUgY2hh
bmNlCiAgICAgICogb2YgaGF2aW5nIGFuIE5NSSB3YXRjaGRvZyBleHBpcmUgd2hpbGUgaW4gdGhl
IFNNSSBoYW5kbGVyLgogICAgICAqLwotICAgIGlmICggY3B1ID09IDAgKQorICAgIGlmICggY3B1
ID09IG5taV9jcHUgKQogICAgICAgICByZWFzb24gPSBpbmIoMHg2MSk7CiAKICAgICBpZiAoIChu
bWlfd2F0Y2hkb2cgPT0gTk1JX05PTkUpIHx8CkBAIC0xNjg3LDcgKzE2ODksNyBAQCB2b2lkIGRv
X25taShjb25zdCBzdHJ1Y3QgY3B1X3VzZXJfcmVncyAqcmVncykKICAgICAgICAgaGFuZGxlX3Vu
a25vd24gPSB0cnVlOwogCiAgICAgLyogT25seSB0aGUgQlNQIGdldHMgZXh0ZXJuYWwgTk1JcyBm
cm9tIHRoZSBzeXN0ZW0uICovCi0gICAgaWYgKCBjcHUgPT0gMCApCisgICAgaWYgKCBjcHUgPT0g
bm1pX2NwdSApCiAgICAgewogICAgICAgICBpZiAoIHJlYXNvbiAmIDB4ODAgKQogICAgICAgICAg
ICAgcGNpX3NlcnJfZXJyb3IocmVncyk7CmRpZmYgLS1naXQgYS94ZW4vaW5jbHVkZS9hc20teDg2
L25taS5oIGIveGVuL2luY2x1ZGUvYXNtLXg4Ni9ubWkuaAppbmRleCA5OWY2Mjg0Li5mOWRmY2E2
IDEwMDY0NAotLS0gYS94ZW4vaW5jbHVkZS9hc20teDg2L25taS5oCisrKyBiL3hlbi9pbmNsdWRl
L2FzbS14ODYvbm1pLmgKQEAgLTExLDYgKzExLDkgQEAgZXh0ZXJuIGJvb2wgb3B0X3dhdGNoZG9n
OwogCiAvKiBXYXRjaGRvZyBmb3JjZSBwYXJhbWV0ZXIgZnJvbSB0aGUgY29tbWFuZCBsaW5lICov
CiBleHRlcm4gYm9vbCB3YXRjaGRvZ19mb3JjZTsKKworLyogQ1BVIHRvIGhhbmRsZSBwbGF0Zm9y
bSBOTUkgKi8KK2V4dGVybiBjb25zdCB1bnNpZ25lZCBpbnQgbm1pX2NwdTsKICAKIHR5cGVkZWYg
aW50IG5taV9jYWxsYmFja190KGNvbnN0IHN0cnVjdCBjcHVfdXNlcl9yZWdzICpyZWdzLCBpbnQg
Y3B1KTsKICAKLS0gCjEuOC4zLjEKCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fXwpYZW4tZGV2ZWwgbWFpbGluZyBsaXN0Clhlbi1kZXZlbEBsaXN0cy54ZW5w
cm9qZWN0Lm9yZwpodHRwczovL2xpc3RzLnhlbnByb2plY3Qub3JnL21haWxtYW4vbGlzdGluZm8v
eGVuLWRldmVs

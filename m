Return-Path: <xen-devel-bounces@lists.xenproject.org>
X-Original-To: lists+xen-devel@lfdr.de
Delivered-To: lists+xen-devel@lfdr.de
Received: from lists.xenproject.org (lists.xenproject.org [192.237.175.120])
	by mail.lfdr.de (Postfix) with ESMTPS id A8CEFC487E
	for <lists+xen-devel@lfdr.de>; Wed,  2 Oct 2019 09:30:16 +0200 (CEST)
Received: from localhost ([127.0.0.1] helo=lists.xenproject.org)
	by lists.xenproject.org with esmtp (Exim 4.89)
	(envelope-from <xen-devel-bounces@lists.xenproject.org>)
	id 1iFZ3e-0001dg-Ko; Wed, 02 Oct 2019 07:28:22 +0000
Received: from us1-rack-iad1.inumbo.com ([172.99.69.81])
 by lists.xenproject.org with esmtp (Exim 4.89)
 (envelope-from <SRS0=lglc=X3=suse.com=jgross@srs-us1.protection.inumbo.net>)
 id 1iFZ3c-0001c7-Mh
 for xen-devel@lists.xenproject.org; Wed, 02 Oct 2019 07:28:20 +0000
X-Inumbo-ID: 24eddc64-e4e6-11e9-bf31-bc764e2007e4
Received: from mx1.suse.de (unknown [195.135.220.15])
 by localhost (Halon) with ESMTPS
 id 24eddc64-e4e6-11e9-bf31-bc764e2007e4;
 Wed, 02 Oct 2019 07:27:53 +0000 (UTC)
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
 by mx1.suse.de (Postfix) with ESMTP id C4214AF93;
 Wed,  2 Oct 2019 07:27:51 +0000 (UTC)
From: Juergen Gross <jgross@suse.com>
To: xen-devel@lists.xenproject.org
Date: Wed,  2 Oct 2019 09:27:38 +0200
Message-Id: <20191002072745.24919-14-jgross@suse.com>
X-Mailer: git-send-email 2.16.4
In-Reply-To: <20191002072745.24919-1-jgross@suse.com>
References: <20191002072745.24919-1-jgross@suse.com>
Subject: [Xen-devel] [PATCH v6 13/20] xen/sched: split schedule_cpu_switch()
X-BeenThere: xen-devel@lists.xenproject.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Xen developer discussion <xen-devel.lists.xenproject.org>
List-Unsubscribe: <https://lists.xenproject.org/mailman/options/xen-devel>,
 <mailto:xen-devel-request@lists.xenproject.org?subject=unsubscribe>
List-Post: <mailto:xen-devel@lists.xenproject.org>
List-Help: <mailto:xen-devel-request@lists.xenproject.org?subject=help>
List-Subscribe: <https://lists.xenproject.org/mailman/listinfo/xen-devel>,
 <mailto:xen-devel-request@lists.xenproject.org?subject=subscribe>
Cc: Juergen Gross <jgross@suse.com>, Tim Deegan <tim@xen.org>,
 Stefano Stabellini <sstabellini@kernel.org>, Julien Grall <julien@xen.org>,
 Wei Liu <wl@xen.org>, Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>,
 George Dunlap <George.Dunlap@eu.citrix.com>,
 Andrew Cooper <andrew.cooper3@citrix.com>,
 Ian Jackson <ian.jackson@eu.citrix.com>, Dario Faggioli <dfaggioli@suse.com>,
 Jan Beulich <jbeulich@suse.com>
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: xen-devel-bounces@lists.xenproject.org
Sender: "Xen-devel" <xen-devel-bounces@lists.xenproject.org>

SW5zdGVhZCBvZiBsZXR0aW5nIHNjaGVkdWxlX2NwdV9zd2l0Y2goKSBoYW5kbGUgbW92aW5nIGNw
dXMgZnJvbSBhbmQKdG8gY3B1cG9vbHMsIHNwbGl0IGl0IGludG8gc2NoZWR1bGVfY3B1X2FkZCgp
IGFuZCBzY2hlZHVsZV9jcHVfcm0oKS4KClRoaXMgd2lsbCBhbGxvdyB1cyB0byBkcm9wIGFsbG9j
YXRpbmcvZnJlZWluZyBzY2hlZHVsZXIgZGF0YSBmb3IgZnJlZQpjcHVzIGFzIHRoZSBpZGxlIHNj
aGVkdWxlciBkb2Vzbid0IG5lZWQgc3VjaCBkYXRhLgoKU2lnbmVkLW9mZi1ieTogSnVlcmdlbiBH
cm9zcyA8amdyb3NzQHN1c2UuY29tPgpSZXZpZXdlZC1ieTogRGFyaW8gRmFnZ2lvbGkgPGRmYWdn
aW9saUBzdXNlLmNvbT4KLS0tClYxOiBuZXcgcGF0Y2gKVjQ6Ci0gcmVuYW1lIHNkIC0+IHNyIChK
YW4gQmV1bGljaCkKLS0tCiB4ZW4vY29tbW9uL2NwdXBvb2wuYyAgICB8ICAgNCArLQogeGVuL2Nv
bW1vbi9zY2hlZHVsZS5jICAgfCAxMzMgKysrKysrKysrKysrKysrKysrKysrKysrKysrLS0tLS0t
LS0tLS0tLS0tLS0tLS0tCiB4ZW4vaW5jbHVkZS94ZW4vc2NoZWQuaCB8ICAgMyArLQogMyBmaWxl
cyBjaGFuZ2VkLCA3OCBpbnNlcnRpb25zKCspLCA2MiBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQg
YS94ZW4vY29tbW9uL2NwdXBvb2wuYyBiL3hlbi9jb21tb24vY3B1cG9vbC5jCmluZGV4IDUxZjBm
ZjBkODguLjAyODI1ZTc3OWQgMTAwNjQ0Ci0tLSBhL3hlbi9jb21tb24vY3B1cG9vbC5jCisrKyBi
L3hlbi9jb21tb24vY3B1cG9vbC5jCkBAIC0yNzEsNyArMjcxLDcgQEAgc3RhdGljIGludCBjcHVw
b29sX2Fzc2lnbl9jcHVfbG9ja2VkKHN0cnVjdCBjcHVwb29sICpjLCB1bnNpZ25lZCBpbnQgY3B1
KQogCiAgICAgaWYgKCAoY3B1cG9vbF9tb3ZpbmdfY3B1ID09IGNwdSkgJiYgKGMgIT0gY3B1cG9v
bF9jcHVfbW92aW5nKSApCiAgICAgICAgIHJldHVybiAtRUFERFJOT1RBVkFJTDsKLSAgICByZXQg
PSBzY2hlZHVsZV9jcHVfc3dpdGNoKGNwdSwgYyk7CisgICAgcmV0ID0gc2NoZWR1bGVfY3B1X2Fk
ZChjcHUsIGMpOwogICAgIGlmICggcmV0ICkKICAgICAgICAgcmV0dXJuIHJldDsKIApAQCAtMzIx
LDcgKzMyMSw3IEBAIHN0YXRpYyBpbnQgY3B1cG9vbF91bmFzc2lnbl9jcHVfZmluaXNoKHN0cnVj
dCBjcHVwb29sICpjKQogICAgICAqLwogICAgIGlmICggIXJldCApCiAgICAgewotICAgICAgICBy
ZXQgPSBzY2hlZHVsZV9jcHVfc3dpdGNoKGNwdSwgTlVMTCk7CisgICAgICAgIHJldCA9IHNjaGVk
dWxlX2NwdV9ybShjcHUpOwogICAgICAgICBpZiAoIHJldCApCiAgICAgICAgICAgICBjcHVtYXNr
X2NsZWFyX2NwdShjcHUsICZjcHVwb29sX2ZyZWVfY3B1cyk7CiAgICAgICAgIGVsc2UKZGlmZiAt
LWdpdCBhL3hlbi9jb21tb24vc2NoZWR1bGUuYyBiL3hlbi9jb21tb24vc2NoZWR1bGUuYwppbmRl
eCA1MjU3MjI1MDUwLi5hOTZmYzgyMjgyIDEwMDY0NAotLS0gYS94ZW4vY29tbW9uL3NjaGVkdWxl
LmMKKysrIGIveGVuL2NvbW1vbi9zY2hlZHVsZS5jCkBAIC05MywxNSArOTMsNiBAQCBzdGF0aWMg
c3RydWN0IHNjaGVkdWxlciBfX3JlYWRfbW9zdGx5IG9wczsKIHN0YXRpYyB2b2lkIHNjaGVkX3Nl
dF9hZmZpbml0eSgKICAgICBzdHJ1Y3Qgc2NoZWRfdW5pdCAqdW5pdCwgY29uc3QgY3B1bWFza190
ICpoYXJkLCBjb25zdCBjcHVtYXNrX3QgKnNvZnQpOwogCi1zdGF0aWMgc3BpbmxvY2tfdCAqCi1z
Y2hlZF9pZGxlX3N3aXRjaF9zY2hlZChzdHJ1Y3Qgc2NoZWR1bGVyICpuZXdfb3BzLCB1bnNpZ25l
ZCBpbnQgY3B1LAotICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAqcGRhdGEsIHZvaWQgKnZk
YXRhKQotewotICAgIHNjaGVkX2lkbGVfdW5pdChjcHUpLT5wcml2ID0gTlVMTDsKLQotICAgIHJl
dHVybiAmc2NoZWRfZnJlZV9jcHVfbG9jazsKLX0KLQogc3RhdGljIHN0cnVjdCBzY2hlZF9yZXNv
dXJjZSAqCiBzY2hlZF9pZGxlX3Jlc19waWNrKGNvbnN0IHN0cnVjdCBzY2hlZHVsZXIgKm9wcywg
Y29uc3Qgc3RydWN0IHNjaGVkX3VuaXQgKnVuaXQpCiB7CkBAIC0xNDEsNyArMTMyLDYgQEAgc3Rh
dGljIHN0cnVjdCBzY2hlZHVsZXIgc2NoZWRfaWRsZV9vcHMgPSB7CiAKICAgICAuYWxsb2NfdWRh
dGEgICAgPSBzY2hlZF9pZGxlX2FsbG9jX3VkYXRhLAogICAgIC5mcmVlX3VkYXRhICAgICA9IHNj
aGVkX2lkbGVfZnJlZV91ZGF0YSwKLSAgICAuc3dpdGNoX3NjaGVkICAgPSBzY2hlZF9pZGxlX3N3
aXRjaF9zY2hlZCwKIH07CiAKIHN0YXRpYyBpbmxpbmUgc3RydWN0IHZjcHUgKnVuaXQydmNwdV9j
cHUoY29uc3Qgc3RydWN0IHNjaGVkX3VuaXQgKnVuaXQsCkBAIC0yNTQ3LDM2ICsyNTM3LDIyIEBA
IHZvaWQgX19pbml0IHNjaGVkdWxlcl9pbml0KHZvaWQpCiB9CiAKIC8qCi0gKiBNb3ZlIGEgcENQ
VSBvdXRzaWRlIG9mIHRoZSBpbmZsdWVuY2Ugb2YgdGhlIHNjaGVkdWxlciBvZiBpdHMgY3VycmVu
dAotICogY3B1cG9vbCwgb3Igc3ViamVjdCBpdCB0byB0aGUgc2NoZWR1bGVyIG9mIGEgbmV3IGNw
dXBvb2wuCi0gKgotICogRm9yIHRoZSBwQ1BVcyB0aGF0IGFyZSByZW1vdmVkIGZyb20gdGhlaXIg
Y3B1cG9vbCwgdGhlaXIgc2NoZWR1bGVyIGJlY29tZXMKLSAqICZzY2hlZF9pZGxlX29wcyAodGhl
IGlkbGUgc2NoZWR1bGVyKS4KKyAqIE1vdmUgYSBwQ1BVIGZyb20gZnJlZSBjcHVzIChydW5uaW5n
IHRoZSBpZGxlIHNjaGVkdWxlcikgdG8gYSBjcHVwb29sCisgKiB1c2luZyBhbnkgInJlYWwiIHNj
aGVkdWxlci4KKyAqIFRoZSBjcHUgaXMgc3RpbGwgbWFya2VkIGFzICJmcmVlIiBhbmQgbm90IHll
dCB2YWxpZCBmb3IgaXRzIGNwdXBvb2wuCiAgKi8KLWludCBzY2hlZHVsZV9jcHVfc3dpdGNoKHVu
c2lnbmVkIGludCBjcHUsIHN0cnVjdCBjcHVwb29sICpjKQoraW50IHNjaGVkdWxlX2NwdV9hZGQo
dW5zaWduZWQgaW50IGNwdSwgc3RydWN0IGNwdXBvb2wgKmMpCiB7CiAgICAgc3RydWN0IHZjcHUg
KmlkbGU7Ci0gICAgdm9pZCAqcHByaXYsICpwcHJpdl9vbGQsICp2cHJpdiwgKnZwcml2X29sZDsK
LSAgICBzdHJ1Y3Qgc2NoZWR1bGVyICpvbGRfb3BzID0gZ2V0X3NjaGVkX3JlcyhjcHUpLT5zY2hl
ZHVsZXI7Ci0gICAgc3RydWN0IHNjaGVkdWxlciAqbmV3X29wcyA9IChjID09IE5VTEwpID8gJnNj
aGVkX2lkbGVfb3BzIDogYy0+c2NoZWQ7Ci0gICAgc3RydWN0IHNjaGVkX3Jlc291cmNlICpzZCA9
IGdldF9zY2hlZF9yZXMoY3B1KTsKLSAgICBzdHJ1Y3QgY3B1cG9vbCAqb2xkX3Bvb2wgPSBzZC0+
Y3B1cG9vbDsKKyAgICB2b2lkICpwcHJpdiwgKnZwcml2OworICAgIHN0cnVjdCBzY2hlZHVsZXIg
Km5ld19vcHMgPSBjLT5zY2hlZDsKKyAgICBzdHJ1Y3Qgc2NoZWRfcmVzb3VyY2UgKnNyID0gZ2V0
X3NjaGVkX3JlcyhjcHUpOwogICAgIHNwaW5sb2NrX3QgKm9sZF9sb2NrLCAqbmV3X2xvY2s7CiAg
ICAgdW5zaWduZWQgbG9uZyBmbGFnczsKIAotICAgIC8qCi0gICAgICogcENQVXMgb25seSBtb3Zl
IGZyb20gYSB2YWxpZCBjcHVwb29sIHRvIGZyZWUgKGkuZS4sIG91dCBvZiBhbnkgcG9vbCksCi0g
ICAgICogb3IgZnJvbSBmcmVlIHRvIGEgdmFsaWQgY3B1cG9vbC4gSW4gdGhlIGZvcm1lciBjYXNl
ICh3aGljaCBoYXBwZW5zIHdoZW4KLSAgICAgKiBjIGlzIE5VTEwpLCB3ZSB3YW50IHRoZSBDUFUg
dG8gaGF2ZSBiZWVuIG1hcmtlZCBhcyBmcmVlIGFscmVhZHksIGFzCi0gICAgICogd2VsbCBhcyB0
byBub3QgYmUgdmFsaWQgZm9yIHRoZSBzb3VyY2UgcG9vbCBhbnkgbG9uZ2VyLCB3aGVuIHdlIGdl
dCB0bwotICAgICAqIGhlcmUuIEluIHRoZSBsYXR0ZXIgY2FzZSAod2hpY2ggaGFwcGVucyB3aGVu
IGMgaXMgYSB2YWxpZCBjcHVwb29sKSwgd2UKLSAgICAgKiB3YW50IHRoZSBDUFUgdG8gc3RpbGwg
YmUgbWFya2VkIGFzIGZyZWUsIGFzIHdlbGwgYXMgdG8gbm90IHlldCBiZSB2YWxpZAotICAgICAq
IGZvciB0aGUgZGVzdGluYXRpb24gcG9vbC4KLSAgICAgKi8KLSAgICBBU1NFUlQoYyAhPSBvbGRf
cG9vbCAmJiAoYyAhPSBOVUxMIHx8IG9sZF9wb29sICE9IE5VTEwpKTsKICAgICBBU1NFUlQoY3B1
bWFza190ZXN0X2NwdShjcHUsICZjcHVwb29sX2ZyZWVfY3B1cykpOwotICAgIEFTU0VSVCgoYyA9
PSBOVUxMICYmICFjcHVtYXNrX3Rlc3RfY3B1KGNwdSwgb2xkX3Bvb2wtPmNwdV92YWxpZCkpIHx8
Ci0gICAgICAgICAgIChjICE9IE5VTEwgJiYgIWNwdW1hc2tfdGVzdF9jcHUoY3B1LCBjLT5jcHVf
dmFsaWQpKSk7CisgICAgQVNTRVJUKCFjcHVtYXNrX3Rlc3RfY3B1KGNwdSwgYy0+Y3B1X3ZhbGlk
KSk7CisgICAgQVNTRVJUKGdldF9zY2hlZF9yZXMoY3B1KS0+Y3B1cG9vbCA9PSBOVUxMKTsKIAog
ICAgIC8qCiAgICAgICogVG8gc2V0dXAgdGhlIGNwdSBmb3IgdGhlIG5ldyBzY2hlZHVsZXIgd2Ug
bmVlZDoKQEAgLTI2MDEsNTIgKzI1NzcsOTEgQEAgaW50IHNjaGVkdWxlX2NwdV9zd2l0Y2godW5z
aWduZWQgaW50IGNwdSwgc3RydWN0IGNwdXBvb2wgKmMpCiAgICAgICAgIHJldHVybiAtRU5PTUVN
OwogICAgIH0KIAotICAgIHNjaGVkX2RvX3RpY2tfc3VzcGVuZChvbGRfb3BzLCBjcHUpOwotCiAg
ICAgLyoKLSAgICAgKiBUaGUgYWN0dWFsIHN3aXRjaCwgaW5jbHVkaW5nIChpZiBuZWNlc3Nhcnkp
IHRoZSByZXJvdXRpbmcgb2YgdGhlCi0gICAgICogc2NoZWR1bGVyIGxvY2sgdG8gd2hhdGV2ZXIg
bmV3X29wcyBwcmVmZXJzLCAgbmVlZHMgdG8gaGFwcGVuIGluIG9uZQotICAgICAqIGNyaXRpY2Fs
IHNlY3Rpb24sIHByb3RlY3RlZCBieSBvbGRfb3BzJyBsb2NrLCBvciByYWNlcyBhcmUgcG9zc2li
bGUuCi0gICAgICogSXQgaXMsIGluIGZhY3QsIHRoZSBsb2NrIG9mIGFub3RoZXIgc2NoZWR1bGVy
IHRoYXQgd2UgYXJlIHRha2luZyAodGhlCi0gICAgICogc2NoZWR1bGVyIG9mIHRoZSBjcHVwb29s
IHRoYXQgY3B1IHN0aWxsIGJlbG9uZ3MgdG8pLiBCdXQgdGhhdCBpcyBvawotICAgICAqIGFzLCBh
bnlvbmUgdHJ5aW5nIHRvIHNjaGVkdWxlIG9uIHRoaXMgY3B1IHdpbGwgc3BpbiB1bnRpbCB3aGVu
IHdlCi0gICAgICogcmVsZWFzZSB0aGF0IGxvY2sgKGJvdHRvbSBvZiB0aGlzIGZ1bmN0aW9uKS4g
V2hlbiBoZSdsbCBnZXQgdGhlIGxvY2sKLSAgICAgKiAtLXRoYW5rcyB0byB0aGUgbG9vcCBpbnNp
ZGUgKl9zY2hlZHVsZV9sb2NrKCkgZnVuY3Rpb25zLS0gaGUnbGwgbm90aWNlCi0gICAgICogdGhh
dCB0aGUgbG9jayBpdHNlbGYgY2hhbmdlZCwgYW5kIHJldHJ5IGFjcXVpcmluZyB0aGUgbmV3IG9u
ZSAod2hpY2gKLSAgICAgKiB3aWxsIGJlIHRoZSBjb3JyZWN0LCByZW1hcHBlZCBvbmUsIGF0IHRo
YXQgcG9pbnQpLgorICAgICAqIFRoZSBhY3R1YWwgc3dpdGNoLCBpbmNsdWRpbmcgdGhlIHJlcm91
dGluZyBvZiB0aGUgc2NoZWR1bGVyIGxvY2sgdG8KKyAgICAgKiB3aGF0ZXZlciBuZXdfb3BzIHBy
ZWZlcnMsIG5lZWRzIHRvIGhhcHBlbiBpbiBvbmUgY3JpdGljYWwgc2VjdGlvbiwKKyAgICAgKiBw
cm90ZWN0ZWQgYnkgb2xkX29wcycgbG9jaywgb3IgcmFjZXMgYXJlIHBvc3NpYmxlLgorICAgICAq
IEl0IGlzLCBpbiBmYWN0LCB0aGUgbG9jayBvZiB0aGUgaWRsZSBzY2hlZHVsZXIgdGhhdCB3ZSBh
cmUgdGFraW5nLgorICAgICAqIEJ1dCB0aGF0IGlzIG9rIGFzIGFueW9uZSB0cnlpbmcgdG8gc2No
ZWR1bGUgb24gdGhpcyBjcHUgd2lsbCBzcGluIHVudGlsCisgICAgICogd2hlbiB3ZSByZWxlYXNl
IHRoYXQgbG9jayAoYm90dG9tIG9mIHRoaXMgZnVuY3Rpb24pLiBXaGVuIGhlJ2xsIGdldCB0aGUK
KyAgICAgKiBsb2NrIC0tdGhhbmtzIHRvIHRoZSBsb29wIGluc2lkZSAqX3NjaGVkdWxlX2xvY2so
KSBmdW5jdGlvbnMtLSBoZSdsbAorICAgICAqIG5vdGljZSB0aGF0IHRoZSBsb2NrIGl0c2VsZiBj
aGFuZ2VkLCBhbmQgcmV0cnkgYWNxdWlyaW5nIHRoZSBuZXcgb25lCisgICAgICogKHdoaWNoIHdp
bGwgYmUgdGhlIGNvcnJlY3QsIHJlbWFwcGVkIG9uZSwgYXQgdGhhdCBwb2ludCkuCiAgICAgICov
CiAgICAgb2xkX2xvY2sgPSBwY3B1X3NjaGVkdWxlX2xvY2tfaXJxc2F2ZShjcHUsICZmbGFncyk7
CiAKLSAgICB2cHJpdl9vbGQgPSBpZGxlLT5zY2hlZF91bml0LT5wcml2OwotICAgIHBwcml2X29s
ZCA9IHNkLT5zY2hlZF9wcml2OwogICAgIG5ld19sb2NrID0gc2NoZWRfc3dpdGNoX3NjaGVkKG5l
d19vcHMsIGNwdSwgcHByaXYsIHZwcml2KTsKIAotICAgIHNkLT5zY2hlZHVsZXIgPSBuZXdfb3Bz
OwotICAgIHNkLT5zY2hlZF9wcml2ID0gcHByaXY7CisgICAgc3ItPnNjaGVkdWxlciA9IG5ld19v
cHM7CisgICAgc3ItPnNjaGVkX3ByaXYgPSBwcHJpdjsKIAogICAgIC8qCi0gICAgICogVGhlIGRh
dGEgYWJvdmUgaXMgcHJvdGVjdGVkIHVuZGVyIG5ld19sb2NrLCB3aGljaCBtYXkgYmUgdW5sb2Nr
ZWQuCi0gICAgICogQW5vdGhlciBDUFUgY2FuIHRha2UgbmV3X2xvY2sgYXMgc29vbiBhcyBzZC0+
c2NoZWR1bGVfbG9jayBpcyB2aXNpYmxlLAotICAgICAqIGFuZCBtdXN0IG9ic2VydmUgYWxsIHBy
aW9yIGluaXRpYWxpc2F0aW9uLgorICAgICAqIFJlcm91dGUgdGhlIGxvY2sgdG8gdGhlIHBlciBw
Q1BVIGxvY2sgYXMgL2xhc3QvIHRoaW5nLiBJbiBmYWN0LAorICAgICAqIGlmIGl0IGlzIGZyZWUg
KGFuZCBpdCBjYW4gYmUpIHdlIHdhbnQgdGhhdCBhbnlvbmUgdGhhdCBtYW5hZ2VzCisgICAgICog
dGFraW5nIGl0LCBmaW5kcyBhbGwgdGhlIGluaXRpYWxpemF0aW9ucyB3ZSd2ZSBkb25lIGFib3Zl
IGluIHBsYWNlLgogICAgICAqLwogICAgIHNtcF93bWIoKTsKLSAgICBzZC0+c2NoZWR1bGVfbG9j
ayA9IG5ld19sb2NrOworICAgIHNyLT5zY2hlZHVsZV9sb2NrID0gbmV3X2xvY2s7CiAKLSAgICAv
KiBfTm90XyBwY3B1X3NjaGVkdWxlX3VubG9jaygpOiBzY2hlZHVsZV9sb2NrIG1heSBoYXZlIGNo
YW5nZWQhICovCisgICAgLyogX05vdF8gcGNwdV9zY2hlZHVsZV91bmxvY2soKTogc2NoZWR1bGVf
bG9jayBoYXMgY2hhbmdlZCEgKi8KICAgICBzcGluX3VubG9ja19pcnFyZXN0b3JlKG9sZF9sb2Nr
LCBmbGFncyk7CiAKICAgICBzY2hlZF9kb190aWNrX3Jlc3VtZShuZXdfb3BzLCBjcHUpOwogCisg
ICAgc3ItPmdyYW51bGFyaXR5ID0gY3B1cG9vbF9nZXRfZ3JhbnVsYXJpdHkoYyk7CisgICAgc3It
PmNwdXBvb2wgPSBjOworICAgIC8qIFRoZSAgY3B1IGlzIGFkZGVkIHRvIGEgcG9vbCwgdHJpZ2dl
ciBpdCB0byBnbyBwaWNrIHVwIHNvbWUgd29yayAqLworICAgIGNwdV9yYWlzZV9zb2Z0aXJxKGNw
dSwgU0NIRURVTEVfU09GVElSUSk7CisKKyAgICByZXR1cm4gMDsKK30KKworLyoKKyAqIFJlbW92
ZSBhIHBDUFUgZnJvbSBpdHMgY3B1cG9vbC4gSXRzIHNjaGVkdWxlciBiZWNvbWVzICZzY2hlZF9p
ZGxlX29wcworICogKHRoZSBpZGxlIHNjaGVkdWxlcikuCisgKiBUaGUgY3B1IGlzIGFscmVhZHkg
bWFya2VkIGFzICJmcmVlIiBhbmQgbm90IHZhbGlkIGFueSBsb25nZXIgZm9yIGl0cworICogY3B1
cG9vbC4KKyAqLworaW50IHNjaGVkdWxlX2NwdV9ybSh1bnNpZ25lZCBpbnQgY3B1KQoreworICAg
IHN0cnVjdCB2Y3B1ICppZGxlOworICAgIHZvaWQgKnBwcml2X29sZCwgKnZwcml2X29sZDsKKyAg
ICBzdHJ1Y3Qgc2NoZWRfcmVzb3VyY2UgKnNyID0gZ2V0X3NjaGVkX3JlcyhjcHUpOworICAgIHN0
cnVjdCBzY2hlZHVsZXIgKm9sZF9vcHMgPSBzci0+c2NoZWR1bGVyOworICAgIHNwaW5sb2NrX3Qg
Km9sZF9sb2NrOworICAgIHVuc2lnbmVkIGxvbmcgZmxhZ3M7CisKKyAgICBBU1NFUlQoc3ItPmNw
dXBvb2wgIT0gTlVMTCk7CisgICAgQVNTRVJUKGNwdW1hc2tfdGVzdF9jcHUoY3B1LCAmY3B1cG9v
bF9mcmVlX2NwdXMpKTsKKyAgICBBU1NFUlQoIWNwdW1hc2tfdGVzdF9jcHUoY3B1LCBzci0+Y3B1
cG9vbC0+Y3B1X3ZhbGlkKSk7CisKKyAgICBpZGxlID0gaWRsZV92Y3B1W2NwdV07CisKKyAgICBz
Y2hlZF9kb190aWNrX3N1c3BlbmQob2xkX29wcywgY3B1KTsKKworICAgIC8qIFNlZSBjb21tZW50
IGluIHNjaGVkdWxlX2NwdV9hZGQoKSByZWdhcmRpbmcgbG9jayBzd2l0Y2hpbmcuICovCisgICAg
b2xkX2xvY2sgPSBwY3B1X3NjaGVkdWxlX2xvY2tfaXJxc2F2ZShjcHUsICZmbGFncyk7CisKKyAg
ICB2cHJpdl9vbGQgPSBpZGxlLT5zY2hlZF91bml0LT5wcml2OworICAgIHBwcml2X29sZCA9IHNy
LT5zY2hlZF9wcml2OworCisgICAgaWRsZS0+c2NoZWRfdW5pdC0+cHJpdiA9IE5VTEw7CisgICAg
c3ItPnNjaGVkdWxlciA9ICZzY2hlZF9pZGxlX29wczsKKyAgICBzci0+c2NoZWRfcHJpdiA9IE5V
TEw7CisKKyAgICBzbXBfbWIoKTsKKyAgICBzci0+c2NoZWR1bGVfbG9jayA9ICZzY2hlZF9mcmVl
X2NwdV9sb2NrOworCisgICAgLyogX05vdF8gcGNwdV9zY2hlZHVsZV91bmxvY2soKTogc2NoZWR1
bGVfbG9jayBtYXkgaGF2ZSBjaGFuZ2VkISAqLworICAgIHNwaW5fdW5sb2NrX2lycXJlc3RvcmUo
b2xkX2xvY2ssIGZsYWdzKTsKKwogICAgIHNjaGVkX2RlaW5pdF9wZGF0YShvbGRfb3BzLCBwcHJp
dl9vbGQsIGNwdSk7CiAKICAgICBzY2hlZF9mcmVlX3VkYXRhKG9sZF9vcHMsIHZwcml2X29sZCk7
CiAgICAgc2NoZWRfZnJlZV9wZGF0YShvbGRfb3BzLCBwcHJpdl9vbGQsIGNwdSk7CiAKLSAgICBn
ZXRfc2NoZWRfcmVzKGNwdSktPmdyYW51bGFyaXR5ID0gY3B1cG9vbF9nZXRfZ3JhbnVsYXJpdHko
Yyk7Ci0gICAgZ2V0X3NjaGVkX3JlcyhjcHUpLT5jcHVwb29sID0gYzsKLSAgICAvKiBXaGVuIGEg
Y3B1IGlzIGFkZGVkIHRvIGEgcG9vbCwgdHJpZ2dlciBpdCB0byBnbyBwaWNrIHVwIHNvbWUgd29y
ayAqLwotICAgIGlmICggYyAhPSBOVUxMICkKLSAgICAgICAgY3B1X3JhaXNlX3NvZnRpcnEoY3B1
LCBTQ0hFRFVMRV9TT0ZUSVJRKTsKKyAgICBzci0+Z3JhbnVsYXJpdHkgPSAxOworICAgIHNyLT5j
cHVwb29sID0gTlVMTDsKIAogICAgIHJldHVybiAwOwogfQpkaWZmIC0tZ2l0IGEveGVuL2luY2x1
ZGUveGVuL3NjaGVkLmggYi94ZW4vaW5jbHVkZS94ZW4vc2NoZWQuaAppbmRleCBhYTgyNTdlZGM5
Li5hNDBiZDVmYjU2IDEwMDY0NAotLS0gYS94ZW4vaW5jbHVkZS94ZW4vc2NoZWQuaAorKysgYi94
ZW4vaW5jbHVkZS94ZW4vc2NoZWQuaApAQCAtOTIwLDcgKzkyMCw4IEBAIHN0cnVjdCBzY2hlZHVs
ZXI7CiBzdHJ1Y3Qgc2NoZWR1bGVyICpzY2hlZHVsZXJfZ2V0X2RlZmF1bHQodm9pZCk7CiBzdHJ1
Y3Qgc2NoZWR1bGVyICpzY2hlZHVsZXJfYWxsb2ModW5zaWduZWQgaW50IHNjaGVkX2lkLCBpbnQg
KnBlcnIpOwogdm9pZCBzY2hlZHVsZXJfZnJlZShzdHJ1Y3Qgc2NoZWR1bGVyICpzY2hlZCk7Ci1p
bnQgc2NoZWR1bGVfY3B1X3N3aXRjaCh1bnNpZ25lZCBpbnQgY3B1LCBzdHJ1Y3QgY3B1cG9vbCAq
Yyk7CitpbnQgc2NoZWR1bGVfY3B1X2FkZCh1bnNpZ25lZCBpbnQgY3B1LCBzdHJ1Y3QgY3B1cG9v
bCAqYyk7CitpbnQgc2NoZWR1bGVfY3B1X3JtKHVuc2lnbmVkIGludCBjcHUpOwogdm9pZCB2Y3B1
X3NldF9wZXJpb2RpY190aW1lcihzdHJ1Y3QgdmNwdSAqdiwgc190aW1lX3QgdmFsdWUpOwogaW50
IGNwdV9kaXNhYmxlX3NjaGVkdWxlcih1bnNpZ25lZCBpbnQgY3B1KTsKIHZvaWQgc2NoZWRfc2V0
dXBfZG9tMF92Y3B1cyhzdHJ1Y3QgZG9tYWluICpkKTsKLS0gCjIuMTYuNAoKCl9fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fClhlbi1kZXZlbCBtYWlsaW5nIGxp
c3QKWGVuLWRldmVsQGxpc3RzLnhlbnByb2plY3Qub3JnCmh0dHBzOi8vbGlzdHMueGVucHJvamVj
dC5vcmcvbWFpbG1hbi9saXN0aW5mby94ZW4tZGV2ZWw=

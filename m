Return-Path: <xen-devel-bounces@lists.xenproject.org>
X-Original-To: lists+xen-devel@lfdr.de
Delivered-To: lists+xen-devel@lfdr.de
Received: from lists.xenproject.org (lists.xenproject.org [192.237.175.120])
	by mail.lfdr.de (Postfix) with ESMTPS id E6D7D17A29E
	for <lists+xen-devel@lfdr.de>; Thu,  5 Mar 2020 11:01:06 +0100 (CET)
Received: from localhost ([127.0.0.1] helo=lists.xenproject.org)
	by lists.xenproject.org with esmtp (Exim 4.89)
	(envelope-from <xen-devel-bounces@lists.xenproject.org>)
	id 1j9nGJ-0008WG-00; Thu, 05 Mar 2020 09:57:50 +0000
Received: from us1-rack-iad1.inumbo.com ([172.99.69.81])
 by lists.xenproject.org with esmtp (Exim 4.89) (envelope-from
 <SRS0=RZyS=4W=gmail.com=yyankovskyi@srs-us1.protection.inumbo.net>)
 id 1j9nGG-0008WB-Kz
 for xen-devel@lists.xenproject.org; Thu, 05 Mar 2020 09:57:48 +0000
X-Inumbo-ID: c3462500-5ec7-11ea-90c4-bc764e2007e4
Received: from mail-wr1-x441.google.com (unknown [2a00:1450:4864:20::441])
 by us1-rack-iad1.inumbo.com (Halon) with ESMTPS
 id c3462500-5ec7-11ea-90c4-bc764e2007e4;
 Thu, 05 Mar 2020 09:57:46 +0000 (UTC)
Received: by mail-wr1-x441.google.com with SMTP id x7so6211169wrr.0
 for <xen-devel@lists.xenproject.org>; Thu, 05 Mar 2020 01:57:46 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=date:from:to:cc:subject:message-id:mime-version:content-disposition
 :user-agent; bh=f9Y6dDiZbq3Gn6/Vwc6Qc20Po2wP0HmANub8fAzg6g8=;
 b=rtfYQklRbOxaAENaTuWCe6CkzEnVmx3gAKUBlp/Cp5gTdWQGqRUrjg/Xc/P0AcSmHP
 hfWrDKMYOYmCZOpfcEA1Sk1UoI8cVXeY61fWr1KkEvjxzPwD2PoCtKT2xI6gO6WLGGu4
 +0P5MzC8KwLQ6XGzQ40LZRHMdzKTrlrtqWdZh3sGV8eZYxyee7XvylqsEbcudsX1qnPt
 bdz4VW38Icz6T7CEQBziH305gR+HZVL3DGZszVtAHPoqvSHELaoJ5wB8jAtMMfbTYogA
 Ml2n9jl3aOL1F8nHkRepCXPaZnDtizWqWA9PEcmyKPXaW+Upa5+SOzkTI+F16fKg5PDb
 bFng==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:date:from:to:cc:subject:message-id:mime-version
 :content-disposition:user-agent;
 bh=f9Y6dDiZbq3Gn6/Vwc6Qc20Po2wP0HmANub8fAzg6g8=;
 b=jvDlJCh7j7Ml1Jjj2Z2yr4BoFRN7lTub/78zGTpx4lsUPe0P/NgNhFB3UbjHBWIB05
 CmbWl0h757NN++PktGV417lIAlSgUkNtom/mYw0HfQBVm9/4KObcUJc4SZwNWJ2wfUMN
 cJr4MaMH0ub3wbuiVLXOLe4i0yEKq+ygsolBvOteNBZPxTLLuVqtDLjQh+NzURhhTwdX
 mPdilerZfdfvJKGUXwXVydCVwRJicQS28IE5+w0Ca4oFaT9Y6xuF+EC5qiCKcZlEsaXn
 1uXrg0IDP4Kd/0rgMX/JIplizQHXeA3M0x7fRCGImN8OSL+nI9feq8sY/XErrLxiS26r
 wP4g==
X-Gm-Message-State: ANhLgQ0ooHKdJzpxbTCfLDRPVngoA3R5zVC+NR8F9lDQrKnYf8oGnn1K
 iqMC332nUnOeO2xNpE9jHlc=
X-Google-Smtp-Source: ADFU+vt/MwLeHri7D7QctDLpHVznpWp0AqylLKc06xPKFWIHWA46pB4Vht7+O53JTs2JmhcSIZ1yMg==
X-Received: by 2002:a5d:68ce:: with SMTP id p14mr9115237wrw.315.1583402264478; 
 Thu, 05 Mar 2020 01:57:44 -0800 (PST)
Received: from kbp1-lhp-F74019 (ip-109-41-64-183.web.vodafone.de.
 [109.41.64.183])
 by smtp.gmail.com with ESMTPSA id s7sm5482757wrm.13.2020.03.05.01.57.42
 (version=TLS1_2 cipher=ECDHE-RSA-CHACHA20-POLY1305 bits=256/256);
 Thu, 05 Mar 2020 01:57:43 -0800 (PST)
Date: Thu, 5 Mar 2020 11:57:39 +0200
From: Yan Yankovskyi <yyankovskyi@gmail.com>
To: Boris Ostrovsky <boris.ostrovsky@oracle.com>,
 Jan Beulich <jbeulich@suse.com>
Message-ID: <20200305095739.GA26471@kbp1-lhp-F74019>
MIME-Version: 1.0
Content-Disposition: inline
User-Agent: Mutt/1.9.4 (2018-02-28)
Subject: [Xen-devel] [PATCH] xen: Use evtchn_type_t as a type for event
 channels
X-BeenThere: xen-devel@lists.xenproject.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Xen developer discussion <xen-devel.lists.xenproject.org>
List-Unsubscribe: <https://lists.xenproject.org/mailman/options/xen-devel>,
 <mailto:xen-devel-request@lists.xenproject.org?subject=unsubscribe>
List-Post: <mailto:xen-devel@lists.xenproject.org>
List-Help: <mailto:xen-devel-request@lists.xenproject.org?subject=help>
List-Subscribe: <https://lists.xenproject.org/mailman/listinfo/xen-devel>,
 <mailto:xen-devel-request@lists.xenproject.org?subject=subscribe>
Cc: Juergen Gross <jgross@suse.com>, xen-devel@lists.xenproject.org,
 Stefano Stabellini <sstabellini@kernel.org>, linux-kernel@vger.kernel.org
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: xen-devel-bounces@lists.xenproject.org
Sender: "Xen-devel" <xen-devel-bounces@lists.xenproject.org>

TWFrZSBldmVudCBjaGFubmVsIGZ1bmN0aW9ucyBwYXNzIGV2ZW50IGNoYW5uZWwgcG9ydCB1c2lu
ZwpldnRjaG5fcG9ydF90IHR5cGUuIEl0IGVsaW1pbmF0ZXMgc2lnbmVkIDwtPiB1bnNpZ25lZCBj
b252ZXJzaW9uLgpBbHNvIHJlbmFtZSAnZXZ0Y2huJyB2YXJpYWJsZXMgdG8gJ3BvcnQnIGluIGNh
c2UgaWYgJ3BvcnQnIGlzIG5vdAphbWJpZ3VvdXMuCgpTaWduZWQtb2ZmLWJ5OiBZYW4gWWFua292
c2t5aSA8eXlhbmtvdnNreWlAZ21haWwuY29tPgotLS0KIGRyaXZlcnMveGVuL2V2ZW50cy9ldmVu
dHNfMmwuYyAgICAgICAgfCAgMjAgKy0KIGRyaXZlcnMveGVuL2V2ZW50cy9ldmVudHNfYmFzZS5j
ICAgICAgfCAyNTMgKysrKysrKysrKysrKy0tLS0tLS0tLS0tLS0KIGRyaXZlcnMveGVuL2V2ZW50
cy9ldmVudHNfZmlmby5jICAgICAgfCAgMjIgKy0tCiBkcml2ZXJzL3hlbi9ldmVudHMvZXZlbnRz
X2ludGVybmFsLmggIHwgIDMwICstLQogZHJpdmVycy94ZW4vZXZ0Y2huLmMgICAgICAgICAgICAg
ICAgICB8ICAxNSArLQogZHJpdmVycy94ZW4vcHZjYWxscy1iYWNrLmMgICAgICAgICAgICB8ICAg
NSArLQogZHJpdmVycy94ZW4vcHZjYWxscy1mcm9udC5jICAgICAgICAgICB8ICAxNyArLQogZHJp
dmVycy94ZW4veGVuLXBjaWJhY2sveGVuYnVzLmMgICAgICB8ICAgNyArLQogZHJpdmVycy94ZW4v
eGVuLXNjc2liYWNrLmMgICAgICAgICAgICB8ICAxMSArLQogZHJpdmVycy94ZW4veGVuYnVzL3hl
bmJ1c19jbGllbnQuYyAgICB8ICAgNiArLQogaW5jbHVkZS94ZW4vZXZlbnRzLmggICAgICAgICAg
ICAgICAgICB8ICAyMCArLQogaW5jbHVkZS94ZW4vaW50ZXJmYWNlL2V2ZW50X2NoYW5uZWwuaCB8
ICAgMiArLQogaW5jbHVkZS94ZW4veGVuYnVzLmggICAgICAgICAgICAgICAgICB8ICAgNSArLQog
MTMgZmlsZXMgY2hhbmdlZCwgMjEyIGluc2VydGlvbnMoKyksIDIwMSBkZWxldGlvbnMoLSkKCmRp
ZmYgLS1naXQgYS9kcml2ZXJzL3hlbi9ldmVudHMvZXZlbnRzXzJsLmMgYi9kcml2ZXJzL3hlbi9l
dmVudHMvZXZlbnRzXzJsLmMKaW5kZXggOGVkZWY1MWM5MmU1Li5hMjQ2ZTlmYTE4OWYgMTAwNjQ0
Ci0tLSBhL2RyaXZlcnMveGVuL2V2ZW50cy9ldmVudHNfMmwuYworKysgYi9kcml2ZXJzL3hlbi9l
dmVudHMvZXZlbnRzXzJsLmMKQEAgLTUzLDM3ICs1MywzNyBAQCBzdGF0aWMgdm9pZCBldnRjaG5f
MmxfYmluZF90b19jcHUoc3RydWN0IGlycV9pbmZvICppbmZvLCB1bnNpZ25lZCBjcHUpCiAJc2V0
X2JpdChpbmZvLT5ldnRjaG4sIEJNKHBlcl9jcHUoY3B1X2V2dGNobl9tYXNrLCBjcHUpKSk7CiB9
CiAKLXN0YXRpYyB2b2lkIGV2dGNobl8ybF9jbGVhcl9wZW5kaW5nKHVuc2lnbmVkIHBvcnQpCitz
dGF0aWMgdm9pZCBldnRjaG5fMmxfY2xlYXJfcGVuZGluZyhldnRjaG5fcG9ydF90IHBvcnQpCiB7
CiAJc3RydWN0IHNoYXJlZF9pbmZvICpzID0gSFlQRVJWSVNPUl9zaGFyZWRfaW5mbzsKIAlzeW5j
X2NsZWFyX2JpdChwb3J0LCBCTSgmcy0+ZXZ0Y2huX3BlbmRpbmdbMF0pKTsKIH0KIAotc3RhdGlj
IHZvaWQgZXZ0Y2huXzJsX3NldF9wZW5kaW5nKHVuc2lnbmVkIHBvcnQpCitzdGF0aWMgdm9pZCBl
dnRjaG5fMmxfc2V0X3BlbmRpbmcoZXZ0Y2huX3BvcnRfdCBwb3J0KQogewogCXN0cnVjdCBzaGFy
ZWRfaW5mbyAqcyA9IEhZUEVSVklTT1Jfc2hhcmVkX2luZm87CiAJc3luY19zZXRfYml0KHBvcnQs
IEJNKCZzLT5ldnRjaG5fcGVuZGluZ1swXSkpOwogfQogCi1zdGF0aWMgYm9vbCBldnRjaG5fMmxf
aXNfcGVuZGluZyh1bnNpZ25lZCBwb3J0KQorc3RhdGljIGJvb2wgZXZ0Y2huXzJsX2lzX3BlbmRp
bmcoZXZ0Y2huX3BvcnRfdCBwb3J0KQogewogCXN0cnVjdCBzaGFyZWRfaW5mbyAqcyA9IEhZUEVS
VklTT1Jfc2hhcmVkX2luZm87CiAJcmV0dXJuIHN5bmNfdGVzdF9iaXQocG9ydCwgQk0oJnMtPmV2
dGNobl9wZW5kaW5nWzBdKSk7CiB9CiAKLXN0YXRpYyBib29sIGV2dGNobl8ybF90ZXN0X2FuZF9z
ZXRfbWFzayh1bnNpZ25lZCBwb3J0KQorc3RhdGljIGJvb2wgZXZ0Y2huXzJsX3Rlc3RfYW5kX3Nl
dF9tYXNrKGV2dGNobl9wb3J0X3QgcG9ydCkKIHsKIAlzdHJ1Y3Qgc2hhcmVkX2luZm8gKnMgPSBI
WVBFUlZJU09SX3NoYXJlZF9pbmZvOwogCXJldHVybiBzeW5jX3Rlc3RfYW5kX3NldF9iaXQocG9y
dCwgQk0oJnMtPmV2dGNobl9tYXNrWzBdKSk7CiB9CiAKLXN0YXRpYyB2b2lkIGV2dGNobl8ybF9t
YXNrKHVuc2lnbmVkIHBvcnQpCitzdGF0aWMgdm9pZCBldnRjaG5fMmxfbWFzayhldnRjaG5fcG9y
dF90IHBvcnQpCiB7CiAJc3RydWN0IHNoYXJlZF9pbmZvICpzID0gSFlQRVJWSVNPUl9zaGFyZWRf
aW5mbzsKIAlzeW5jX3NldF9iaXQocG9ydCwgQk0oJnMtPmV2dGNobl9tYXNrWzBdKSk7CiB9CiAK
LXN0YXRpYyB2b2lkIGV2dGNobl8ybF91bm1hc2sodW5zaWduZWQgcG9ydCkKK3N0YXRpYyB2b2lk
IGV2dGNobl8ybF91bm1hc2soZXZ0Y2huX3BvcnRfdCBwb3J0KQogewogCXN0cnVjdCBzaGFyZWRf
aW5mbyAqcyA9IEhZUEVSVklTT1Jfc2hhcmVkX2luZm87CiAJdW5zaWduZWQgaW50IGNwdSA9IGdl
dF9jcHUoKTsKQEAgLTE3Myw5ICsxNzMsOSBAQCBzdGF0aWMgdm9pZCBldnRjaG5fMmxfaGFuZGxl
X2V2ZW50cyh1bnNpZ25lZCBjcHUpCiAJLyogVGltZXIgaW50ZXJydXB0IGhhcyBoaWdoZXN0IHBy
aW9yaXR5LiAqLwogCWlycSA9IGlycV9mcm9tX3ZpcnEoY3B1LCBWSVJRX1RJTUVSKTsKIAlpZiAo
aXJxICE9IC0xKSB7Ci0JCXVuc2lnbmVkIGludCBldnRjaG4gPSBldnRjaG5fZnJvbV9pcnEoaXJx
KTsKLQkJd29yZF9pZHggPSBldnRjaG4gLyBCSVRTX1BFUl9MT05HOwotCQliaXRfaWR4ID0gZXZ0
Y2huICUgQklUU19QRVJfTE9ORzsKKwkJZXZ0Y2huX3BvcnRfdCBwb3J0ID0gZXZ0Y2huX2Zyb21f
aXJxKGlycSk7CisJCXdvcmRfaWR4ID0gcG9ydCAvIEJJVFNfUEVSX0xPTkc7CisJCWJpdF9pZHgg
PSBwb3J0ICUgQklUU19QRVJfTE9ORzsKIAkJaWYgKGFjdGl2ZV9ldnRjaG5zKGNwdSwgcywgd29y
ZF9pZHgpICYgKDFVTEwgPDwgYml0X2lkeCkpCiAJCQlnZW5lcmljX2hhbmRsZV9pcnEoaXJxKTsK
IAl9CkBAIC0yMjgsNyArMjI4LDcgQEAgc3RhdGljIHZvaWQgZXZ0Y2huXzJsX2hhbmRsZV9ldmVu
dHModW5zaWduZWQgY3B1KQogCiAJCWRvIHsKIAkJCXhlbl91bG9uZ190IGJpdHM7Ci0JCQlpbnQg
cG9ydDsKKwkJCWV2dGNobl9wb3J0X3QgcG9ydDsKIAogCQkJYml0cyA9IE1BU0tfTFNCUyhwZW5k
aW5nX2JpdHMsIGJpdF9pZHgpOwogCmRpZmYgLS1naXQgYS9kcml2ZXJzL3hlbi9ldmVudHMvZXZl
bnRzX2Jhc2UuYyBiL2RyaXZlcnMveGVuL2V2ZW50cy9ldmVudHNfYmFzZS5jCmluZGV4IDQ5OWVm
ZjdkM2Y2NS4uNWIyNjUwOWQ3NzNjIDEwMDY0NAotLS0gYS9kcml2ZXJzL3hlbi9ldmVudHMvZXZl
bnRzX2Jhc2UuYworKysgYi9kcml2ZXJzL3hlbi9ldmVudHMvZXZlbnRzX2Jhc2UuYwpAQCAtMTE2
LDE2ICsxMTYsMTYgQEAgc3RhdGljIHZvaWQgY2xlYXJfZXZ0Y2huX3RvX2lycV9hbGwodm9pZCkK
IAl9CiB9CiAKLXN0YXRpYyBpbnQgc2V0X2V2dGNobl90b19pcnEodW5zaWduZWQgZXZ0Y2huLCB1
bnNpZ25lZCBpcnEpCitzdGF0aWMgaW50IHNldF9ldnRjaG5fdG9faXJxKGV2dGNobl9wb3J0X3Qg
cG9ydCwgdW5zaWduZWQgaW50IGlycSkKIHsKIAl1bnNpZ25lZCByb3c7CiAJdW5zaWduZWQgY29s
OwogCi0JaWYgKGV2dGNobiA+PSB4ZW5fZXZ0Y2huX21heF9jaGFubmVscygpKQorCWlmIChwb3J0
ID49IHhlbl9ldnRjaG5fbWF4X2NoYW5uZWxzKCkpCiAJCXJldHVybiAtRUlOVkFMOwogCi0Jcm93
ID0gRVZUQ0hOX1JPVyhldnRjaG4pOwotCWNvbCA9IEVWVENITl9DT0woZXZ0Y2huKTsKKwlyb3cg
PSBFVlRDSE5fUk9XKHBvcnQpOworCWNvbCA9IEVWVENITl9DT0wocG9ydCk7CiAKIAlpZiAoZXZ0
Y2huX3RvX2lycVtyb3ddID09IE5VTEwpIHsKIAkJLyogVW5hbGxvY2F0ZWQgaXJxIGVudHJpZXMg
cmV0dXJuIC0xIGFueXdheSAqLwpAQCAtMTQzLDEzICsxNDMsMTMgQEAgc3RhdGljIGludCBzZXRf
ZXZ0Y2huX3RvX2lycSh1bnNpZ25lZCBldnRjaG4sIHVuc2lnbmVkIGlycSkKIAlyZXR1cm4gMDsK
IH0KIAotaW50IGdldF9ldnRjaG5fdG9faXJxKHVuc2lnbmVkIGV2dGNobikKK2ludCBnZXRfZXZ0
Y2huX3RvX2lycShldnRjaG5fcG9ydF90IHBvcnQpCiB7Ci0JaWYgKGV2dGNobiA+PSB4ZW5fZXZ0
Y2huX21heF9jaGFubmVscygpKQorCWlmIChwb3J0ID49IHhlbl9ldnRjaG5fbWF4X2NoYW5uZWxz
KCkpCiAJCXJldHVybiAtMTsKLQlpZiAoZXZ0Y2huX3RvX2lycVtFVlRDSE5fUk9XKGV2dGNobild
ID09IE5VTEwpCisJaWYgKGV2dGNobl90b19pcnFbRVZUQ0hOX1JPVyhwb3J0KV0gPT0gTlVMTCkK
IAkJcmV0dXJuIC0xOwotCXJldHVybiBldnRjaG5fdG9faXJxW0VWVENITl9ST1coZXZ0Y2huKV1b
RVZUQ0hOX0NPTChldnRjaG4pXTsKKwlyZXR1cm4gZXZ0Y2huX3RvX2lycVtFVlRDSE5fUk9XKHBv
cnQpXVtFVlRDSE5fQ09MKHBvcnQpXTsKIH0KIAogLyogR2V0IGluZm8gZm9yIElSUSAqLwpAQCAt
MTYyLDcgKzE2Miw3IEBAIHN0cnVjdCBpcnFfaW5mbyAqaW5mb19mb3JfaXJxKHVuc2lnbmVkIGly
cSkKIHN0YXRpYyBpbnQgeGVuX2lycV9pbmZvX2NvbW1vbl9zZXR1cChzdHJ1Y3QgaXJxX2luZm8g
KmluZm8sCiAJCQkJICAgICB1bnNpZ25lZCBpcnEsCiAJCQkJICAgICBlbnVtIHhlbl9pcnFfdHlw
ZSB0eXBlLAotCQkJCSAgICAgdW5zaWduZWQgZXZ0Y2huLAorCQkJCSAgICAgZXZ0Y2huX3BvcnRf
dCBwb3J0LAogCQkJCSAgICAgdW5zaWduZWQgc2hvcnQgY3B1KQogewogCWludCByZXQ7CkBAIC0x
NzEsMTAgKzE3MSwxMCBAQCBzdGF0aWMgaW50IHhlbl9pcnFfaW5mb19jb21tb25fc2V0dXAoc3Ry
dWN0IGlycV9pbmZvICppbmZvLAogCiAJaW5mby0+dHlwZSA9IHR5cGU7CiAJaW5mby0+aXJxID0g
aXJxOwotCWluZm8tPmV2dGNobiA9IGV2dGNobjsKKwlpbmZvLT5ldnRjaG4gPSBwb3J0OwogCWlu
Zm8tPmNwdSA9IGNwdTsKIAotCXJldCA9IHNldF9ldnRjaG5fdG9faXJxKGV2dGNobiwgaXJxKTsK
KwlyZXQgPSBzZXRfZXZ0Y2huX3RvX2lycShwb3J0LCBpcnEpOwogCWlmIChyZXQgPCAwKQogCQly
ZXR1cm4gcmV0OwogCkBAIC0xODQsMTYgKzE4NCwxNiBAQCBzdGF0aWMgaW50IHhlbl9pcnFfaW5m
b19jb21tb25fc2V0dXAoc3RydWN0IGlycV9pbmZvICppbmZvLAogfQogCiBzdGF0aWMgaW50IHhl
bl9pcnFfaW5mb19ldnRjaG5fc2V0dXAodW5zaWduZWQgaXJxLAotCQkJCSAgICAgdW5zaWduZWQg
ZXZ0Y2huKQorCQkJCSAgICAgZXZ0Y2huX3BvcnRfdCBwb3J0KQogewogCXN0cnVjdCBpcnFfaW5m
byAqaW5mbyA9IGluZm9fZm9yX2lycShpcnEpOwogCi0JcmV0dXJuIHhlbl9pcnFfaW5mb19jb21t
b25fc2V0dXAoaW5mbywgaXJxLCBJUlFUX0VWVENITiwgZXZ0Y2huLCAwKTsKKwlyZXR1cm4geGVu
X2lycV9pbmZvX2NvbW1vbl9zZXR1cChpbmZvLCBpcnEsIElSUVRfRVZUQ0hOLCBwb3J0LCAwKTsK
IH0KIAogc3RhdGljIGludCB4ZW5faXJxX2luZm9faXBpX3NldHVwKHVuc2lnbmVkIGNwdSwKIAkJ
CQkgIHVuc2lnbmVkIGlycSwKLQkJCQkgIHVuc2lnbmVkIGV2dGNobiwKKwkJCQkgIGV2dGNobl9w
b3J0X3QgcG9ydCwKIAkJCQkgIGVudW0gaXBpX3ZlY3RvciBpcGkpCiB7CiAJc3RydWN0IGlycV9p
bmZvICppbmZvID0gaW5mb19mb3JfaXJxKGlycSk7CkBAIC0yMDIsMTIgKzIwMiwxMiBAQCBzdGF0
aWMgaW50IHhlbl9pcnFfaW5mb19pcGlfc2V0dXAodW5zaWduZWQgY3B1LAogCiAJcGVyX2NwdShp
cGlfdG9faXJxLCBjcHUpW2lwaV0gPSBpcnE7CiAKLQlyZXR1cm4geGVuX2lycV9pbmZvX2NvbW1v
bl9zZXR1cChpbmZvLCBpcnEsIElSUVRfSVBJLCBldnRjaG4sIDApOworCXJldHVybiB4ZW5faXJx
X2luZm9fY29tbW9uX3NldHVwKGluZm8sIGlycSwgSVJRVF9JUEksIHBvcnQsIDApOwogfQogCiBz
dGF0aWMgaW50IHhlbl9pcnFfaW5mb192aXJxX3NldHVwKHVuc2lnbmVkIGNwdSwKIAkJCQkgICB1
bnNpZ25lZCBpcnEsCi0JCQkJICAgdW5zaWduZWQgZXZ0Y2huLAorCQkJCSAgIGV2dGNobl9wb3J0
X3QgcG9ydCwKIAkJCQkgICB1bnNpZ25lZCB2aXJxKQogewogCXN0cnVjdCBpcnFfaW5mbyAqaW5m
byA9IGluZm9fZm9yX2lycShpcnEpOwpAQCAtMjE2LDExICsyMTYsMTEgQEAgc3RhdGljIGludCB4
ZW5faXJxX2luZm9fdmlycV9zZXR1cCh1bnNpZ25lZCBjcHUsCiAKIAlwZXJfY3B1KHZpcnFfdG9f
aXJxLCBjcHUpW3ZpcnFdID0gaXJxOwogCi0JcmV0dXJuIHhlbl9pcnFfaW5mb19jb21tb25fc2V0
dXAoaW5mbywgaXJxLCBJUlFUX1ZJUlEsIGV2dGNobiwgMCk7CisJcmV0dXJuIHhlbl9pcnFfaW5m
b19jb21tb25fc2V0dXAoaW5mbywgaXJxLCBJUlFUX1ZJUlEsIHBvcnQsIDApOwogfQogCiBzdGF0
aWMgaW50IHhlbl9pcnFfaW5mb19waXJxX3NldHVwKHVuc2lnbmVkIGlycSwKLQkJCQkgICB1bnNp
Z25lZCBldnRjaG4sCisJCQkJICAgZXZ0Y2huX3BvcnRfdCBwb3J0LAogCQkJCSAgIHVuc2lnbmVk
IHBpcnEsCiAJCQkJICAgdW5zaWduZWQgZ3NpLAogCQkJCSAgIHVpbnQxNl90IGRvbWlkLApAQCAt
MjMzLDcgKzIzMyw3IEBAIHN0YXRpYyBpbnQgeGVuX2lycV9pbmZvX3BpcnFfc2V0dXAodW5zaWdu
ZWQgaXJxLAogCWluZm8tPnUucGlycS5kb21pZCA9IGRvbWlkOwogCWluZm8tPnUucGlycS5mbGFn
cyA9IGZsYWdzOwogCi0JcmV0dXJuIHhlbl9pcnFfaW5mb19jb21tb25fc2V0dXAoaW5mbywgaXJx
LCBJUlFUX1BJUlEsIGV2dGNobiwgMCk7CisJcmV0dXJuIHhlbl9pcnFfaW5mb19jb21tb25fc2V0
dXAoaW5mbywgaXJxLCBJUlFUX1BJUlEsIHBvcnQsIDApOwogfQogCiBzdGF0aWMgdm9pZCB4ZW5f
aXJxX2luZm9fY2xlYW51cChzdHJ1Y3QgaXJxX2luZm8gKmluZm8pCkBAIC0yNTMsOSArMjUzLDkg
QEAgdW5zaWduZWQgaW50IGV2dGNobl9mcm9tX2lycSh1bnNpZ25lZCBpcnEpCiAJcmV0dXJuIGlu
Zm9fZm9yX2lycShpcnEpLT5ldnRjaG47CiB9CiAKLXVuc2lnbmVkIGlycV9mcm9tX2V2dGNobih1
bnNpZ25lZCBpbnQgZXZ0Y2huKQordW5zaWduZWQgaW50IGlycV9mcm9tX2V2dGNobihldnRjaG5f
cG9ydF90IHBvcnQpCiB7Ci0JcmV0dXJuIGdldF9ldnRjaG5fdG9faXJxKGV2dGNobik7CisJcmV0
dXJuIGdldF9ldnRjaG5fdG9faXJxKHBvcnQpOwogfQogRVhQT1JUX1NZTUJPTF9HUEwoaXJxX2Zy
b21fZXZ0Y2huKTsKIApAQCAtMzA0LDkgKzMwNCw5IEBAIHVuc2lnbmVkIGNwdV9mcm9tX2lycSh1
bnNpZ25lZCBpcnEpCiAJcmV0dXJuIGluZm9fZm9yX2lycShpcnEpLT5jcHU7CiB9CiAKLXVuc2ln
bmVkIGludCBjcHVfZnJvbV9ldnRjaG4odW5zaWduZWQgaW50IGV2dGNobikKK3Vuc2lnbmVkIGlu
dCBjcHVfZnJvbV9ldnRjaG4oZXZ0Y2huX3BvcnRfdCBwb3J0KQogewotCWludCBpcnEgPSBnZXRf
ZXZ0Y2huX3RvX2lycShldnRjaG4pOworCWludCBpcnEgPSBnZXRfZXZ0Y2huX3RvX2lycShwb3J0
KTsKIAl1bnNpZ25lZCByZXQgPSAwOwogCiAJaWYgKGlycSAhPSAtMSkKQEAgLTM1NCwxMCArMzU0
LDEwIEBAIHN0YXRpYyB2b2lkIGJpbmRfZXZ0Y2huX3RvX2NwdSh1bnNpZ25lZCBpbnQgY2huLCB1
bnNpZ25lZCBpbnQgY3B1KQogICovCiB2b2lkIG5vdGlmeV9yZW1vdGVfdmlhX2lycShpbnQgaXJx
KQogewotCWludCBldnRjaG4gPSBldnRjaG5fZnJvbV9pcnEoaXJxKTsKKwlldnRjaG5fcG9ydF90
IHBvcnQgPSBldnRjaG5fZnJvbV9pcnEoaXJxKTsKIAotCWlmIChWQUxJRF9FVlRDSE4oZXZ0Y2hu
KSkKLQkJbm90aWZ5X3JlbW90ZV92aWFfZXZ0Y2huKGV2dGNobik7CisJaWYgKFZBTElEX0VWVENI
Tihwb3J0KSkKKwkJbm90aWZ5X3JlbW90ZV92aWFfZXZ0Y2huKHBvcnQpOwogfQogRVhQT1JUX1NZ
TUJPTF9HUEwobm90aWZ5X3JlbW90ZV92aWFfaXJxKTsKIApAQCAtNDQ1LDcgKzQ0NSw3IEBAIHN0
YXRpYyB2b2lkIHhlbl9mcmVlX2lycSh1bnNpZ25lZCBpcnEpCiAJaXJxX2ZyZWVfZGVzYyhpcnEp
OwogfQogCi1zdGF0aWMgdm9pZCB4ZW5fZXZ0Y2huX2Nsb3NlKHVuc2lnbmVkIGludCBwb3J0KQor
c3RhdGljIHZvaWQgeGVuX2V2dGNobl9jbG9zZShldnRjaG5fcG9ydF90IHBvcnQpCiB7CiAJc3Ry
dWN0IGV2dGNobl9jbG9zZSBjbG9zZTsKIApAQCAtNDcyLDI1ICs0NzIsMjUgQEAgc3RhdGljIHZv
aWQgcGlycV9xdWVyeV91bm1hc2soaW50IGlycSkKIAogc3RhdGljIHZvaWQgZW9pX3BpcnEoc3Ry
dWN0IGlycV9kYXRhICpkYXRhKQogewotCWludCBldnRjaG4gPSBldnRjaG5fZnJvbV9pcnEoZGF0
YS0+aXJxKTsKKwlldnRjaG5fcG9ydF90IHBvcnQgPSBldnRjaG5fZnJvbV9pcnEoZGF0YS0+aXJx
KTsKIAlzdHJ1Y3QgcGh5c2Rldl9lb2kgZW9pID0geyAuaXJxID0gcGlycV9mcm9tX2lycShkYXRh
LT5pcnEpIH07CiAJaW50IHJjID0gMDsKIAotCWlmICghVkFMSURfRVZUQ0hOKGV2dGNobikpCisJ
aWYgKCFWQUxJRF9FVlRDSE4ocG9ydCkpCiAJCXJldHVybjsKIAogCWlmICh1bmxpa2VseShpcnFk
X2lzX3NldGFmZmluaXR5X3BlbmRpbmcoZGF0YSkpICYmCiAJICAgIGxpa2VseSghaXJxZF9pcnFf
ZGlzYWJsZWQoZGF0YSkpKSB7Ci0JCWludCBtYXNrZWQgPSB0ZXN0X2FuZF9zZXRfbWFzayhldnRj
aG4pOworCQlpbnQgbWFza2VkID0gdGVzdF9hbmRfc2V0X21hc2socG9ydCk7CiAKLQkJY2xlYXJf
ZXZ0Y2huKGV2dGNobik7CisJCWNsZWFyX2V2dGNobihwb3J0KTsKIAogCQlpcnFfbW92ZV9tYXNr
ZWRfaXJxKGRhdGEpOwogCiAJCWlmICghbWFza2VkKQotCQkJdW5tYXNrX2V2dGNobihldnRjaG4p
OworCQkJdW5tYXNrX2V2dGNobihwb3J0KTsKIAl9IGVsc2UKLQkJY2xlYXJfZXZ0Y2huKGV2dGNo
bik7CisJCWNsZWFyX2V2dGNobihwb3J0KTsKIAogCWlmIChwaXJxX25lZWRzX2VvaShkYXRhLT5p
cnEpKSB7CiAJCXJjID0gSFlQRVJWSVNPUl9waHlzZGV2X29wKFBIWVNERVZPUF9lb2ksICZlb2kp
OwpAQCAtNTA4LDEyICs1MDgsMTIgQEAgc3RhdGljIHVuc2lnbmVkIGludCBfX3N0YXJ0dXBfcGly
cSh1bnNpZ25lZCBpbnQgaXJxKQogewogCXN0cnVjdCBldnRjaG5fYmluZF9waXJxIGJpbmRfcGly
cTsKIAlzdHJ1Y3QgaXJxX2luZm8gKmluZm8gPSBpbmZvX2Zvcl9pcnEoaXJxKTsKLQlpbnQgZXZ0
Y2huID0gZXZ0Y2huX2Zyb21faXJxKGlycSk7CisJZXZ0Y2huX3BvcnRfdCBwb3J0ID0gZXZ0Y2hu
X2Zyb21faXJxKGlycSk7CiAJaW50IHJjOwogCiAJQlVHX09OKGluZm8tPnR5cGUgIT0gSVJRVF9Q
SVJRKTsKIAotCWlmIChWQUxJRF9FVlRDSE4oZXZ0Y2huKSkKKwlpZiAoVkFMSURfRVZUQ0hOKHBv
cnQpKQogCQlnb3RvIG91dDsKIAogCWJpbmRfcGlycS5waXJxID0gcGlycV9mcm9tX2lycShpcnEp
OwpAQCAtNTI1LDMwICs1MjUsMzAgQEAgc3RhdGljIHVuc2lnbmVkIGludCBfX3N0YXJ0dXBfcGly
cSh1bnNpZ25lZCBpbnQgaXJxKQogCQlwcl93YXJuKCJGYWlsZWQgdG8gb2J0YWluIHBoeXNpY2Fs
IElSUSAlZFxuIiwgaXJxKTsKIAkJcmV0dXJuIDA7CiAJfQotCWV2dGNobiA9IGJpbmRfcGlycS5w
b3J0OworCXBvcnQgPSBiaW5kX3BpcnEucG9ydDsKIAogCXBpcnFfcXVlcnlfdW5tYXNrKGlycSk7
CiAKLQlyYyA9IHNldF9ldnRjaG5fdG9faXJxKGV2dGNobiwgaXJxKTsKKwlyYyA9IHNldF9ldnRj
aG5fdG9faXJxKHBvcnQsIGlycSk7CiAJaWYgKHJjKQogCQlnb3RvIGVycjsKIAotCWluZm8tPmV2
dGNobiA9IGV2dGNobjsKLQliaW5kX2V2dGNobl90b19jcHUoZXZ0Y2huLCAwKTsKKwlpbmZvLT5l
dnRjaG4gPSBwb3J0OworCWJpbmRfZXZ0Y2huX3RvX2NwdShwb3J0LCAwKTsKIAogCXJjID0geGVu
X2V2dGNobl9wb3J0X3NldHVwKGluZm8pOwogCWlmIChyYykKIAkJZ290byBlcnI7CiAKIG91dDoK
LQl1bm1hc2tfZXZ0Y2huKGV2dGNobik7CisJdW5tYXNrX2V2dGNobihwb3J0KTsKIAllb2lfcGly
cShpcnFfZ2V0X2lycV9kYXRhKGlycSkpOwogCiAJcmV0dXJuIDA7CiAKIGVycjoKIAlwcl9lcnIo
ImlycSVkOiBGYWlsZWQgdG8gc2V0IHBvcnQgdG8gaXJxIG1hcHBpbmcgKCVkKVxuIiwgaXJxLCBy
Yyk7Ci0JeGVuX2V2dGNobl9jbG9zZShldnRjaG4pOworCXhlbl9ldnRjaG5fY2xvc2UocG9ydCk7
CiAJcmV0dXJuIDA7CiB9CiAKQEAgLTU2MSwxNSArNTYxLDE1IEBAIHN0YXRpYyB2b2lkIHNodXRk
b3duX3BpcnEoc3RydWN0IGlycV9kYXRhICpkYXRhKQogewogCXVuc2lnbmVkIGludCBpcnEgPSBk
YXRhLT5pcnE7CiAJc3RydWN0IGlycV9pbmZvICppbmZvID0gaW5mb19mb3JfaXJxKGlycSk7Ci0J
dW5zaWduZWQgZXZ0Y2huID0gZXZ0Y2huX2Zyb21faXJxKGlycSk7CisJZXZ0Y2huX3BvcnRfdCBw
b3J0ID0gZXZ0Y2huX2Zyb21faXJxKGlycSk7CiAKIAlCVUdfT04oaW5mby0+dHlwZSAhPSBJUlFU
X1BJUlEpOwogCi0JaWYgKCFWQUxJRF9FVlRDSE4oZXZ0Y2huKSkKKwlpZiAoIVZBTElEX0VWVENI
Tihwb3J0KSkKIAkJcmV0dXJuOwogCi0JbWFza19ldnRjaG4oZXZ0Y2huKTsKLQl4ZW5fZXZ0Y2hu
X2Nsb3NlKGV2dGNobik7CisJbWFza19ldnRjaG4ocG9ydCk7CisJeGVuX2V2dGNobl9jbG9zZShw
b3J0KTsKIAl4ZW5faXJxX2luZm9fY2xlYW51cChpbmZvKTsKIH0KIApAQCAtNjAxLDcgKzYwMSw3
IEBAIEVYUE9SVF9TWU1CT0xfR1BMKHhlbl9pcnFfZnJvbV9nc2kpOwogCiBzdGF0aWMgdm9pZCBf
X3VuYmluZF9mcm9tX2lycSh1bnNpZ25lZCBpbnQgaXJxKQogewotCWludCBldnRjaG4gPSBldnRj
aG5fZnJvbV9pcnEoaXJxKTsKKwlldnRjaG5fcG9ydF90IHBvcnQgPSBldnRjaG5fZnJvbV9pcnEo
aXJxKTsKIAlzdHJ1Y3QgaXJxX2luZm8gKmluZm8gPSBpcnFfZ2V0X2hhbmRsZXJfZGF0YShpcnEp
OwogCiAJaWYgKGluZm8tPnJlZmNudCA+IDApIHsKQEAgLTYxMCwxMCArNjEwLDEwIEBAIHN0YXRp
YyB2b2lkIF9fdW5iaW5kX2Zyb21faXJxKHVuc2lnbmVkIGludCBpcnEpCiAJCQlyZXR1cm47CiAJ
fQogCi0JaWYgKFZBTElEX0VWVENITihldnRjaG4pKSB7CisJaWYgKFZBTElEX0VWVENITihwb3J0
KSkgewogCQl1bnNpZ25lZCBpbnQgY3B1ID0gY3B1X2Zyb21faXJxKGlycSk7CiAKLQkJeGVuX2V2
dGNobl9jbG9zZShldnRjaG4pOworCQl4ZW5fZXZ0Y2huX2Nsb3NlKHBvcnQpOwogCiAJCXN3aXRj
aCAodHlwZV9mcm9tX2lycShpcnEpKSB7CiAJCWNhc2UgSVJRVF9WSVJROgpAQCAtODI3LDE3ICs4
MjcsMTcgQEAgaW50IHhlbl9waXJxX2Zyb21faXJxKHVuc2lnbmVkIGlycSkKIH0KIEVYUE9SVF9T
WU1CT0xfR1BMKHhlbl9waXJxX2Zyb21faXJxKTsKIAotaW50IGJpbmRfZXZ0Y2huX3RvX2lycSh1
bnNpZ25lZCBpbnQgZXZ0Y2huKQoraW50IGJpbmRfZXZ0Y2huX3RvX2lycShldnRjaG5fcG9ydF90
IHBvcnQpCiB7CiAJaW50IGlycTsKIAlpbnQgcmV0OwogCi0JaWYgKGV2dGNobiA+PSB4ZW5fZXZ0
Y2huX21heF9jaGFubmVscygpKQorCWlmIChwb3J0ID49IHhlbl9ldnRjaG5fbWF4X2NoYW5uZWxz
KCkpCiAJCXJldHVybiAtRU5PTUVNOwogCiAJbXV0ZXhfbG9jaygmaXJxX21hcHBpbmdfdXBkYXRl
X2xvY2spOwogCi0JaXJxID0gZ2V0X2V2dGNobl90b19pcnEoZXZ0Y2huKTsKKwlpcnEgPSBnZXRf
ZXZ0Y2huX3RvX2lycShwb3J0KTsKIAogCWlmIChpcnEgPT0gLTEpIHsKIAkJaXJxID0geGVuX2Fs
bG9jYXRlX2lycV9keW5hbWljKCk7CkBAIC04NDcsMTQgKzg0NywxNCBAQCBpbnQgYmluZF9ldnRj
aG5fdG9faXJxKHVuc2lnbmVkIGludCBldnRjaG4pCiAJCWlycV9zZXRfY2hpcF9hbmRfaGFuZGxl
cl9uYW1lKGlycSwgJnhlbl9keW5hbWljX2NoaXAsCiAJCQkJCSAgICAgIGhhbmRsZV9lZGdlX2ly
cSwgImV2ZW50Iik7CiAKLQkJcmV0ID0geGVuX2lycV9pbmZvX2V2dGNobl9zZXR1cChpcnEsIGV2
dGNobik7CisJCXJldCA9IHhlbl9pcnFfaW5mb19ldnRjaG5fc2V0dXAoaXJxLCBwb3J0KTsKIAkJ
aWYgKHJldCA8IDApIHsKIAkJCV9fdW5iaW5kX2Zyb21faXJxKGlycSk7CiAJCQlpcnEgPSByZXQ7
CiAJCQlnb3RvIG91dDsKIAkJfQogCQkvKiBOZXcgaW50ZXJkb21haW4gZXZlbnRzIGFyZSBib3Vu
ZCB0byBWQ1BVIDAuICovCi0JCWJpbmRfZXZ0Y2huX3RvX2NwdShldnRjaG4sIDApOworCQliaW5k
X2V2dGNobl90b19jcHUocG9ydCwgMCk7CiAJfSBlbHNlIHsKIAkJc3RydWN0IGlycV9pbmZvICpp
bmZvID0gaW5mb19mb3JfaXJxKGlycSk7CiAJCVdBUk5fT04oaW5mbyA9PSBOVUxMIHx8IGluZm8t
PnR5cGUgIT0gSVJRVF9FVlRDSE4pOwpAQCAtODcwLDggKzg3MCw4IEBAIEVYUE9SVF9TWU1CT0xf
R1BMKGJpbmRfZXZ0Y2huX3RvX2lycSk7CiBzdGF0aWMgaW50IGJpbmRfaXBpX3RvX2lycSh1bnNp
Z25lZCBpbnQgaXBpLCB1bnNpZ25lZCBpbnQgY3B1KQogewogCXN0cnVjdCBldnRjaG5fYmluZF9p
cGkgYmluZF9pcGk7Ci0JaW50IGV2dGNobiwgaXJxOwotCWludCByZXQ7CisJZXZ0Y2huX3BvcnRf
dCBwb3J0OworCWludCByZXQsIGlycTsKIAogCW11dGV4X2xvY2soJmlycV9tYXBwaW5nX3VwZGF0
ZV9sb2NrKTsKIApAQCAtODg5LDE1ICs4ODksMTUgQEAgc3RhdGljIGludCBiaW5kX2lwaV90b19p
cnEodW5zaWduZWQgaW50IGlwaSwgdW5zaWduZWQgaW50IGNwdSkKIAkJaWYgKEhZUEVSVklTT1Jf
ZXZlbnRfY2hhbm5lbF9vcChFVlRDSE5PUF9iaW5kX2lwaSwKIAkJCQkJCSZiaW5kX2lwaSkgIT0g
MCkKIAkJCUJVRygpOwotCQlldnRjaG4gPSBiaW5kX2lwaS5wb3J0OworCQlwb3J0ID0gYmluZF9p
cGkucG9ydDsKIAotCQlyZXQgPSB4ZW5faXJxX2luZm9faXBpX3NldHVwKGNwdSwgaXJxLCBldnRj
aG4sIGlwaSk7CisJCXJldCA9IHhlbl9pcnFfaW5mb19pcGlfc2V0dXAoY3B1LCBpcnEsIHBvcnQs
IGlwaSk7CiAJCWlmIChyZXQgPCAwKSB7CiAJCQlfX3VuYmluZF9mcm9tX2lycShpcnEpOwogCQkJ
aXJxID0gcmV0OwogCQkJZ290byBvdXQ7CiAJCX0KLQkJYmluZF9ldnRjaG5fdG9fY3B1KGV2dGNo
biwgY3B1KTsKKwkJYmluZF9ldnRjaG5fdG9fY3B1KHBvcnQsIGNwdSk7CiAJfSBlbHNlIHsKIAkJ
c3RydWN0IGlycV9pbmZvICppbmZvID0gaW5mb19mb3JfaXJxKGlycSk7CiAJCVdBUk5fT04oaW5m
byA9PSBOVUxMIHx8IGluZm8tPnR5cGUgIT0gSVJRVF9JUEkpOwpAQCAtOTA5LDcgKzkwOSw3IEBA
IHN0YXRpYyBpbnQgYmluZF9pcGlfdG9faXJxKHVuc2lnbmVkIGludCBpcGksIHVuc2lnbmVkIGlu
dCBjcHUpCiB9CiAKIGludCBiaW5kX2ludGVyZG9tYWluX2V2dGNobl90b19pcnEodW5zaWduZWQg
aW50IHJlbW90ZV9kb21haW4sCi0JCQkJICAgdW5zaWduZWQgaW50IHJlbW90ZV9wb3J0KQorCQkJ
CSAgIGV2dGNobl9wb3J0X3QgcmVtb3RlX3BvcnQpCiB7CiAJc3RydWN0IGV2dGNobl9iaW5kX2lu
dGVyZG9tYWluIGJpbmRfaW50ZXJkb21haW47CiAJaW50IGVycjsKQEAgLTkyNyw3ICs5MjcsOCBA
QCBFWFBPUlRfU1lNQk9MX0dQTChiaW5kX2ludGVyZG9tYWluX2V2dGNobl90b19pcnEpOwogc3Rh
dGljIGludCBmaW5kX3ZpcnEodW5zaWduZWQgaW50IHZpcnEsIHVuc2lnbmVkIGludCBjcHUpCiB7
CiAJc3RydWN0IGV2dGNobl9zdGF0dXMgc3RhdHVzOwotCWludCBwb3J0LCByYyA9IC1FTk9FTlQ7
CisJZXZ0Y2huX3BvcnRfdCBwb3J0OworCWludCByYyA9IC1FTk9FTlQ7CiAKIAltZW1zZXQoJnN0
YXR1cywgMCwgc2l6ZW9mKHN0YXR1cykpOwogCWZvciAocG9ydCA9IDA7IHBvcnQgPCB4ZW5fZXZ0
Y2huX21heF9jaGFubmVscygpOyBwb3J0KyspIHsKQEAgLTk2Miw3ICs5NjMsOCBAQCBFWFBPUlRf
U1lNQk9MX0dQTCh4ZW5fZXZ0Y2huX25yX2NoYW5uZWxzKTsKIGludCBiaW5kX3ZpcnFfdG9faXJx
KHVuc2lnbmVkIGludCB2aXJxLCB1bnNpZ25lZCBpbnQgY3B1LCBib29sIHBlcmNwdSkKIHsKIAlz
dHJ1Y3QgZXZ0Y2huX2JpbmRfdmlycSBiaW5kX3ZpcnE7Ci0JaW50IGV2dGNobiwgaXJxLCByZXQ7
CisJZXZ0Y2huX3BvcnRfdCBwb3J0ID0geGVuX2V2dGNobl9tYXhfY2hhbm5lbHMoKTsKKwlpbnQg
aXJxLCByZXQ7CiAKIAltdXRleF9sb2NrKCZpcnFfbWFwcGluZ191cGRhdGVfbG9jayk7CiAKQEAg
LTk4NSwyMiArOTg3LDIxIEBAIGludCBiaW5kX3ZpcnFfdG9faXJxKHVuc2lnbmVkIGludCB2aXJx
LCB1bnNpZ25lZCBpbnQgY3B1LCBib29sIHBlcmNwdSkKIAkJcmV0ID0gSFlQRVJWSVNPUl9ldmVu
dF9jaGFubmVsX29wKEVWVENITk9QX2JpbmRfdmlycSwKIAkJCQkJCSZiaW5kX3ZpcnEpOwogCQlp
ZiAocmV0ID09IDApCi0JCQlldnRjaG4gPSBiaW5kX3ZpcnEucG9ydDsKKwkJCXBvcnQgPSBiaW5k
X3ZpcnEucG9ydDsKIAkJZWxzZSB7CiAJCQlpZiAocmV0ID09IC1FRVhJU1QpCiAJCQkJcmV0ID0g
ZmluZF92aXJxKHZpcnEsIGNwdSk7CiAJCQlCVUdfT04ocmV0IDwgMCk7Ci0JCQlldnRjaG4gPSBy
ZXQ7CiAJCX0KIAotCQlyZXQgPSB4ZW5faXJxX2luZm9fdmlycV9zZXR1cChjcHUsIGlycSwgZXZ0
Y2huLCB2aXJxKTsKKwkJcmV0ID0geGVuX2lycV9pbmZvX3ZpcnFfc2V0dXAoY3B1LCBpcnEsIHBv
cnQsIHZpcnEpOwogCQlpZiAocmV0IDwgMCkgewogCQkJX191bmJpbmRfZnJvbV9pcnEoaXJxKTsK
IAkJCWlycSA9IHJldDsKIAkJCWdvdG8gb3V0OwogCQl9CiAKLQkJYmluZF9ldnRjaG5fdG9fY3B1
KGV2dGNobiwgY3B1KTsKKwkJYmluZF9ldnRjaG5fdG9fY3B1KHBvcnQsIGNwdSk7CiAJfSBlbHNl
IHsKIAkJc3RydWN0IGlycV9pbmZvICppbmZvID0gaW5mb19mb3JfaXJxKGlycSk7CiAJCVdBUk5f
T04oaW5mbyA9PSBOVUxMIHx8IGluZm8tPnR5cGUgIT0gSVJRVF9WSVJRKTsKQEAgLTEwMTksMTQg
KzEwMjAsMTQgQEAgc3RhdGljIHZvaWQgdW5iaW5kX2Zyb21faXJxKHVuc2lnbmVkIGludCBpcnEp
CiAJbXV0ZXhfdW5sb2NrKCZpcnFfbWFwcGluZ191cGRhdGVfbG9jayk7CiB9CiAKLWludCBiaW5k
X2V2dGNobl90b19pcnFoYW5kbGVyKHVuc2lnbmVkIGludCBldnRjaG4sCitpbnQgYmluZF9ldnRj
aG5fdG9faXJxaGFuZGxlcihldnRjaG5fcG9ydF90IHBvcnQsCiAJCQkgICAgICBpcnFfaGFuZGxl
cl90IGhhbmRsZXIsCiAJCQkgICAgICB1bnNpZ25lZCBsb25nIGlycWZsYWdzLAogCQkJICAgICAg
Y29uc3QgY2hhciAqZGV2bmFtZSwgdm9pZCAqZGV2X2lkKQogewogCWludCBpcnEsIHJldHZhbDsK
IAotCWlycSA9IGJpbmRfZXZ0Y2huX3RvX2lycShldnRjaG4pOworCWlycSA9IGJpbmRfZXZ0Y2hu
X3RvX2lycShwb3J0KTsKIAlpZiAoaXJxIDwgMCkKIAkJcmV0dXJuIGlycTsKIAlyZXR2YWwgPSBy
ZXF1ZXN0X2lycShpcnEsIGhhbmRsZXIsIGlycWZsYWdzLCBkZXZuYW1lLCBkZXZfaWQpOwpAQCAt
MTA0MCw3ICsxMDQxLDcgQEAgaW50IGJpbmRfZXZ0Y2huX3RvX2lycWhhbmRsZXIodW5zaWduZWQg
aW50IGV2dGNobiwKIEVYUE9SVF9TWU1CT0xfR1BMKGJpbmRfZXZ0Y2huX3RvX2lycWhhbmRsZXIp
OwogCiBpbnQgYmluZF9pbnRlcmRvbWFpbl9ldnRjaG5fdG9faXJxaGFuZGxlcih1bnNpZ25lZCBp
bnQgcmVtb3RlX2RvbWFpbiwKLQkJCQkJICB1bnNpZ25lZCBpbnQgcmVtb3RlX3BvcnQsCisJCQkJ
CSAgZXZ0Y2huX3BvcnRfdCByZW1vdGVfcG9ydCwKIAkJCQkJICBpcnFfaGFuZGxlcl90IGhhbmRs
ZXIsCiAJCQkJCSAgdW5zaWduZWQgbG9uZyBpcnFmbGFncywKIAkJCQkJICBjb25zdCBjaGFyICpk
ZXZuYW1lLApAQCAtMTEzMiw5ICsxMTMzLDkgQEAgaW50IHhlbl9zZXRfaXJxX3ByaW9yaXR5KHVu
c2lnbmVkIGlycSwgdW5zaWduZWQgcHJpb3JpdHkpCiB9CiBFWFBPUlRfU1lNQk9MX0dQTCh4ZW5f
c2V0X2lycV9wcmlvcml0eSk7CiAKLWludCBldnRjaG5fbWFrZV9yZWZjb3VudGVkKHVuc2lnbmVk
IGludCBldnRjaG4pCitpbnQgZXZ0Y2huX21ha2VfcmVmY291bnRlZChldnRjaG5fcG9ydF90IHBv
cnQpCiB7Ci0JaW50IGlycSA9IGdldF9ldnRjaG5fdG9faXJxKGV2dGNobik7CisJaW50IGlycSA9
IGdldF9ldnRjaG5fdG9faXJxKHBvcnQpOwogCXN0cnVjdCBpcnFfaW5mbyAqaW5mbzsKIAogCWlm
IChpcnEgPT0gLTEpCkBAIC0xMTUzLDE4ICsxMTU0LDE4IEBAIGludCBldnRjaG5fbWFrZV9yZWZj
b3VudGVkKHVuc2lnbmVkIGludCBldnRjaG4pCiB9CiBFWFBPUlRfU1lNQk9MX0dQTChldnRjaG5f
bWFrZV9yZWZjb3VudGVkKTsKIAotaW50IGV2dGNobl9nZXQodW5zaWduZWQgaW50IGV2dGNobikK
K2ludCBldnRjaG5fZ2V0KGV2dGNobl9wb3J0X3QgcG9ydCkKIHsKIAlpbnQgaXJxOwogCXN0cnVj
dCBpcnFfaW5mbyAqaW5mbzsKIAlpbnQgZXJyID0gLUVOT0VOVDsKIAotCWlmIChldnRjaG4gPj0g
eGVuX2V2dGNobl9tYXhfY2hhbm5lbHMoKSkKKwlpZiAocG9ydCA+PSB4ZW5fZXZ0Y2huX21heF9j
aGFubmVscygpKQogCQlyZXR1cm4gLUVJTlZBTDsKIAogCW11dGV4X2xvY2soJmlycV9tYXBwaW5n
X3VwZGF0ZV9sb2NrKTsKIAotCWlycSA9IGdldF9ldnRjaG5fdG9faXJxKGV2dGNobik7CisJaXJx
ID0gZ2V0X2V2dGNobl90b19pcnEocG9ydCk7CiAJaWYgKGlycSA9PSAtMSkKIAkJZ290byBkb25l
OwogCkBAIC0xMTg2LDkgKzExODcsOSBAQCBpbnQgZXZ0Y2huX2dldCh1bnNpZ25lZCBpbnQgZXZ0
Y2huKQogfQogRVhQT1JUX1NZTUJPTF9HUEwoZXZ0Y2huX2dldCk7CiAKLXZvaWQgZXZ0Y2huX3B1
dCh1bnNpZ25lZCBpbnQgZXZ0Y2huKQordm9pZCBldnRjaG5fcHV0KGV2dGNobl9wb3J0X3QgcG9y
dCkKIHsKLQlpbnQgaXJxID0gZ2V0X2V2dGNobl90b19pcnEoZXZ0Y2huKTsKKwlpbnQgaXJxID0g
Z2V0X2V2dGNobl90b19pcnEocG9ydCk7CiAJaWYgKFdBUk5fT04oaXJxID09IC0xKSkKIAkJcmV0
dXJuOwogCXVuYmluZF9mcm9tX2lycShpcnEpOwpAQCAtMTI1Miw3ICsxMjUzLDcgQEAgdm9pZCB4
ZW5faHZtX2V2dGNobl9kb191cGNhbGwodm9pZCkKIEVYUE9SVF9TWU1CT0xfR1BMKHhlbl9odm1f
ZXZ0Y2huX2RvX3VwY2FsbCk7CiAKIC8qIFJlYmluZCBhIG5ldyBldmVudCBjaGFubmVsIHRvIGFu
IGV4aXN0aW5nIGlycS4gKi8KLXZvaWQgcmViaW5kX2V2dGNobl9pcnEoaW50IGV2dGNobiwgaW50
IGlycSkKK3ZvaWQgcmViaW5kX2V2dGNobl9pcnEoZXZ0Y2huX3BvcnRfdCBwb3J0LCBpbnQgaXJx
KQogewogCXN0cnVjdCBpcnFfaW5mbyAqaW5mbyA9IGluZm9fZm9yX2lycShpcnEpOwogCkBAIC0x
MjY2LDE2ICsxMjY3LDE2IEBAIHZvaWQgcmViaW5kX2V2dGNobl9pcnEoaW50IGV2dGNobiwgaW50
IGlycSkKIAltdXRleF9sb2NrKCZpcnFfbWFwcGluZ191cGRhdGVfbG9jayk7CiAKIAkvKiBBZnRl
ciByZXN1bWUgdGhlIGlycTwtPmV2dGNobiBtYXBwaW5ncyBhcmUgYWxsIGNsZWFyZWQgb3V0ICov
Ci0JQlVHX09OKGdldF9ldnRjaG5fdG9faXJxKGV2dGNobikgIT0gLTEpOworCUJVR19PTihnZXRf
ZXZ0Y2huX3RvX2lycShwb3J0KSAhPSAtMSk7CiAJLyogRXhwZWN0IGlycSB0byBoYXZlIGJlZW4g
Ym91bmQgYmVmb3JlLAogCSAgIHNvIHRoZXJlIHNob3VsZCBiZSBhIHByb3BlciB0eXBlICovCiAJ
QlVHX09OKGluZm8tPnR5cGUgPT0gSVJRVF9VTkJPVU5EKTsKIAotCSh2b2lkKXhlbl9pcnFfaW5m
b19ldnRjaG5fc2V0dXAoaXJxLCBldnRjaG4pOworCSh2b2lkKXhlbl9pcnFfaW5mb19ldnRjaG5f
c2V0dXAoaXJxLCBwb3J0KTsKIAogCW11dGV4X3VubG9jaygmaXJxX21hcHBpbmdfdXBkYXRlX2xv
Y2spOwogCi0gICAgICAgIGJpbmRfZXZ0Y2huX3RvX2NwdShldnRjaG4sIGluZm8tPmNwdSk7CisJ
YmluZF9ldnRjaG5fdG9fY3B1KHBvcnQsIGluZm8tPmNwdSk7CiAJLyogVGhpcyB3aWxsIGJlIGRl
ZmVycmVkIHVudGlsIGludGVycnVwdCBpcyBwcm9jZXNzZWQgKi8KIAlpcnFfc2V0X2FmZmluaXR5
KGlycSwgY3B1bWFza19vZihpbmZvLT5jcHUpKTsKIApAQCAtMTI4NCwyNiArMTI4NSwyNiBAQCB2
b2lkIHJlYmluZF9ldnRjaG5faXJxKGludCBldnRjaG4sIGludCBpcnEpCiB9CiAKIC8qIFJlYmlu
ZCBhbiBldnRjaG4gc28gdGhhdCBpdCBnZXRzIGRlbGl2ZXJlZCB0byBhIHNwZWNpZmljIGNwdSAq
Lwotc3RhdGljIGludCB4ZW5fcmViaW5kX2V2dGNobl90b19jcHUoaW50IGV2dGNobiwgdW5zaWdu
ZWQgaW50IHRjcHUpCitzdGF0aWMgaW50IHhlbl9yZWJpbmRfZXZ0Y2huX3RvX2NwdShldnRjaG5f
cG9ydF90IHBvcnQsIHVuc2lnbmVkIGludCB0Y3B1KQogewogCXN0cnVjdCBldnRjaG5fYmluZF92
Y3B1IGJpbmRfdmNwdTsKIAlpbnQgbWFza2VkOwogCi0JaWYgKCFWQUxJRF9FVlRDSE4oZXZ0Y2hu
KSkKKwlpZiAoIVZBTElEX0VWVENITihwb3J0KSkKIAkJcmV0dXJuIC0xOwogCiAJaWYgKCF4ZW5f
c3VwcG9ydF9ldnRjaG5fcmViaW5kKCkpCiAJCXJldHVybiAtMTsKIAogCS8qIFNlbmQgZnV0dXJl
IGluc3RhbmNlcyBvZiB0aGlzIGludGVycnVwdCB0byBvdGhlciB2Y3B1LiAqLwotCWJpbmRfdmNw
dS5wb3J0ID0gZXZ0Y2huOworCWJpbmRfdmNwdS5wb3J0ID0gcG9ydDsKIAliaW5kX3ZjcHUudmNw
dSA9IHhlbl92Y3B1X25yKHRjcHUpOwogCiAJLyoKIAkgKiBNYXNrIHRoZSBldmVudCB3aGlsZSBj
aGFuZ2luZyB0aGUgVkNQVSBiaW5kaW5nIHRvIHByZXZlbnQKIAkgKiBpdCBiZWluZyBkZWxpdmVy
ZWQgb24gYW4gdW5leHBlY3RlZCBWQ1BVLgogCSAqLwotCW1hc2tlZCA9IHRlc3RfYW5kX3NldF9t
YXNrKGV2dGNobik7CisJbWFza2VkID0gdGVzdF9hbmRfc2V0X21hc2socG9ydCk7CiAKIAkvKgog
CSAqIElmIHRoaXMgZmFpbHMsIGl0IHVzdWFsbHkganVzdCBpbmRpY2F0ZXMgdGhhdCB3ZSdyZSBk
ZWFsaW5nIHdpdGggYQpAQCAtMTMxMSwxMCArMTMxMiwxMCBAQCBzdGF0aWMgaW50IHhlbl9yZWJp
bmRfZXZ0Y2huX3RvX2NwdShpbnQgZXZ0Y2huLCB1bnNpZ25lZCBpbnQgdGNwdSkKIAkgKiBpdCwg
YnV0IGRvbid0IGRvIHRoZSB4ZW5saW51eC1sZXZlbCByZWJpbmQgaW4gdGhhdCBjYXNlLgogCSAq
LwogCWlmIChIWVBFUlZJU09SX2V2ZW50X2NoYW5uZWxfb3AoRVZUQ0hOT1BfYmluZF92Y3B1LCAm
YmluZF92Y3B1KSA+PSAwKQotCQliaW5kX2V2dGNobl90b19jcHUoZXZ0Y2huLCB0Y3B1KTsKKwkJ
YmluZF9ldnRjaG5fdG9fY3B1KHBvcnQsIHRjcHUpOwogCiAJaWYgKCFtYXNrZWQpCi0JCXVubWFz
a19ldnRjaG4oZXZ0Y2huKTsKKwkJdW5tYXNrX2V2dGNobihwb3J0KTsKIAogCXJldHVybiAwOwog
fQpAQCAtMTM0MiwzOSArMTM0MywzOSBAQCBFWFBPUlRfU1lNQk9MX0dQTCh4ZW5fc2V0X2FmZmlu
aXR5X2V2dGNobik7CiAKIHN0YXRpYyB2b2lkIGVuYWJsZV9keW5pcnEoc3RydWN0IGlycV9kYXRh
ICpkYXRhKQogewotCWludCBldnRjaG4gPSBldnRjaG5fZnJvbV9pcnEoZGF0YS0+aXJxKTsKKwll
dnRjaG5fcG9ydF90IHBvcnQgPSBldnRjaG5fZnJvbV9pcnEoZGF0YS0+aXJxKTsKIAotCWlmIChW
QUxJRF9FVlRDSE4oZXZ0Y2huKSkKLQkJdW5tYXNrX2V2dGNobihldnRjaG4pOworCWlmIChWQUxJ
RF9FVlRDSE4ocG9ydCkpCisJCXVubWFza19ldnRjaG4ocG9ydCk7CiB9CiAKIHN0YXRpYyB2b2lk
IGRpc2FibGVfZHluaXJxKHN0cnVjdCBpcnFfZGF0YSAqZGF0YSkKIHsKLQlpbnQgZXZ0Y2huID0g
ZXZ0Y2huX2Zyb21faXJxKGRhdGEtPmlycSk7CisJZXZ0Y2huX3BvcnRfdCBwb3J0ID0gZXZ0Y2hu
X2Zyb21faXJxKGRhdGEtPmlycSk7CiAKLQlpZiAoVkFMSURfRVZUQ0hOKGV2dGNobikpCi0JCW1h
c2tfZXZ0Y2huKGV2dGNobik7CisJaWYgKFZBTElEX0VWVENITihwb3J0KSkKKwkJbWFza19ldnRj
aG4ocG9ydCk7CiB9CiAKIHN0YXRpYyB2b2lkIGFja19keW5pcnEoc3RydWN0IGlycV9kYXRhICpk
YXRhKQogewotCWludCBldnRjaG4gPSBldnRjaG5fZnJvbV9pcnEoZGF0YS0+aXJxKTsKKwlldnRj
aG5fcG9ydF90IHBvcnQgPSBldnRjaG5fZnJvbV9pcnEoZGF0YS0+aXJxKTsKIAotCWlmICghVkFM
SURfRVZUQ0hOKGV2dGNobikpCisJaWYgKCFWQUxJRF9FVlRDSE4ocG9ydCkpCiAJCXJldHVybjsK
IAogCWlmICh1bmxpa2VseShpcnFkX2lzX3NldGFmZmluaXR5X3BlbmRpbmcoZGF0YSkpICYmCiAJ
ICAgIGxpa2VseSghaXJxZF9pcnFfZGlzYWJsZWQoZGF0YSkpKSB7Ci0JCWludCBtYXNrZWQgPSB0
ZXN0X2FuZF9zZXRfbWFzayhldnRjaG4pOworCQlpbnQgbWFza2VkID0gdGVzdF9hbmRfc2V0X21h
c2socG9ydCk7CiAKLQkJY2xlYXJfZXZ0Y2huKGV2dGNobik7CisJCWNsZWFyX2V2dGNobihwb3J0
KTsKIAogCQlpcnFfbW92ZV9tYXNrZWRfaXJxKGRhdGEpOwogCiAJCWlmICghbWFza2VkKQotCQkJ
dW5tYXNrX2V2dGNobihldnRjaG4pOworCQkJdW5tYXNrX2V2dGNobihwb3J0KTsKIAl9IGVsc2UK
LQkJY2xlYXJfZXZ0Y2huKGV2dGNobik7CisJCWNsZWFyX2V2dGNobihwb3J0KTsKIH0KIAogc3Rh
dGljIHZvaWQgbWFza19hY2tfZHluaXJxKHN0cnVjdCBpcnFfZGF0YSAqZGF0YSkKQEAgLTEzODUs
MTYgKzEzODYsMTYgQEAgc3RhdGljIHZvaWQgbWFza19hY2tfZHluaXJxKHN0cnVjdCBpcnFfZGF0
YSAqZGF0YSkKIAogc3RhdGljIGludCByZXRyaWdnZXJfZHluaXJxKHN0cnVjdCBpcnFfZGF0YSAq
ZGF0YSkKIHsKLQl1bnNpZ25lZCBpbnQgZXZ0Y2huID0gZXZ0Y2huX2Zyb21faXJxKGRhdGEtPmly
cSk7CisJZXZ0Y2huX3BvcnRfdCBwb3J0ID0gZXZ0Y2huX2Zyb21faXJxKGRhdGEtPmlycSk7CiAJ
aW50IG1hc2tlZDsKIAotCWlmICghVkFMSURfRVZUQ0hOKGV2dGNobikpCisJaWYgKCFWQUxJRF9F
VlRDSE4ocG9ydCkpCiAJCXJldHVybiAwOwogCi0JbWFza2VkID0gdGVzdF9hbmRfc2V0X21hc2so
ZXZ0Y2huKTsKLQlzZXRfZXZ0Y2huKGV2dGNobik7CisJbWFza2VkID0gdGVzdF9hbmRfc2V0X21h
c2socG9ydCk7CisJc2V0X2V2dGNobihwb3J0KTsKIAlpZiAoIW1hc2tlZCkKLQkJdW5tYXNrX2V2
dGNobihldnRjaG4pOworCQl1bm1hc2tfZXZ0Y2huKHBvcnQpOwogCiAJcmV0dXJuIDE7CiB9CkBA
IC0xNDQwLDcgKzE0NDEsOCBAQCBzdGF0aWMgdm9pZCByZXN0b3JlX3BpcnFzKHZvaWQpCiBzdGF0
aWMgdm9pZCByZXN0b3JlX2NwdV92aXJxcyh1bnNpZ25lZCBpbnQgY3B1KQogewogCXN0cnVjdCBl
dnRjaG5fYmluZF92aXJxIGJpbmRfdmlycTsKLQlpbnQgdmlycSwgaXJxLCBldnRjaG47CisJZXZ0
Y2huX3BvcnRfdCBwb3J0OworCWludCB2aXJxLCBpcnE7CiAKIAlmb3IgKHZpcnEgPSAwOyB2aXJx
IDwgTlJfVklSUVM7IHZpcnErKykgewogCQlpZiAoKGlycSA9IHBlcl9jcHUodmlycV90b19pcnEs
IGNwdSlbdmlycV0pID09IC0xKQpAQCAtMTQ1NCwxOCArMTQ1NiwxOSBAQCBzdGF0aWMgdm9pZCBy
ZXN0b3JlX2NwdV92aXJxcyh1bnNpZ25lZCBpbnQgY3B1KQogCQlpZiAoSFlQRVJWSVNPUl9ldmVu
dF9jaGFubmVsX29wKEVWVENITk9QX2JpbmRfdmlycSwKIAkJCQkJCSZiaW5kX3ZpcnEpICE9IDAp
CiAJCQlCVUcoKTsKLQkJZXZ0Y2huID0gYmluZF92aXJxLnBvcnQ7CisJCXBvcnQgPSBiaW5kX3Zp
cnEucG9ydDsKIAogCQkvKiBSZWNvcmQgdGhlIG5ldyBtYXBwaW5nLiAqLwotCQkodm9pZCl4ZW5f
aXJxX2luZm9fdmlycV9zZXR1cChjcHUsIGlycSwgZXZ0Y2huLCB2aXJxKTsKLQkJYmluZF9ldnRj
aG5fdG9fY3B1KGV2dGNobiwgY3B1KTsKKwkJKHZvaWQpeGVuX2lycV9pbmZvX3ZpcnFfc2V0dXAo
Y3B1LCBpcnEsIHBvcnQsIHZpcnEpOworCQliaW5kX2V2dGNobl90b19jcHUocG9ydCwgY3B1KTsK
IAl9CiB9CiAKIHN0YXRpYyB2b2lkIHJlc3RvcmVfY3B1X2lwaXModW5zaWduZWQgaW50IGNwdSkK
IHsKIAlzdHJ1Y3QgZXZ0Y2huX2JpbmRfaXBpIGJpbmRfaXBpOwotCWludCBpcGksIGlycSwgZXZ0
Y2huOworCWV2dGNobl9wb3J0X3QgcG9ydDsKKwlpbnQgaXBpLCBpcnE7CiAKIAlmb3IgKGlwaSA9
IDA7IGlwaSA8IFhFTl9OUl9JUElTOyBpcGkrKykgewogCQlpZiAoKGlycSA9IHBlcl9jcHUoaXBp
X3RvX2lycSwgY3B1KVtpcGldKSA9PSAtMSkKQEAgLTE0NzgsMzggKzE0ODEsMzggQEAgc3RhdGlj
IHZvaWQgcmVzdG9yZV9jcHVfaXBpcyh1bnNpZ25lZCBpbnQgY3B1KQogCQlpZiAoSFlQRVJWSVNP
Ul9ldmVudF9jaGFubmVsX29wKEVWVENITk9QX2JpbmRfaXBpLAogCQkJCQkJJmJpbmRfaXBpKSAh
PSAwKQogCQkJQlVHKCk7Ci0JCWV2dGNobiA9IGJpbmRfaXBpLnBvcnQ7CisJCXBvcnQgPSBiaW5k
X2lwaS5wb3J0OwogCiAJCS8qIFJlY29yZCB0aGUgbmV3IG1hcHBpbmcuICovCi0JCSh2b2lkKXhl
bl9pcnFfaW5mb19pcGlfc2V0dXAoY3B1LCBpcnEsIGV2dGNobiwgaXBpKTsKLQkJYmluZF9ldnRj
aG5fdG9fY3B1KGV2dGNobiwgY3B1KTsKKwkJKHZvaWQpeGVuX2lycV9pbmZvX2lwaV9zZXR1cChj
cHUsIGlycSwgcG9ydCwgaXBpKTsKKwkJYmluZF9ldnRjaG5fdG9fY3B1KHBvcnQsIGNwdSk7CiAJ
fQogfQogCiAvKiBDbGVhciBhbiBpcnEncyBwZW5kaW5nIHN0YXRlLCBpbiBwcmVwYXJhdGlvbiBm
b3IgcG9sbGluZyBvbiBpdCAqLwogdm9pZCB4ZW5fY2xlYXJfaXJxX3BlbmRpbmcoaW50IGlycSkK
IHsKLQlpbnQgZXZ0Y2huID0gZXZ0Y2huX2Zyb21faXJxKGlycSk7CisJZXZ0Y2huX3BvcnRfdCBw
b3J0ID0gZXZ0Y2huX2Zyb21faXJxKGlycSk7CiAKLQlpZiAoVkFMSURfRVZUQ0hOKGV2dGNobikp
Ci0JCWNsZWFyX2V2dGNobihldnRjaG4pOworCWlmIChWQUxJRF9FVlRDSE4ocG9ydCkpCisJCWNs
ZWFyX2V2dGNobihwb3J0KTsKIH0KIEVYUE9SVF9TWU1CT0woeGVuX2NsZWFyX2lycV9wZW5kaW5n
KTsKIHZvaWQgeGVuX3NldF9pcnFfcGVuZGluZyhpbnQgaXJxKQogewotCWludCBldnRjaG4gPSBl
dnRjaG5fZnJvbV9pcnEoaXJxKTsKKwlldnRjaG5fcG9ydF90IHBvcnQgPSBldnRjaG5fZnJvbV9p
cnEoaXJxKTsKIAotCWlmIChWQUxJRF9FVlRDSE4oZXZ0Y2huKSkKLQkJc2V0X2V2dGNobihldnRj
aG4pOworCWlmIChWQUxJRF9FVlRDSE4ocG9ydCkpCisJCXNldF9ldnRjaG4ocG9ydCk7CiB9CiAK
IGJvb2wgeGVuX3Rlc3RfaXJxX3BlbmRpbmcoaW50IGlycSkKIHsKLQlpbnQgZXZ0Y2huID0gZXZ0
Y2huX2Zyb21faXJxKGlycSk7CisJZXZ0Y2huX3BvcnRfdCBwb3J0ID0gZXZ0Y2huX2Zyb21faXJx
KGlycSk7CiAJYm9vbCByZXQgPSBmYWxzZTsKIAotCWlmIChWQUxJRF9FVlRDSE4oZXZ0Y2huKSkK
LQkJcmV0ID0gdGVzdF9ldnRjaG4oZXZ0Y2huKTsKKwlpZiAoVkFMSURfRVZUQ0hOKHBvcnQpKQor
CQlyZXQgPSB0ZXN0X2V2dGNobihwb3J0KTsKIAogCXJldHVybiByZXQ7CiB9CkBAIC0xNTE4LDE0
ICsxNTIxLDE0IEBAIGJvb2wgeGVuX3Rlc3RfaXJxX3BlbmRpbmcoaW50IGlycSkKICAqIHRoZSBp
cnEgd2lsbCBiZSBkaXNhYmxlZCBzbyBpdCB3b24ndCBkZWxpdmVyIGFuIGludGVycnVwdC4gKi8K
IHZvaWQgeGVuX3BvbGxfaXJxX3RpbWVvdXQoaW50IGlycSwgdTY0IHRpbWVvdXQpCiB7Ci0JZXZ0
Y2huX3BvcnRfdCBldnRjaG4gPSBldnRjaG5fZnJvbV9pcnEoaXJxKTsKKwlldnRjaG5fcG9ydF90
IHBvcnQgPSBldnRjaG5fZnJvbV9pcnEoaXJxKTsKIAotCWlmIChWQUxJRF9FVlRDSE4oZXZ0Y2hu
KSkgeworCWlmIChWQUxJRF9FVlRDSE4ocG9ydCkpIHsKIAkJc3RydWN0IHNjaGVkX3BvbGwgcG9s
bDsKIAogCQlwb2xsLm5yX3BvcnRzID0gMTsKIAkJcG9sbC50aW1lb3V0ID0gdGltZW91dDsKLQkJ
c2V0X3hlbl9ndWVzdF9oYW5kbGUocG9sbC5wb3J0cywgJmV2dGNobik7CisJCXNldF94ZW5fZ3Vl
c3RfaGFuZGxlKHBvbGwucG9ydHMsICZwb3J0KTsKIAogCQlpZiAoSFlQRVJWSVNPUl9zY2hlZF9v
cChTQ0hFRE9QX3BvbGwsICZwb2xsKSAhPSAwKQogCQkJQlVHKCk7CkBAIC0xNjY3LDcgKzE2NzAs
NyBAQCBtb2R1bGVfcGFyYW0oZmlmb19ldmVudHMsIGJvb2wsIDApOwogdm9pZCBfX2luaXQgeGVu
X2luaXRfSVJRKHZvaWQpCiB7CiAJaW50IHJldCA9IC1FSU5WQUw7Ci0JdW5zaWduZWQgaW50IGV2
dGNobjsKKwlldnRjaG5fcG9ydF90IHBvcnQ7CiAKIAlpZiAoZmlmb19ldmVudHMpCiAJCXJldCA9
IHhlbl9ldnRjaG5fZmlmb19pbml0KCk7CkBAIC0xNjc5LDggKzE2ODIsOCBAQCB2b2lkIF9faW5p
dCB4ZW5faW5pdF9JUlEodm9pZCkKIAlCVUdfT04oIWV2dGNobl90b19pcnEpOwogCiAJLyogTm8g
ZXZlbnQgY2hhbm5lbHMgYXJlICdsaXZlJyByaWdodCBub3cuICovCi0JZm9yIChldnRjaG4gPSAw
OyBldnRjaG4gPCB4ZW5fZXZ0Y2huX25yX2NoYW5uZWxzKCk7IGV2dGNobisrKQotCQltYXNrX2V2
dGNobihldnRjaG4pOworCWZvciAocG9ydCA9IDA7IHBvcnQgPCB4ZW5fZXZ0Y2huX25yX2NoYW5u
ZWxzKCk7IHBvcnQrKykKKwkJbWFza19ldnRjaG4ocG9ydCk7CiAKIAlwaXJxX25lZWRzX2VvaSA9
IHBpcnFfbmVlZHNfZW9pX2ZsYWc7CiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMveGVuL2V2ZW50cy9l
dmVudHNfZmlmby5jIGIvZHJpdmVycy94ZW4vZXZlbnRzL2V2ZW50c19maWZvLmMKaW5kZXggNzZi
MzE4ZTg4MzgyLi5jNjBlZTA0NTAxNzMgMTAwNjQ0Ci0tLSBhL2RyaXZlcnMveGVuL2V2ZW50cy9l
dmVudHNfZmlmby5jCisrKyBiL2RyaXZlcnMveGVuL2V2ZW50cy9ldmVudHNfZmlmby5jCkBAIC04
Miw3ICs4Miw3IEBAIHN0YXRpYyB1bnNpZ25lZCBldmVudF9hcnJheV9wYWdlcyBfX3JlYWRfbW9z
dGx5OwogCiAjZW5kaWYKIAotc3RhdGljIGlubGluZSBldmVudF93b3JkX3QgKmV2ZW50X3dvcmRf
ZnJvbV9wb3J0KHVuc2lnbmVkIHBvcnQpCitzdGF0aWMgaW5saW5lIGV2ZW50X3dvcmRfdCAqZXZl
bnRfd29yZF9mcm9tX3BvcnQoZXZ0Y2huX3BvcnRfdCBwb3J0KQogewogCXVuc2lnbmVkIGkgPSBw
b3J0IC8gRVZFTlRfV09SRFNfUEVSX1BBR0U7CiAKQEAgLTE0MCw3ICsxNDAsNyBAQCBzdGF0aWMg
dm9pZCBpbml0X2FycmF5X3BhZ2UoZXZlbnRfd29yZF90ICphcnJheV9wYWdlKQogCiBzdGF0aWMg
aW50IGV2dGNobl9maWZvX3NldHVwKHN0cnVjdCBpcnFfaW5mbyAqaW5mbykKIHsKLQl1bnNpZ25l
ZCBwb3J0ID0gaW5mby0+ZXZ0Y2huOworCWV2dGNobl9wb3J0X3QgcG9ydCA9IGluZm8tPmV2dGNo
bjsKIAl1bnNpZ25lZCBuZXdfYXJyYXlfcGFnZXM7CiAJaW50IHJldDsKIApAQCAtMTkxLDM3ICsx
OTEsMzcgQEAgc3RhdGljIHZvaWQgZXZ0Y2huX2ZpZm9fYmluZF90b19jcHUoc3RydWN0IGlycV9p
bmZvICppbmZvLCB1bnNpZ25lZCBjcHUpCiAJLyogbm8tb3AgKi8KIH0KIAotc3RhdGljIHZvaWQg
ZXZ0Y2huX2ZpZm9fY2xlYXJfcGVuZGluZyh1bnNpZ25lZCBwb3J0KQorc3RhdGljIHZvaWQgZXZ0
Y2huX2ZpZm9fY2xlYXJfcGVuZGluZyhldnRjaG5fcG9ydF90IHBvcnQpCiB7CiAJZXZlbnRfd29y
ZF90ICp3b3JkID0gZXZlbnRfd29yZF9mcm9tX3BvcnQocG9ydCk7CiAJc3luY19jbGVhcl9iaXQo
RVZUQ0hOX0ZJRk9fQklUKFBFTkRJTkcsIHdvcmQpLCBCTSh3b3JkKSk7CiB9CiAKLXN0YXRpYyB2
b2lkIGV2dGNobl9maWZvX3NldF9wZW5kaW5nKHVuc2lnbmVkIHBvcnQpCitzdGF0aWMgdm9pZCBl
dnRjaG5fZmlmb19zZXRfcGVuZGluZyhldnRjaG5fcG9ydF90IHBvcnQpCiB7CiAJZXZlbnRfd29y
ZF90ICp3b3JkID0gZXZlbnRfd29yZF9mcm9tX3BvcnQocG9ydCk7CiAJc3luY19zZXRfYml0KEVW
VENITl9GSUZPX0JJVChQRU5ESU5HLCB3b3JkKSwgQk0od29yZCkpOwogfQogCi1zdGF0aWMgYm9v
bCBldnRjaG5fZmlmb19pc19wZW5kaW5nKHVuc2lnbmVkIHBvcnQpCitzdGF0aWMgYm9vbCBldnRj
aG5fZmlmb19pc19wZW5kaW5nKGV2dGNobl9wb3J0X3QgcG9ydCkKIHsKIAlldmVudF93b3JkX3Qg
KndvcmQgPSBldmVudF93b3JkX2Zyb21fcG9ydChwb3J0KTsKIAlyZXR1cm4gc3luY190ZXN0X2Jp
dChFVlRDSE5fRklGT19CSVQoUEVORElORywgd29yZCksIEJNKHdvcmQpKTsKIH0KIAotc3RhdGlj
IGJvb2wgZXZ0Y2huX2ZpZm9fdGVzdF9hbmRfc2V0X21hc2sodW5zaWduZWQgcG9ydCkKK3N0YXRp
YyBib29sIGV2dGNobl9maWZvX3Rlc3RfYW5kX3NldF9tYXNrKGV2dGNobl9wb3J0X3QgcG9ydCkK
IHsKIAlldmVudF93b3JkX3QgKndvcmQgPSBldmVudF93b3JkX2Zyb21fcG9ydChwb3J0KTsKIAly
ZXR1cm4gc3luY190ZXN0X2FuZF9zZXRfYml0KEVWVENITl9GSUZPX0JJVChNQVNLRUQsIHdvcmQp
LCBCTSh3b3JkKSk7CiB9CiAKLXN0YXRpYyB2b2lkIGV2dGNobl9maWZvX21hc2sodW5zaWduZWQg
cG9ydCkKK3N0YXRpYyB2b2lkIGV2dGNobl9maWZvX21hc2soZXZ0Y2huX3BvcnRfdCBwb3J0KQog
ewogCWV2ZW50X3dvcmRfdCAqd29yZCA9IGV2ZW50X3dvcmRfZnJvbV9wb3J0KHBvcnQpOwogCXN5
bmNfc2V0X2JpdChFVlRDSE5fRklGT19CSVQoTUFTS0VELCB3b3JkKSwgQk0od29yZCkpOwogfQog
Ci1zdGF0aWMgYm9vbCBldnRjaG5fZmlmb19pc19tYXNrZWQodW5zaWduZWQgcG9ydCkKK3N0YXRp
YyBib29sIGV2dGNobl9maWZvX2lzX21hc2tlZChldnRjaG5fcG9ydF90IHBvcnQpCiB7CiAJZXZl
bnRfd29yZF90ICp3b3JkID0gZXZlbnRfd29yZF9mcm9tX3BvcnQocG9ydCk7CiAJcmV0dXJuIHN5
bmNfdGVzdF9iaXQoRVZUQ0hOX0ZJRk9fQklUKE1BU0tFRCwgd29yZCksIEJNKHdvcmQpKTsKQEAg
LTI0Miw3ICsyNDIsNyBAQCBzdGF0aWMgdm9pZCBjbGVhcl9tYXNrZWQodm9sYXRpbGUgZXZlbnRf
d29yZF90ICp3b3JkKQogCX0gd2hpbGUgKHcgIT0gb2xkKTsKIH0KIAotc3RhdGljIHZvaWQgZXZ0
Y2huX2ZpZm9fdW5tYXNrKHVuc2lnbmVkIHBvcnQpCitzdGF0aWMgdm9pZCBldnRjaG5fZmlmb191
bm1hc2soZXZ0Y2huX3BvcnRfdCBwb3J0KQogewogCWV2ZW50X3dvcmRfdCAqd29yZCA9IGV2ZW50
X3dvcmRfZnJvbV9wb3J0KHBvcnQpOwogCkBAIC0yNzAsNyArMjcwLDcgQEAgc3RhdGljIHVpbnQz
Ml90IGNsZWFyX2xpbmtlZCh2b2xhdGlsZSBldmVudF93b3JkX3QgKndvcmQpCiAJcmV0dXJuIHcg
JiBFVlRDSE5fRklGT19MSU5LX01BU0s7CiB9CiAKLXN0YXRpYyB2b2lkIGhhbmRsZV9pcnFfZm9y
X3BvcnQodW5zaWduZWQgcG9ydCkKK3N0YXRpYyB2b2lkIGhhbmRsZV9pcnFfZm9yX3BvcnQoZXZ0
Y2huX3BvcnRfdCBwb3J0KQogewogCWludCBpcnE7CiAKQEAgLTI4Niw3ICsyODYsNyBAQCBzdGF0
aWMgdm9pZCBjb25zdW1lX29uZV9ldmVudCh1bnNpZ25lZCBjcHUsCiB7CiAJc3RydWN0IGV2dGNo
bl9maWZvX3F1ZXVlICpxID0gJnBlcl9jcHUoY3B1X3F1ZXVlLCBjcHUpOwogCXVpbnQzMl90IGhl
YWQ7Ci0JdW5zaWduZWQgcG9ydDsKKwlldnRjaG5fcG9ydF90IHBvcnQ7CiAJZXZlbnRfd29yZF90
ICp3b3JkOwogCiAJaGVhZCA9IHEtPmhlYWRbcHJpb3JpdHldOwpkaWZmIC0tZ2l0IGEvZHJpdmVy
cy94ZW4vZXZlbnRzL2V2ZW50c19pbnRlcm5hbC5oIGIvZHJpdmVycy94ZW4vZXZlbnRzL2V2ZW50
c19pbnRlcm5hbC5oCmluZGV4IDgyOTM4Y2ZmNmM3YS4uZjQwM2NmMjVkNDVlIDEwMDY0NAotLS0g
YS9kcml2ZXJzL3hlbi9ldmVudHMvZXZlbnRzX2ludGVybmFsLmgKKysrIGIvZHJpdmVycy94ZW4v
ZXZlbnRzL2V2ZW50c19pbnRlcm5hbC5oCkBAIC0zMyw3ICszMyw3IEBAIHN0cnVjdCBpcnFfaW5m
byB7CiAJaW50IHJlZmNudDsKIAllbnVtIHhlbl9pcnFfdHlwZSB0eXBlOwkvKiB0eXBlICovCiAJ
dW5zaWduZWQgaXJxOwotCXVuc2lnbmVkIGludCBldnRjaG47CS8qIGV2ZW50IGNoYW5uZWwgKi8K
KwlldnRjaG5fcG9ydF90IGV2dGNobjsJLyogZXZlbnQgY2hhbm5lbCAqLwogCXVuc2lnbmVkIHNo
b3J0IGNwdTsJLyogY3B1IGJvdW5kICovCiAKIAl1bmlvbiB7CkBAIC02MCwxMiArNjAsMTIgQEAg
c3RydWN0IGV2dGNobl9vcHMgewogCWludCAoKnNldHVwKShzdHJ1Y3QgaXJxX2luZm8gKmluZm8p
OwogCXZvaWQgKCpiaW5kX3RvX2NwdSkoc3RydWN0IGlycV9pbmZvICppbmZvLCB1bnNpZ25lZCBj
cHUpOwogCi0Jdm9pZCAoKmNsZWFyX3BlbmRpbmcpKHVuc2lnbmVkIHBvcnQpOwotCXZvaWQgKCpz
ZXRfcGVuZGluZykodW5zaWduZWQgcG9ydCk7Ci0JYm9vbCAoKmlzX3BlbmRpbmcpKHVuc2lnbmVk
IHBvcnQpOwotCWJvb2wgKCp0ZXN0X2FuZF9zZXRfbWFzaykodW5zaWduZWQgcG9ydCk7Ci0Jdm9p
ZCAoKm1hc2spKHVuc2lnbmVkIHBvcnQpOwotCXZvaWQgKCp1bm1hc2spKHVuc2lnbmVkIHBvcnQp
OworCXZvaWQgKCpjbGVhcl9wZW5kaW5nKShldnRjaG5fcG9ydF90IHBvcnQpOworCXZvaWQgKCpz
ZXRfcGVuZGluZykoZXZ0Y2huX3BvcnRfdCBwb3J0KTsKKwlib29sICgqaXNfcGVuZGluZykoZXZ0
Y2huX3BvcnRfdCBwb3J0KTsKKwlib29sICgqdGVzdF9hbmRfc2V0X21hc2spKGV2dGNobl9wb3J0
X3QgcG9ydCk7CisJdm9pZCAoKm1hc2spKGV2dGNobl9wb3J0X3QgcG9ydCk7CisJdm9pZCAoKnVu
bWFzaykoZXZ0Y2huX3BvcnRfdCBwb3J0KTsKIAogCXZvaWQgKCpoYW5kbGVfZXZlbnRzKSh1bnNp
Z25lZCBjcHUpOwogCXZvaWQgKCpyZXN1bWUpKHZvaWQpOwpAQCAtNzQsMTEgKzc0LDExIEBAIHN0
cnVjdCBldnRjaG5fb3BzIHsKIGV4dGVybiBjb25zdCBzdHJ1Y3QgZXZ0Y2huX29wcyAqZXZ0Y2hu
X29wczsKIAogZXh0ZXJuIGludCAqKmV2dGNobl90b19pcnE7Ci1pbnQgZ2V0X2V2dGNobl90b19p
cnEodW5zaWduZWQgaW50IGV2dGNobik7CitpbnQgZ2V0X2V2dGNobl90b19pcnEoZXZ0Y2huX3Bv
cnRfdCBwb3J0KTsKIAogc3RydWN0IGlycV9pbmZvICppbmZvX2Zvcl9pcnEodW5zaWduZWQgaXJx
KTsKIHVuc2lnbmVkIGNwdV9mcm9tX2lycSh1bnNpZ25lZCBpcnEpOwotdW5zaWduZWQgY3B1X2Zy
b21fZXZ0Y2huKHVuc2lnbmVkIGludCBldnRjaG4pOwordW5zaWduZWQgaW50IGNwdV9mcm9tX2V2
dGNobihldnRjaG5fcG9ydF90IHBvcnQpOwogCiBzdGF0aWMgaW5saW5lIHVuc2lnbmVkIHhlbl9l
dnRjaG5fbWF4X2NoYW5uZWxzKHZvaWQpCiB7CkBAIC0xMDIsMzIgKzEwMiwzMiBAQCBzdGF0aWMg
aW5saW5lIHZvaWQgeGVuX2V2dGNobl9wb3J0X2JpbmRfdG9fY3B1KHN0cnVjdCBpcnFfaW5mbyAq
aW5mbywKIAlldnRjaG5fb3BzLT5iaW5kX3RvX2NwdShpbmZvLCBjcHUpOwogfQogCi1zdGF0aWMg
aW5saW5lIHZvaWQgY2xlYXJfZXZ0Y2huKHVuc2lnbmVkIHBvcnQpCitzdGF0aWMgaW5saW5lIHZv
aWQgY2xlYXJfZXZ0Y2huKGV2dGNobl9wb3J0X3QgcG9ydCkKIHsKIAlldnRjaG5fb3BzLT5jbGVh
cl9wZW5kaW5nKHBvcnQpOwogfQogCi1zdGF0aWMgaW5saW5lIHZvaWQgc2V0X2V2dGNobih1bnNp
Z25lZCBwb3J0KQorc3RhdGljIGlubGluZSB2b2lkIHNldF9ldnRjaG4oZXZ0Y2huX3BvcnRfdCBw
b3J0KQogewogCWV2dGNobl9vcHMtPnNldF9wZW5kaW5nKHBvcnQpOwogfQogCi1zdGF0aWMgaW5s
aW5lIGJvb2wgdGVzdF9ldnRjaG4odW5zaWduZWQgcG9ydCkKK3N0YXRpYyBpbmxpbmUgYm9vbCB0
ZXN0X2V2dGNobihldnRjaG5fcG9ydF90IHBvcnQpCiB7CiAJcmV0dXJuIGV2dGNobl9vcHMtPmlz
X3BlbmRpbmcocG9ydCk7CiB9CiAKLXN0YXRpYyBpbmxpbmUgYm9vbCB0ZXN0X2FuZF9zZXRfbWFz
ayh1bnNpZ25lZCBwb3J0KQorc3RhdGljIGlubGluZSBib29sIHRlc3RfYW5kX3NldF9tYXNrKGV2
dGNobl9wb3J0X3QgcG9ydCkKIHsKIAlyZXR1cm4gZXZ0Y2huX29wcy0+dGVzdF9hbmRfc2V0X21h
c2socG9ydCk7CiB9CiAKLXN0YXRpYyBpbmxpbmUgdm9pZCBtYXNrX2V2dGNobih1bnNpZ25lZCBw
b3J0KQorc3RhdGljIGlubGluZSB2b2lkIG1hc2tfZXZ0Y2huKGV2dGNobl9wb3J0X3QgcG9ydCkK
IHsKIAlyZXR1cm4gZXZ0Y2huX29wcy0+bWFzayhwb3J0KTsKIH0KIAotc3RhdGljIGlubGluZSB2
b2lkIHVubWFza19ldnRjaG4odW5zaWduZWQgcG9ydCkKK3N0YXRpYyBpbmxpbmUgdm9pZCB1bm1h
c2tfZXZ0Y2huKGV2dGNobl9wb3J0X3QgcG9ydCkKIHsKIAlyZXR1cm4gZXZ0Y2huX29wcy0+dW5t
YXNrKHBvcnQpOwogfQpkaWZmIC0tZ2l0IGEvZHJpdmVycy94ZW4vZXZ0Y2huLmMgYi9kcml2ZXJz
L3hlbi9ldnRjaG4uYwppbmRleCAwNTJiNTVhMTRlYmMuLjMxYTgzZDVkZmViYyAxMDA2NDQKLS0t
IGEvZHJpdmVycy94ZW4vZXZ0Y2huLmMKKysrIGIvZHJpdmVycy94ZW4vZXZ0Y2huLmMKQEAgLTgz
LDcgKzgzLDcgQEAgc3RydWN0IHBlcl91c2VyX2RhdGEgewogc3RydWN0IHVzZXJfZXZ0Y2huIHsK
IAlzdHJ1Y3QgcmJfbm9kZSBub2RlOwogCXN0cnVjdCBwZXJfdXNlcl9kYXRhICp1c2VyOwotCXVu
c2lnbmVkIHBvcnQ7CisJZXZ0Y2huX3BvcnRfdCBwb3J0OwogCWJvb2wgZW5hYmxlZDsKIH07CiAK
QEAgLTEzOCw3ICsxMzgsOCBAQCBzdGF0aWMgdm9pZCBkZWxfZXZ0Y2huKHN0cnVjdCBwZXJfdXNl
cl9kYXRhICp1LCBzdHJ1Y3QgdXNlcl9ldnRjaG4gKmV2dGNobikKIAlrZnJlZShldnRjaG4pOwog
fQogCi1zdGF0aWMgc3RydWN0IHVzZXJfZXZ0Y2huICpmaW5kX2V2dGNobihzdHJ1Y3QgcGVyX3Vz
ZXJfZGF0YSAqdSwgdW5zaWduZWQgcG9ydCkKK3N0YXRpYyBzdHJ1Y3QgdXNlcl9ldnRjaG4gKmZp
bmRfZXZ0Y2huKHN0cnVjdCBwZXJfdXNlcl9kYXRhICp1LAorCQkJCSAgICAgICBldnRjaG5fcG9y
dF90IHBvcnQpCiB7CiAJc3RydWN0IHJiX25vZGUgKm5vZGUgPSB1LT5ldnRjaG5zLnJiX25vZGU7
CiAKQEAgLTE2Myw3ICsxNjQsNyBAQCBzdGF0aWMgaXJxcmV0dXJuX3QgZXZ0Y2huX2ludGVycnVw
dChpbnQgaXJxLCB2b2lkICpkYXRhKQogCXN0cnVjdCBwZXJfdXNlcl9kYXRhICp1ID0gZXZ0Y2hu
LT51c2VyOwogCiAJV0FSTighZXZ0Y2huLT5lbmFibGVkLAotCSAgICAgIkludGVycnVwdCBmb3Ig
cG9ydCAlZCwgYnV0IGFwcGFyZW50bHkgbm90IGVuYWJsZWQ7IHBlci11c2VyICVwXG4iLAorCSAg
ICAgIkludGVycnVwdCBmb3IgcG9ydCAldSwgYnV0IGFwcGFyZW50bHkgbm90IGVuYWJsZWQ7IHBl
ci11c2VyICVwXG4iLAogCSAgICAgZXZ0Y2huLT5wb3J0LCB1KTsKIAogCWRpc2FibGVfaXJxX25v
c3luYyhpcnEpOwpAQCAtMjg2LDcgKzI4Nyw3IEBAIHN0YXRpYyBzc2l6ZV90IGV2dGNobl93cml0
ZShzdHJ1Y3QgZmlsZSAqZmlsZSwgY29uc3QgY2hhciBfX3VzZXIgKmJ1ZiwKIAltdXRleF9sb2Nr
KCZ1LT5iaW5kX211dGV4KTsKIAogCWZvciAoaSA9IDA7IGkgPCAoY291bnQvc2l6ZW9mKGV2dGNo
bl9wb3J0X3QpKTsgaSsrKSB7Ci0JCXVuc2lnbmVkIHBvcnQgPSBrYnVmW2ldOworCQlldnRjaG5f
cG9ydF90IHBvcnQgPSBrYnVmW2ldOwogCQlzdHJ1Y3QgdXNlcl9ldnRjaG4gKmV2dGNobjsKIAog
CQlldnRjaG4gPSBmaW5kX2V2dGNobih1LCBwb3J0KTsKQEAgLTM2MSw3ICszNjIsNyBAQCBzdGF0
aWMgaW50IGV2dGNobl9yZXNpemVfcmluZyhzdHJ1Y3QgcGVyX3VzZXJfZGF0YSAqdSkKIAlyZXR1
cm4gMDsKIH0KIAotc3RhdGljIGludCBldnRjaG5fYmluZF90b191c2VyKHN0cnVjdCBwZXJfdXNl
cl9kYXRhICp1LCBpbnQgcG9ydCkKK3N0YXRpYyBpbnQgZXZ0Y2huX2JpbmRfdG9fdXNlcihzdHJ1
Y3QgcGVyX3VzZXJfZGF0YSAqdSwgZXZ0Y2huX3BvcnRfdCBwb3J0KQogewogCXN0cnVjdCB1c2Vy
X2V2dGNobiAqZXZ0Y2huOwogCXN0cnVjdCBldnRjaG5fY2xvc2UgY2xvc2U7CkBAIC00MjMsMTMg
KzQyNCwxMyBAQCBzdGF0aWMgdm9pZCBldnRjaG5fdW5iaW5kX2Zyb21fdXNlcihzdHJ1Y3QgcGVy
X3VzZXJfZGF0YSAqdSwKIAogc3RhdGljIERFRklORV9QRVJfQ1BVKGludCwgYmluZF9sYXN0X3Nl
bGVjdGVkX2NwdSk7CiAKLXN0YXRpYyB2b2lkIGV2dGNobl9iaW5kX2ludGVyZG9tX25leHRfdmNw
dShpbnQgZXZ0Y2huKQorc3RhdGljIHZvaWQgZXZ0Y2huX2JpbmRfaW50ZXJkb21fbmV4dF92Y3B1
KGV2dGNobl9wb3J0X3QgcG9ydCkKIHsKIAl1bnNpZ25lZCBpbnQgc2VsZWN0ZWRfY3B1LCBpcnE7
CiAJc3RydWN0IGlycV9kZXNjICpkZXNjOwogCXVuc2lnbmVkIGxvbmcgZmxhZ3M7CiAKLQlpcnEg
PSBpcnFfZnJvbV9ldnRjaG4oZXZ0Y2huKTsKKwlpcnEgPSBpcnFfZnJvbV9ldnRjaG4ocG9ydCk7
CiAJZGVzYyA9IGlycV90b19kZXNjKGlycSk7CiAKIAlpZiAoIWRlc2MpCmRpZmYgLS1naXQgYS9k
cml2ZXJzL3hlbi9wdmNhbGxzLWJhY2suYyBiL2RyaXZlcnMveGVuL3B2Y2FsbHMtYmFjay5jCmlu
ZGV4IGM1N2M3MWI3ZDUzZC4uY2Y0Y2UzZTkzNThkIDEwMDY0NAotLS0gYS9kcml2ZXJzL3hlbi9w
dmNhbGxzLWJhY2suYworKysgYi9kcml2ZXJzL3hlbi9wdmNhbGxzLWJhY2suYwpAQCAtMzAwLDcg
KzMwMCw3IEBAIHN0YXRpYyBzdHJ1Y3Qgc29ja19tYXBwaW5nICpwdmNhbGxzX25ld19hY3RpdmVf
c29ja2V0KAogCQlzdHJ1Y3QgcHZjYWxsc19mZWRhdGEgKmZlZGF0YSwKIAkJdWludDY0X3QgaWQs
CiAJCWdyYW50X3JlZl90IHJlZiwKLQkJdWludDMyX3QgZXZ0Y2huLAorCQlldnRjaG5fcG9ydF90
IGV2dGNobiwKIAkJc3RydWN0IHNvY2tldCAqc29jaykKIHsKIAlpbnQgcmV0OwpAQCAtOTA1LDcg
KzkwNSw4IEBAIHN0YXRpYyBpcnFyZXR1cm5fdCBwdmNhbGxzX2JhY2tfY29ubl9ldmVudChpbnQg
aXJxLCB2b2lkICpzb2NrX21hcCkKIAogc3RhdGljIGludCBiYWNrZW5kX2Nvbm5lY3Qoc3RydWN0
IHhlbmJ1c19kZXZpY2UgKmRldikKIHsKLQlpbnQgZXJyLCBldnRjaG47CisJaW50IGVycjsKKwll
dnRjaG5fcG9ydF90IGV2dGNobjsKIAlncmFudF9yZWZfdCByaW5nX3JlZjsKIAlzdHJ1Y3QgcHZj
YWxsc19mZWRhdGEgKmZlZGF0YSA9IE5VTEw7CiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMveGVuL3B2
Y2FsbHMtZnJvbnQuYyBiL2RyaXZlcnMveGVuL3B2Y2FsbHMtZnJvbnQuYwppbmRleCA1NzU5MmE2
YjVjOWUuLmE3YjZmZmYyOWU3MyAxMDA2NDQKLS0tIGEvZHJpdmVycy94ZW4vcHZjYWxscy1mcm9u
dC5jCisrKyBiL2RyaXZlcnMveGVuL3B2Y2FsbHMtZnJvbnQuYwpAQCAtMzY4LDEyICszNjgsMTEg
QEAgc3RhdGljIGludCBhbGxvY19hY3RpdmVfcmluZyhzdHJ1Y3Qgc29ja19tYXBwaW5nICptYXAp
CiAJcmV0dXJuIC1FTk9NRU07CiB9CiAKLXN0YXRpYyBpbnQgY3JlYXRlX2FjdGl2ZShzdHJ1Y3Qg
c29ja19tYXBwaW5nICptYXAsIGludCAqZXZ0Y2huKQorc3RhdGljIGludCBjcmVhdGVfYWN0aXZl
KHN0cnVjdCBzb2NrX21hcHBpbmcgKm1hcCwgZXZ0Y2huX3BvcnRfdCAqZXZ0Y2huKQogewogCXZv
aWQgKmJ5dGVzOwotCWludCByZXQgPSAtRU5PTUVNLCBpcnEgPSAtMSwgaTsKKwlpbnQgcmV0ID0g
LUVOT01FTSwgaXJxID0gLTEsIGZyZWVfZXZ0Y2huID0gMCwgaTsKIAotCSpldnRjaG4gPSAtMTsK
IAlpbml0X3dhaXRxdWV1ZV9oZWFkKCZtYXAtPmFjdGl2ZS5pbmZsaWdodF9jb25uX3JlcSk7CiAK
IAlieXRlcyA9IG1hcC0+YWN0aXZlLmRhdGEuaW47CkBAIC0zODksNiArMzg4LDcgQEAgc3RhdGlj
IGludCBjcmVhdGVfYWN0aXZlKHN0cnVjdCBzb2NrX21hcHBpbmcgKm1hcCwgaW50ICpldnRjaG4p
CiAJcmV0ID0geGVuYnVzX2FsbG9jX2V2dGNobihwdmNhbGxzX2Zyb250X2RldiwgZXZ0Y2huKTsK
IAlpZiAocmV0KQogCQlnb3RvIG91dF9lcnJvcjsKKwlmcmVlX2V2dGNobiA9IDE7CiAJaXJxID0g
YmluZF9ldnRjaG5fdG9faXJxaGFuZGxlcigqZXZ0Y2huLCBwdmNhbGxzX2Zyb250X2Nvbm5faGFu
ZGxlciwKIAkJCQkJMCwgInB2Y2FsbHMtZnJvbnRlbmQiLCBtYXApOwogCWlmIChpcnEgPCAwKSB7
CkBAIC00MDQsNyArNDA0LDcgQEAgc3RhdGljIGludCBjcmVhdGVfYWN0aXZlKHN0cnVjdCBzb2Nr
X21hcHBpbmcgKm1hcCwgaW50ICpldnRjaG4pCiAJcmV0dXJuIDA7CiAKIG91dF9lcnJvcjoKLQlp
ZiAoKmV2dGNobiA+PSAwKQorCWlmIChmcmVlX2V2dGNobikKIAkJeGVuYnVzX2ZyZWVfZXZ0Y2hu
KHB2Y2FsbHNfZnJvbnRfZGV2LCAqZXZ0Y2huKTsKIAlyZXR1cm4gcmV0OwogfQpAQCAtNDE1LDcg
KzQxNSw4IEBAIGludCBwdmNhbGxzX2Zyb250X2Nvbm5lY3Qoc3RydWN0IHNvY2tldCAqc29jaywg
c3RydWN0IHNvY2thZGRyICphZGRyLAogCXN0cnVjdCBwdmNhbGxzX2JlZGF0YSAqYmVkYXRhOwog
CXN0cnVjdCBzb2NrX21hcHBpbmcgKm1hcCA9IE5VTEw7CiAJc3RydWN0IHhlbl9wdmNhbGxzX3Jl
cXVlc3QgKnJlcTsKLQlpbnQgbm90aWZ5LCByZXFfaWQsIHJldCwgZXZ0Y2huOworCWludCBub3Rp
ZnksIHJlcV9pZCwgcmV0OworCWV2dGNobl9wb3J0X3QgZXZ0Y2huOwogCiAJaWYgKGFkZHItPnNh
X2ZhbWlseSAhPSBBRl9JTkVUIHx8IHNvY2stPnR5cGUgIT0gU09DS19TVFJFQU0pCiAJCXJldHVy
biAtRU9QTk9UU1VQUDsKQEAgLTc2NSw3ICs3NjYsOCBAQCBpbnQgcHZjYWxsc19mcm9udF9hY2Nl
cHQoc3RydWN0IHNvY2tldCAqc29jaywgc3RydWN0IHNvY2tldCAqbmV3c29jaywgaW50IGZsYWdz
KQogCXN0cnVjdCBzb2NrX21hcHBpbmcgKm1hcDsKIAlzdHJ1Y3Qgc29ja19tYXBwaW5nICptYXAy
ID0gTlVMTDsKIAlzdHJ1Y3QgeGVuX3B2Y2FsbHNfcmVxdWVzdCAqcmVxOwotCWludCBub3RpZnks
IHJlcV9pZCwgcmV0LCBldnRjaG4sIG5vbmJsb2NrOworCWludCBub3RpZnksIHJlcV9pZCwgcmV0
LCBub25ibG9jazsKKwlldnRjaG5fcG9ydF90IGV2dGNobjsKIAogCW1hcCA9IHB2Y2FsbHNfZW50
ZXJfc29jayhzb2NrKTsKIAlpZiAoSVNfRVJSKG1hcCkpCkBAIC0xMTI1LDcgKzExMjcsOCBAQCBz
dGF0aWMgaW50IHB2Y2FsbHNfZnJvbnRfcmVtb3ZlKHN0cnVjdCB4ZW5idXNfZGV2aWNlICpkZXYp
CiBzdGF0aWMgaW50IHB2Y2FsbHNfZnJvbnRfcHJvYmUoc3RydWN0IHhlbmJ1c19kZXZpY2UgKmRl
diwKIAkJCSAgY29uc3Qgc3RydWN0IHhlbmJ1c19kZXZpY2VfaWQgKmlkKQogewotCWludCByZXQg
PSAtRU5PTUVNLCBldnRjaG4sIGk7CisJaW50IHJldCA9IC1FTk9NRU0sIGk7CisJZXZ0Y2huX3Bv
cnRfdCBldnRjaG47CiAJdW5zaWduZWQgaW50IG1heF9wYWdlX29yZGVyLCBmdW5jdGlvbl9jYWxs
cywgbGVuOwogCWNoYXIgKnZlcnNpb25zOwogCWdyYW50X3JlZl90IGdyZWZfaGVhZCA9IDA7CmRp
ZmYgLS1naXQgYS9kcml2ZXJzL3hlbi94ZW4tcGNpYmFjay94ZW5idXMuYyBiL2RyaXZlcnMveGVu
L3hlbi1wY2liYWNrL3hlbmJ1cy5jCmluZGV4IDgzM2IyZDJjNDMxOC4uZjIxMTU1ODc4NTVmIDEw
MDY0NAotLS0gYS9kcml2ZXJzL3hlbi94ZW4tcGNpYmFjay94ZW5idXMuYworKysgYi9kcml2ZXJz
L3hlbi94ZW4tcGNpYmFjay94ZW5idXMuYwpAQCAtMTA1LDEzICsxMDUsMTMgQEAgc3RhdGljIHZv
aWQgZnJlZV9wZGV2KHN0cnVjdCB4ZW5fcGNpYmtfZGV2aWNlICpwZGV2KQogfQogCiBzdGF0aWMg
aW50IHhlbl9wY2lia19kb19hdHRhY2goc3RydWN0IHhlbl9wY2lia19kZXZpY2UgKnBkZXYsIGlu
dCBnbnRfcmVmLAotCQkJICAgICBpbnQgcmVtb3RlX2V2dGNobikKKwkJCSAgICAgZXZ0Y2huX3Bv
cnRfdCByZW1vdGVfZXZ0Y2huKQogewogCWludCBlcnIgPSAwOwogCXZvaWQgKnZhZGRyOwogCiAJ
ZGV2X2RiZygmcGRldi0+eGRldi0+ZGV2LAotCQkiQXR0YWNoaW5nIHRvIGZyb250ZW5kIHJlc291
cmNlcyAtIGdudF9yZWY9JWQgZXZ0Y2huPSVkXG4iLAorCQkiQXR0YWNoaW5nIHRvIGZyb250ZW5k
IHJlc291cmNlcyAtIGdudF9yZWY9JWQgZXZ0Y2huPSV1XG4iLAogCQlnbnRfcmVmLCByZW1vdGVf
ZXZ0Y2huKTsKIAogCWVyciA9IHhlbmJ1c19tYXBfcmluZ192YWxsb2MocGRldi0+eGRldiwgJmdu
dF9yZWYsIDEsICZ2YWRkcik7CkBAIC0xNDIsNyArMTQyLDggQEAgc3RhdGljIGludCB4ZW5fcGNp
YmtfZG9fYXR0YWNoKHN0cnVjdCB4ZW5fcGNpYmtfZGV2aWNlICpwZGV2LCBpbnQgZ250X3JlZiwK
IHN0YXRpYyBpbnQgeGVuX3BjaWJrX2F0dGFjaChzdHJ1Y3QgeGVuX3BjaWJrX2RldmljZSAqcGRl
dikKIHsKIAlpbnQgZXJyID0gMDsKLQlpbnQgZ250X3JlZiwgcmVtb3RlX2V2dGNobjsKKwlpbnQg
Z250X3JlZjsKKwlldnRjaG5fcG9ydF90IHJlbW90ZV9ldnRjaG47CiAJY2hhciAqbWFnaWMgPSBO
VUxMOwogCiAKZGlmZiAtLWdpdCBhL2RyaXZlcnMveGVuL3hlbi1zY3NpYmFjay5jIGIvZHJpdmVy
cy94ZW4veGVuLXNjc2liYWNrLmMKaW5kZXggYmEwOTQyZTQ4MWJjLi4wM2Q3MTgwYThhZTcgMTAw
NjQ0Ci0tLSBhL2RyaXZlcnMveGVuL3hlbi1zY3NpYmFjay5jCisrKyBiL2RyaXZlcnMveGVuL3hl
bi1zY3NpYmFjay5jCkBAIC04MTMsNyArODEzLDcgQEAgc3RhdGljIGlycXJldHVybl90IHNjc2li
YWNrX2lycV9mbihpbnQgaXJxLCB2b2lkICpkZXZfaWQpCiB9CiAKIHN0YXRpYyBpbnQgc2NzaWJh
Y2tfaW5pdF9zcmluZyhzdHJ1Y3QgdnNjc2lia19pbmZvICppbmZvLCBncmFudF9yZWZfdCByaW5n
X3JlZiwKLQkJCWV2dGNobl9wb3J0X3QgZXZ0Y2huKQorCQkJZXZ0Y2huX3BvcnRfdCBwb3J0KQog
ewogCXZvaWQgKmFyZWE7CiAJc3RydWN0IHZzY3NpaWZfc3JpbmcgKnNyaW5nOwpAQCAtODI5LDcg
KzgyOSw3IEBAIHN0YXRpYyBpbnQgc2NzaWJhY2tfaW5pdF9zcmluZyhzdHJ1Y3QgdnNjc2lia19p
bmZvICppbmZvLCBncmFudF9yZWZfdCByaW5nX3JlZiwKIAlzcmluZyA9IChzdHJ1Y3QgdnNjc2lp
Zl9zcmluZyAqKWFyZWE7CiAJQkFDS19SSU5HX0lOSVQoJmluZm8tPnJpbmcsIHNyaW5nLCBQQUdF
X1NJWkUpOwogCi0JZXJyID0gYmluZF9pbnRlcmRvbWFpbl9ldnRjaG5fdG9faXJxKGluZm8tPmRv
bWlkLCBldnRjaG4pOworCWVyciA9IGJpbmRfaW50ZXJkb21haW5fZXZ0Y2huX3RvX2lycShpbmZv
LT5kb21pZCwgcG9ydCk7CiAJaWYgKGVyciA8IDApCiAJCWdvdG8gdW5tYXBfcGFnZTsKIApAQCAt
ODU0LDE4ICs4NTQsMTkgQEAgc3RhdGljIGludCBzY3NpYmFja19pbml0X3NyaW5nKHN0cnVjdCB2
c2NzaWJrX2luZm8gKmluZm8sIGdyYW50X3JlZl90IHJpbmdfcmVmLAogc3RhdGljIGludCBzY3Np
YmFja19tYXAoc3RydWN0IHZzY3NpYmtfaW5mbyAqaW5mbykKIHsKIAlzdHJ1Y3QgeGVuYnVzX2Rl
dmljZSAqZGV2ID0gaW5mby0+ZGV2OwotCXVuc2lnbmVkIGludCByaW5nX3JlZiwgZXZ0Y2huOwor
CXVuc2lnbmVkIGludCByaW5nX3JlZjsKKwlldnRjaG5fcG9ydF90IHBvcnQ7CiAJaW50IGVycjsK
IAogCWVyciA9IHhlbmJ1c19nYXRoZXIoWEJUX05JTCwgZGV2LT5vdGhlcmVuZCwKIAkJCSJyaW5n
LXJlZiIsICIldSIsICZyaW5nX3JlZiwKLQkJCSJldmVudC1jaGFubmVsIiwgIiV1IiwgJmV2dGNo
biwgTlVMTCk7CisJCQkiZXZlbnQtY2hhbm5lbCIsICIldSIsICZwb3J0LCBOVUxMKTsKIAlpZiAo
ZXJyKSB7CiAJCXhlbmJ1c19kZXZfZmF0YWwoZGV2LCBlcnIsICJyZWFkaW5nICVzIHJpbmciLCBk
ZXYtPm90aGVyZW5kKTsKIAkJcmV0dXJuIGVycjsKIAl9CiAKLQlyZXR1cm4gc2NzaWJhY2tfaW5p
dF9zcmluZyhpbmZvLCByaW5nX3JlZiwgZXZ0Y2huKTsKKwlyZXR1cm4gc2NzaWJhY2tfaW5pdF9z
cmluZyhpbmZvLCByaW5nX3JlZiwgcG9ydCk7CiB9CiAKIC8qCmRpZmYgLS1naXQgYS9kcml2ZXJz
L3hlbi94ZW5idXMveGVuYnVzX2NsaWVudC5jIGIvZHJpdmVycy94ZW4veGVuYnVzL3hlbmJ1c19j
bGllbnQuYwppbmRleCBlMTdjYTgxNTYxNzEuLjFmODc1MTRlNGVmYyAxMDA2NDQKLS0tIGEvZHJp
dmVycy94ZW4veGVuYnVzL3hlbmJ1c19jbGllbnQuYworKysgYi9kcml2ZXJzL3hlbi94ZW5idXMv
eGVuYnVzX2NsaWVudC5jCkBAIC0zOTEsNyArMzkxLDcgQEAgRVhQT1JUX1NZTUJPTF9HUEwoeGVu
YnVzX2dyYW50X3JpbmcpOwogICogZXJyb3IsIHRoZSBkZXZpY2Ugd2lsbCBzd2l0Y2ggdG8gWGVu
YnVzU3RhdGVDbG9zaW5nLCBhbmQgdGhlIGVycm9yIHdpbGwgYmUKICAqIHNhdmVkIGluIHRoZSBz
dG9yZS4KICAqLwotaW50IHhlbmJ1c19hbGxvY19ldnRjaG4oc3RydWN0IHhlbmJ1c19kZXZpY2Ug
KmRldiwgaW50ICpwb3J0KQoraW50IHhlbmJ1c19hbGxvY19ldnRjaG4oc3RydWN0IHhlbmJ1c19k
ZXZpY2UgKmRldiwgZXZ0Y2huX3BvcnRfdCAqcG9ydCkKIHsKIAlzdHJ1Y3QgZXZ0Y2huX2FsbG9j
X3VuYm91bmQgYWxsb2NfdW5ib3VuZDsKIAlpbnQgZXJyOwpAQCAtNDE0LDcgKzQxNCw3IEBAIEVY
UE9SVF9TWU1CT0xfR1BMKHhlbmJ1c19hbGxvY19ldnRjaG4pOwogLyoqCiAgKiBGcmVlIGFuIGV4
aXN0aW5nIGV2ZW50IGNoYW5uZWwuIFJldHVybnMgMCBvbiBzdWNjZXNzIG9yIC1lcnJubyBvbiBl
cnJvci4KICAqLwotaW50IHhlbmJ1c19mcmVlX2V2dGNobihzdHJ1Y3QgeGVuYnVzX2RldmljZSAq
ZGV2LCBpbnQgcG9ydCkKK2ludCB4ZW5idXNfZnJlZV9ldnRjaG4oc3RydWN0IHhlbmJ1c19kZXZp
Y2UgKmRldiwgZXZ0Y2huX3BvcnRfdCBwb3J0KQogewogCXN0cnVjdCBldnRjaG5fY2xvc2UgY2xv
c2U7CiAJaW50IGVycjsKQEAgLTQyMyw3ICs0MjMsNyBAQCBpbnQgeGVuYnVzX2ZyZWVfZXZ0Y2hu
KHN0cnVjdCB4ZW5idXNfZGV2aWNlICpkZXYsIGludCBwb3J0KQogCiAJZXJyID0gSFlQRVJWSVNP
Ul9ldmVudF9jaGFubmVsX29wKEVWVENITk9QX2Nsb3NlLCAmY2xvc2UpOwogCWlmIChlcnIpCi0J
CXhlbmJ1c19kZXZfZXJyb3IoZGV2LCBlcnIsICJmcmVlaW5nIGV2ZW50IGNoYW5uZWwgJWQiLCBw
b3J0KTsKKwkJeGVuYnVzX2Rldl9lcnJvcihkZXYsIGVyciwgImZyZWVpbmcgZXZlbnQgY2hhbm5l
bCAldSIsIHBvcnQpOwogCiAJcmV0dXJuIGVycjsKIH0KZGlmZiAtLWdpdCBhL2luY2x1ZGUveGVu
L2V2ZW50cy5oIGIvaW5jbHVkZS94ZW4vZXZlbnRzLmgKaW5kZXggYzBlNmEwNTk4Mzk3Li41ZmFj
NTVkZGQ2ZDMgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUveGVuL2V2ZW50cy5oCisrKyBiL2luY2x1ZGUv
eGVuL2V2ZW50cy5oCkBAIC0xNCw4ICsxNCw4IEBACiAKIHVuc2lnbmVkIHhlbl9ldnRjaG5fbnJf
Y2hhbm5lbHModm9pZCk7CiAKLWludCBiaW5kX2V2dGNobl90b19pcnEodW5zaWduZWQgaW50IGV2
dGNobik7Ci1pbnQgYmluZF9ldnRjaG5fdG9faXJxaGFuZGxlcih1bnNpZ25lZCBpbnQgZXZ0Y2hu
LAoraW50IGJpbmRfZXZ0Y2huX3RvX2lycShldnRjaG5fcG9ydF90IHBvcnQpOworaW50IGJpbmRf
ZXZ0Y2huX3RvX2lycWhhbmRsZXIoZXZ0Y2huX3BvcnRfdCBwb3J0LAogCQkJICAgICAgaXJxX2hh
bmRsZXJfdCBoYW5kbGVyLAogCQkJICAgICAgdW5zaWduZWQgbG9uZyBpcnFmbGFncywgY29uc3Qg
Y2hhciAqZGV2bmFtZSwKIAkJCSAgICAgIHZvaWQgKmRldl9pZCk7CkBAIC0zMSw5ICszMSw5IEBA
IGludCBiaW5kX2lwaV90b19pcnFoYW5kbGVyKGVudW0gaXBpX3ZlY3RvciBpcGksCiAJCQkgICBj
b25zdCBjaGFyICpkZXZuYW1lLAogCQkJICAgdm9pZCAqZGV2X2lkKTsKIGludCBiaW5kX2ludGVy
ZG9tYWluX2V2dGNobl90b19pcnEodW5zaWduZWQgaW50IHJlbW90ZV9kb21haW4sCi0JCQkJICAg
dW5zaWduZWQgaW50IHJlbW90ZV9wb3J0KTsKKwkJCQkgICBldnRjaG5fcG9ydF90IHJlbW90ZV9w
b3J0KTsKIGludCBiaW5kX2ludGVyZG9tYWluX2V2dGNobl90b19pcnFoYW5kbGVyKHVuc2lnbmVk
IGludCByZW1vdGVfZG9tYWluLAotCQkJCQkgIHVuc2lnbmVkIGludCByZW1vdGVfcG9ydCwKKwkJ
CQkJICBldnRjaG5fcG9ydF90IHJlbW90ZV9wb3J0LAogCQkJCQkgIGlycV9oYW5kbGVyX3QgaGFu
ZGxlciwKIAkJCQkJICB1bnNpZ25lZCBsb25nIGlycWZsYWdzLAogCQkJCQkgIGNvbnN0IGNoYXIg
KmRldm5hbWUsCkBAIC01NCwxNSArNTQsMTUgQEAgaW50IHhlbl9zZXRfaXJxX3ByaW9yaXR5KHVu
c2lnbmVkIGlycSwgdW5zaWduZWQgcHJpb3JpdHkpOwogLyoKICAqIEFsbG93IGV4dHJhIHJlZmVy
ZW5jZXMgdG8gZXZlbnQgY2hhbm5lbHMgZXhwb3NlZCB0byB1c2Vyc3BhY2UgYnkgZXZ0Y2huCiAg
Ki8KLWludCBldnRjaG5fbWFrZV9yZWZjb3VudGVkKHVuc2lnbmVkIGludCBldnRjaG4pOwotaW50
IGV2dGNobl9nZXQodW5zaWduZWQgaW50IGV2dGNobik7Ci12b2lkIGV2dGNobl9wdXQodW5zaWdu
ZWQgaW50IGV2dGNobik7CitpbnQgZXZ0Y2huX21ha2VfcmVmY291bnRlZChldnRjaG5fcG9ydF90
IHBvcnQpOworaW50IGV2dGNobl9nZXQoZXZ0Y2huX3BvcnRfdCBwb3J0KTsKK3ZvaWQgZXZ0Y2hu
X3B1dChldnRjaG5fcG9ydF90IHBvcnQpOwogCiB2b2lkIHhlbl9zZW5kX0lQSV9vbmUodW5zaWdu
ZWQgaW50IGNwdSwgZW51bSBpcGlfdmVjdG9yIHZlY3Rvcik7Ci12b2lkIHJlYmluZF9ldnRjaG5f
aXJxKGludCBldnRjaG4sIGludCBpcnEpOwordm9pZCByZWJpbmRfZXZ0Y2huX2lycShldnRjaG5f
cG9ydF90IHBvcnQsIGludCBpcnEpOwogaW50IHhlbl9zZXRfYWZmaW5pdHlfZXZ0Y2huKHN0cnVj
dCBpcnFfZGVzYyAqZGVzYywgdW5zaWduZWQgaW50IHRjcHUpOwogCi1zdGF0aWMgaW5saW5lIHZv
aWQgbm90aWZ5X3JlbW90ZV92aWFfZXZ0Y2huKGludCBwb3J0KQorc3RhdGljIGlubGluZSB2b2lk
IG5vdGlmeV9yZW1vdGVfdmlhX2V2dGNobihldnRjaG5fcG9ydF90IHBvcnQpCiB7CiAJc3RydWN0
IGV2dGNobl9zZW5kIHNlbmQgPSB7IC5wb3J0ID0gcG9ydCB9OwogCSh2b2lkKUhZUEVSVklTT1Jf
ZXZlbnRfY2hhbm5lbF9vcChFVlRDSE5PUF9zZW5kLCAmc2VuZCk7CkBAIC04Niw3ICs4Niw3IEBA
IHZvaWQgeGVuX3BvbGxfaXJxKGludCBpcnEpOwogdm9pZCB4ZW5fcG9sbF9pcnFfdGltZW91dChp
bnQgaXJxLCB1NjQgdGltZW91dCk7CiAKIC8qIERldGVybWluZSB0aGUgSVJRIHdoaWNoIGlzIGJv
dW5kIHRvIGFuIGV2ZW50IGNoYW5uZWwgKi8KLXVuc2lnbmVkIGlycV9mcm9tX2V2dGNobih1bnNp
Z25lZCBpbnQgZXZ0Y2huKTsKK3Vuc2lnbmVkIGludCBpcnFfZnJvbV9ldnRjaG4oZXZ0Y2huX3Bv
cnRfdCBwb3J0KTsKIGludCBpcnFfZnJvbV92aXJxKHVuc2lnbmVkIGludCBjcHUsIHVuc2lnbmVk
IGludCB2aXJxKTsKIHVuc2lnbmVkIGludCBldnRjaG5fZnJvbV9pcnEodW5zaWduZWQgaXJxKTsK
IApkaWZmIC0tZ2l0IGEvaW5jbHVkZS94ZW4vaW50ZXJmYWNlL2V2ZW50X2NoYW5uZWwuaCBiL2lu
Y2x1ZGUveGVuL2ludGVyZmFjZS9ldmVudF9jaGFubmVsLmgKaW5kZXggNDU2NTBjOWEwNmQ1Li5j
ZjgwZTMzOGZiYjAgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUveGVuL2ludGVyZmFjZS9ldmVudF9jaGFu
bmVsLmgKKysrIGIvaW5jbHVkZS94ZW4vaW50ZXJmYWNlL2V2ZW50X2NoYW5uZWwuaApAQCAtMjIw
LDcgKzIyMCw3IEBAIHN0cnVjdCBldnRjaG5fZXhwYW5kX2FycmF5IHsKICNkZWZpbmUgRVZUQ0hO
T1Bfc2V0X3ByaW9yaXR5ICAgIDEzCiBzdHJ1Y3QgZXZ0Y2huX3NldF9wcmlvcml0eSB7CiAJLyog
SU4gcGFyYW1ldGVycy4gKi8KLQl1aW50MzJfdCBwb3J0OworCWV2dGNobl9wb3J0X3QgcG9ydDsK
IAl1aW50MzJfdCBwcmlvcml0eTsKIH07CiAKZGlmZiAtLWdpdCBhL2luY2x1ZGUveGVuL3hlbmJ1
cy5oIGIvaW5jbHVkZS94ZW4veGVuYnVzLmgKaW5kZXggODlhODg5NTg1YmEwLi5iYzc1MDliNTJm
ZWEgMTAwNjQ0Ci0tLSBhL2luY2x1ZGUveGVuL3hlbmJ1cy5oCisrKyBiL2luY2x1ZGUveGVuL3hl
bmJ1cy5oCkBAIC00NCw2ICs0NCw3IEBACiAjaW5jbHVkZSA8bGludXgvc2xhYi5oPgogI2luY2x1
ZGUgPHhlbi9pbnRlcmZhY2UveGVuLmg+CiAjaW5jbHVkZSA8eGVuL2ludGVyZmFjZS9ncmFudF90
YWJsZS5oPgorI2luY2x1ZGUgPHhlbi9pbnRlcmZhY2UvZXZlbnRfY2hhbm5lbC5oPgogI2luY2x1
ZGUgPHhlbi9pbnRlcmZhY2UvaW8veGVuYnVzLmg+CiAjaW5jbHVkZSA8eGVuL2ludGVyZmFjZS9p
by94c193aXJlLmg+CiAKQEAgLTIxOCw4ICsyMTksOCBAQCBpbnQgeGVuYnVzX3VubWFwX3Jpbmco
c3RydWN0IHhlbmJ1c19kZXZpY2UgKmRldiwKIAkJICAgICAgZ3JhbnRfaGFuZGxlX3QgKmhhbmRs
ZXMsIHVuc2lnbmVkIGludCBucl9oYW5kbGVzLAogCQkgICAgICB1bnNpZ25lZCBsb25nICp2YWRk
cnMpOwogCi1pbnQgeGVuYnVzX2FsbG9jX2V2dGNobihzdHJ1Y3QgeGVuYnVzX2RldmljZSAqZGV2
LCBpbnQgKnBvcnQpOwotaW50IHhlbmJ1c19mcmVlX2V2dGNobihzdHJ1Y3QgeGVuYnVzX2Rldmlj
ZSAqZGV2LCBpbnQgcG9ydCk7CitpbnQgeGVuYnVzX2FsbG9jX2V2dGNobihzdHJ1Y3QgeGVuYnVz
X2RldmljZSAqZGV2LCBldnRjaG5fcG9ydF90ICpwb3J0KTsKK2ludCB4ZW5idXNfZnJlZV9ldnRj
aG4oc3RydWN0IHhlbmJ1c19kZXZpY2UgKmRldiwgZXZ0Y2huX3BvcnRfdCBwb3J0KTsKIAogZW51
bSB4ZW5idXNfc3RhdGUgeGVuYnVzX3JlYWRfZHJpdmVyX3N0YXRlKGNvbnN0IGNoYXIgKnBhdGgp
OwogCi0tIAoyLjE3LjEKCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fXwpYZW4tZGV2ZWwgbWFpbGluZyBsaXN0Clhlbi1kZXZlbEBsaXN0cy54ZW5wcm9qZWN0
Lm9yZwpodHRwczovL2xpc3RzLnhlbnByb2plY3Qub3JnL21haWxtYW4vbGlzdGluZm8veGVuLWRl
dmVs
